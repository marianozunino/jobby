type Message {
  id: ID!
  name: String!
  email: String!
  phone: String
  message: String!

  createdAt: Timestamp!
  updatedAt: Timestamp!
  deletedAt: Timestamp
}

input MessageAggregationInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  phone: SortOrder

  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
}

input MessageCreateInput {
  name: String!
  email: String!
  phone: String
  message: String!
}

input MessageUpdateInput {
  name: String
  email: String
  phone: String
  message: String
}

type PaginatedMessageResponse {
  edges: [Message!]!
  total: Int!
  take: Int
  skip: Int
}

extend type Mutation {
  sendMessage(input: MessageCreateInput!): Message!
  deleteMessage(id: UUIDv4!): Message! @auth @hasRole(role: ADMIN)
  updateMessage(id: UUIDv4!, input: MessageUpdateInput!): Message!
    @auth
    @hasRole(role: ADMIN)
}

extend type Query {
  messages(
    orderBy: MessageAggregationInput
    take: Int = 10
    skip: Int = 0
  ): PaginatedMessageResponse! @auth
  message(id: UUIDv4!): Message! @auth
}
