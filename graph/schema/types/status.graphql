type Status {
  id: ID!
  name: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  deletedAt: Timestamp
  jobOffers: [JobOffer]!
}

input StatusAggregationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
}

input StatusCreateInput {
  name: String!
}

input StatusUpdateInput {
  name: String!
}

type PaginatedStatusResponse {
  edges: [Status!]!
  total: Int!
  take: Int
  skip: Int
}

extend type Mutation {
  createStatus(input: StatusCreateInput!): Status! @auth @hasRole(role: ADMIN)
  deleteStatus(id: UUIDv4!): Status! @auth @hasRole(role: ADMIN)
  updateStatus(id: UUIDv4!, input: StatusUpdateInput!): Status!
    @auth
    @hasRole(role: ADMIN)
}

extend type Query {
  status(id: UUIDv4!): Status!
  statuses(
    orderBy: StatusAggregationInput
    take: Int = 10
    skip: Int = 0
  ): PaginatedStatusResponse!
}
