extend type Mutation {
  createPost(input: PostCreateInput!): Post! @auth @auth @hasRole(role: ADMIN)
  deletePost(id: ID!): Post! @auth @auth @hasRole(role: ADMIN)
  publishPost(id: ID!): Post! @auth @auth @hasRole(role: ADMIN)
  updatePost(id: ID!, input: PostUpdateInput!): Post! @auth @auth @hasRole(role: ADMIN)
}

type PaginatedPostResponse {
  edges: [Post!]!
  skip: Int
  take: Int
  total: Int!
}

type Post {
  author: User! @goField(forceResolver: true)
  categories: [PostCategory!]! @goField(forceResolver: true)
  content: String!
  createdAt: Timestamp!
  deletedAt: Timestamp
  id: ID!
  isHighlighted: Boolean!
  isPublished: Boolean!
  previewImage: String
  publishedAt: Timestamp
  slug: String!
  title: String!
  updatedAt: Timestamp!
}

input PostAggregationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  isHighlighted: SortOrder
  isPublished: SortOrder
  publishedAt: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostCreateInput {
  categories: [ID!]!
  content: String!
  isHighlighted: Boolean!
  isPublished: Boolean!
  name: String!
  previewImage: String
  slug: String
  title: String!
}

input PostUpdateInput {
  categories: [ID!]
  content: String!
  isHighlighted: Boolean!
  name: String!
  previewImage: String
  slug: String!
  title: String!
}

input PostWhereInput {
  createdAt: Timestamp
  deletedAt: Timestamp
  id: ID
  isHighlighted: Boolean
  isPublished: Boolean
  publishedAt: Timestamp
  slug: String
  title: String
  updatedAt: Timestamp
}

extend type Query {
  post(id: ID!): Post!
  posts(orderBy: PostAggregationInput, skip: Int = 0, take: Int = 10, where: PostWhereInput): PaginatedPostResponse!
}
