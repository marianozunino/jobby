package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/dtos"
	"github.com/marianozunino/cc-backend-go/graph/generated"
)

// Status is the resolver for the status field.
func (r *queryResolver) Status(ctx context.Context, id string) (*dtos.Status, error) {
	return r.Service.GetStatus(ctx, id)
}

// Statuses is the resolver for the statuses field.
func (r *queryResolver) Statuses(ctx context.Context, orderBy *dtos.StatusAggregationInput, take *int, skip *int) (*dtos.PaginatedStatusResponse, error) {
	return r.Service.PaginatedStatuses(ctx, orderBy, take, skip)
}

// Messages implements generated.QueryResolver.
func (r *queryResolver) Messages(ctx context.Context, orderBy *dtos.MessageAggregationInput, take *int, skip *int) (*dtos.PaginatedMessageResponse, error) {
	return r.Service.PaginatedMessages(ctx, orderBy, take, skip)
}

// Message implements generated.QueryResolver.
func (r *queryResolver) Message(ctx context.Context, id string) (*dtos.Message, error) {
	return r.Service.GetMessage(ctx, id)
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id uuid.UUID) (*dtos.Category, error) {
	return r.Service.GetCategory(ctx, id)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, orderBy *dtos.CategoryAggregationInput, take *int, skip *int, where *dtos.CategoryWhereInput) (*dtos.PaginatedCategoryResponse, error) {
	return r.Service.PaginatedCategories(ctx, orderBy, take, skip, where)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id uuid.UUID) (*dtos.Post, error) {
	return r.Service.GetPost(ctx, id)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, orderBy *dtos.PostAggregationInput, take *int, skip *int, where *dtos.PostWhereInput) (*dtos.PaginatedPostResponse, error) {
	return r.Service.PaginatedPosts(ctx, orderBy, take, skip, where)
}

// PostCategory is the resolver for the postCategory field.
func (r *queryResolver) PostCategory(ctx context.Context, id uuid.UUID) (*dtos.PostCategory, error) {
	return r.Service.GetPostCategory(ctx, id)
}

// PostCategories is the resolver for the postCategories field.
func (r *queryResolver) PostCategories(ctx context.Context, orderBy *dtos.PostCategoryAggregationInput, take *int, skip *int, where *dtos.PostCategoryWhereInput) (*dtos.PaginatedPostCategoryResponse, error) {
	return r.Service.PaginatedPostCategories(ctx, orderBy, take, skip, where)
}

// DegreeLevel is the resolver for the degreeLevel field.
func (r *queryResolver) DegreeLevel(ctx context.Context, id uuid.UUID) (*dtos.DegreeLevel, error) {
	return r.Service.GetDegreeLevel(ctx, id)
}

// DegreeLevels is the resolver for the degreeLevels field.
func (r *queryResolver) DegreeLevels(ctx context.Context, orderBy *dtos.DegreeLevelAggregationInput, take *int, skip *int, where *dtos.DegreeLevelWhereInput) (*dtos.PaginatedDegreeLevelResponse, error) {
	return r.Service.PaginatedDegreeLevels(ctx, orderBy, take, skip, where)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
