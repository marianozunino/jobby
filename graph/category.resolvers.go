package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/google/uuid"
	"github.com/marianozunino/jobby/dtos"
	"github.com/marianozunino/jobby/graph/generated"
)

// Children is the resolver for the children field.
func (r *categoryResolver) Children(ctx context.Context, obj *dtos.Category) ([]*dtos.Category, error) {
	return r.DataLoaders.Retrieve(ctx).ChildCategoriesForParentId.Load(obj.ID)
}

// Parent is the resolver for the parent field.
func (r *categoryResolver) Parent(ctx context.Context, obj *dtos.Category) (*dtos.Category, error) {
	if obj.ParentID == nil {
		return nil, nil
	}
	return r.DataLoaders.Retrieve(ctx).ParentCategoryForChildId.Load(*obj.ParentID)
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input dtos.CategoryCreateInput) (*dtos.Category, error) {
	return r.Service.CreateCategory(ctx, input)
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id uuid.UUID) (*dtos.Category, error) {
	return r.Service.DeleteCategory(ctx, id)
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id uuid.UUID, input dtos.CategoryUpdateInput) (*dtos.Category, error) {
	return r.Service.UpdateCategory(ctx, id, input)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, orderBy *dtos.CategoryAggregationInput, skip *int, take *int, where *dtos.CategoryWhereInput) (*dtos.PaginatedCategoryResponse, error) {
	return r.Service.PaginatedCategories(ctx, orderBy, take, skip, where)
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id uuid.UUID) (*dtos.Category, error) {
	return r.Service.GetCategory(ctx, id)
}

// Category returns generated.CategoryResolver implementation.
func (r *Resolver) Category() generated.CategoryResolver { return &categoryResolver{r} }

type categoryResolver struct{ *Resolver }
