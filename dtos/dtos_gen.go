// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package dtos

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Auth struct {
	AccessToken uuid.UUID `json:"accessToken"`
}

type AuthInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type BooleanFilter struct {
	Eq *bool `json:"eq,omitempty"`
}

type Category struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	Slug      string      `json:"slug"`
	ParentID  *uuid.UUID  `json:"parentId,omitempty"`
	IsRoot    bool        `json:"isRoot"`
	Children  []*Category `json:"children"`
	Parent    *Category   `json:"parent,omitempty"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt time.Time   `json:"updatedAt"`
	DeletedAt *time.Time  `json:"deletedAt,omitempty"`
}

type CategoryAggregationInput struct {
	ID        *SortOrder `json:"id,omitempty"`
	Name      *SortOrder `json:"name,omitempty"`
	Slug      *SortOrder `json:"slug,omitempty"`
	IsRoot    *SortOrder `json:"isRoot,omitempty"`
	CreatedAt *SortOrder `json:"createdAt,omitempty"`
	UpdatedAt *SortOrder `json:"updatedAt,omitempty"`
	DeletedAt *SortOrder `json:"deletedAt,omitempty"`
}

type CategoryCreateInput struct {
	Name     string     `json:"name"`
	Slug     *string    `json:"slug,omitempty"`
	IsRoot   bool       `json:"isRoot"`
	ParentID *uuid.UUID `json:"parentId,omitempty"`
}

type CategoryUpdateInput struct {
	Name     string     `json:"name"`
	IsRoot   bool       `json:"isRoot"`
	ParentID *uuid.UUID `json:"parentId,omitempty"`
}

type CategoryWhereInput struct {
	ID     *uuid.UUID `json:"id,omitempty"`
	Name   *string    `json:"name,omitempty"`
	Slug   *string    `json:"slug,omitempty"`
	IsRoot *bool      `json:"isRoot,omitempty"`
}

type DegreeLevel struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type DegreeLevelAggregationInput struct {
	ID        *SortOrder `json:"id,omitempty"`
	Name      *SortOrder `json:"name,omitempty"`
	CreatedAt *SortOrder `json:"createdAt,omitempty"`
	UpdatedAt *SortOrder `json:"updatedAt,omitempty"`
	DeletedAt *SortOrder `json:"deletedAt,omitempty"`
}

type DegreeLevelCreateInput struct {
	Name string `json:"name"`
}

type DegreeLevelUpdateInput struct {
	Name string `json:"name"`
}

type DegreeLevelWhereInput struct {
	ID   *uuid.UUID `json:"id,omitempty"`
	Name *string    `json:"name,omitempty"`
}

type IDFilter struct {
	Eq *uuid.UUID `json:"eq,omitempty"`
}

type JobOffer struct {
	ID        uuid.UUID  `json:"id"`
	Slug      string     `json:"slug"`
	Title     string     `json:"title"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	StatusID  uuid.UUID  `json:"statusId"`
}

type Message struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	Email     string     `json:"email"`
	Phone     string     `json:"phone"`
	Message   string     `json:"message"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type MessageAggregationInput struct {
	ID        *SortOrder `json:"id,omitempty"`
	Name      *SortOrder `json:"name,omitempty"`
	Email     *SortOrder `json:"email,omitempty"`
	Phone     *SortOrder `json:"phone,omitempty"`
	CreatedAt *SortOrder `json:"createdAt,omitempty"`
	UpdatedAt *SortOrder `json:"updatedAt,omitempty"`
	DeletedAt *SortOrder `json:"deletedAt,omitempty"`
}

type MessageCreateInput struct {
	Name    string `json:"name"`
	Email   string `json:"email"`
	Phone   string `json:"phone"`
	Message string `json:"message"`
}

type MessageUpdateInput struct {
	Name    *string `json:"name,omitempty"`
	Email   *string `json:"email,omitempty"`
	Phone   *string `json:"phone,omitempty"`
	Message *string `json:"message,omitempty"`
}

type PaginatedCategoryResponse struct {
	Edges []*Category `json:"edges"`
	Total int         `json:"total"`
	Take  *int        `json:"take,omitempty"`
	Skip  *int        `json:"skip,omitempty"`
}

type PaginatedDegreeLevelResponse struct {
	Edges []*DegreeLevel `json:"edges"`
	Total int            `json:"total"`
	Take  *int           `json:"take,omitempty"`
	Skip  *int           `json:"skip,omitempty"`
}

type PaginatedMessageResponse struct {
	Edges []*Message `json:"edges"`
	Total int        `json:"total"`
	Take  *int       `json:"take,omitempty"`
	Skip  *int       `json:"skip,omitempty"`
}

type PaginatedStatusResponse struct {
	Edges []*Status `json:"edges"`
	Total int       `json:"total"`
	Take  *int      `json:"take,omitempty"`
	Skip  *int      `json:"skip,omitempty"`
}

type Status struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt time.Time   `json:"updatedAt"`
	DeletedAt *time.Time  `json:"deletedAt,omitempty"`
	JobOffers []*JobOffer `json:"jobOffers"`
}

type StatusAggregationInput struct {
	ID        *SortOrder `json:"id,omitempty"`
	Name      *SortOrder `json:"name,omitempty"`
	CreatedAt *SortOrder `json:"createdAt,omitempty"`
	UpdatedAt *SortOrder `json:"updatedAt,omitempty"`
	DeletedAt *SortOrder `json:"deletedAt,omitempty"`
}

type StatusCreateInput struct {
	Name string `json:"name"`
}

type StatusUpdateInput struct {
	Name string `json:"name"`
}

type StringFilter struct {
	Eq *string `json:"eq,omitempty"`
}

type TimestampFilter struct {
	Eq  *time.Time `json:"eq,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Lt  *time.Time `json:"lt,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
