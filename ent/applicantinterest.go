// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/applicantinterest"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofile"
	"github.com/marianozunino/cc-backend-go/ent/category"
)

// ApplicantInterest is the model entity for the ApplicantInterest schema.
type ApplicantInterest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ApplicantProfileID holds the value of the "applicant_profile_id" field.
	ApplicantProfileID uuid.UUID `json:"applicant_profile_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicantInterestQuery when eager-loading is set.
	Edges        ApplicantInterestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApplicantInterestEdges holds the relations/edges for other nodes in the graph.
type ApplicantInterestEdges struct {
	// ApplicantProfile holds the value of the applicant_profile edge.
	ApplicantProfile *ApplicantProfile `json:"applicant_profile,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicantProfileOrErr returns the ApplicantProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicantInterestEdges) ApplicantProfileOrErr() (*ApplicantProfile, error) {
	if e.loadedTypes[0] {
		if e.ApplicantProfile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: applicantprofile.Label}
		}
		return e.ApplicantProfile, nil
	}
	return nil, &NotLoadedError{edge: "applicant_profile"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicantInterestEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[1] {
		if e.Category == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicantInterest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicantinterest.FieldCreatedAt, applicantinterest.FieldUpdatedAt, applicantinterest.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case applicantinterest.FieldID, applicantinterest.FieldCategoryID, applicantinterest.FieldApplicantProfileID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicantInterest fields.
func (ai *ApplicantInterest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicantinterest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ai.ID = *value
			}
		case applicantinterest.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				ai.CategoryID = *value
			}
		case applicantinterest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case applicantinterest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		case applicantinterest.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ai.DeletedAt = value.Time
			}
		case applicantinterest.FieldApplicantProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field applicant_profile_id", values[i])
			} else if value != nil {
				ai.ApplicantProfileID = *value
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplicantInterest.
// This includes values selected through modifiers, order, etc.
func (ai *ApplicantInterest) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryApplicantProfile queries the "applicant_profile" edge of the ApplicantInterest entity.
func (ai *ApplicantInterest) QueryApplicantProfile() *ApplicantProfileQuery {
	return NewApplicantInterestClient(ai.config).QueryApplicantProfile(ai)
}

// QueryCategory queries the "category" edge of the ApplicantInterest entity.
func (ai *ApplicantInterest) QueryCategory() *CategoryQuery {
	return NewApplicantInterestClient(ai.config).QueryCategory(ai)
}

// Update returns a builder for updating this ApplicantInterest.
// Note that you need to call ApplicantInterest.Unwrap() before calling this method if this ApplicantInterest
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *ApplicantInterest) Update() *ApplicantInterestUpdateOne {
	return NewApplicantInterestClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the ApplicantInterest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *ApplicantInterest) Unwrap() *ApplicantInterest {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicantInterest is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *ApplicantInterest) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicantInterest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", ai.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ai.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("applicant_profile_id=")
	builder.WriteString(fmt.Sprintf("%v", ai.ApplicantProfileID))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicantInterests is a parsable slice of ApplicantInterest.
type ApplicantInterests []*ApplicantInterest
