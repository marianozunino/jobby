// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofileskill"
	"github.com/marianozunino/cc-backend-go/ent/predicate"
)

// ApplicantProfileSkillDelete is the builder for deleting a ApplicantProfileSkill entity.
type ApplicantProfileSkillDelete struct {
	config
	hooks    []Hook
	mutation *ApplicantProfileSkillMutation
}

// Where appends a list predicates to the ApplicantProfileSkillDelete builder.
func (apsd *ApplicantProfileSkillDelete) Where(ps ...predicate.ApplicantProfileSkill) *ApplicantProfileSkillDelete {
	apsd.mutation.Where(ps...)
	return apsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (apsd *ApplicantProfileSkillDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, apsd.sqlExec, apsd.mutation, apsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (apsd *ApplicantProfileSkillDelete) ExecX(ctx context.Context) int {
	n, err := apsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (apsd *ApplicantProfileSkillDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(applicantprofileskill.Table, sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID))
	if ps := apsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, apsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	apsd.mutation.done = true
	return affected, err
}

// ApplicantProfileSkillDeleteOne is the builder for deleting a single ApplicantProfileSkill entity.
type ApplicantProfileSkillDeleteOne struct {
	apsd *ApplicantProfileSkillDelete
}

// Where appends a list predicates to the ApplicantProfileSkillDelete builder.
func (apsdo *ApplicantProfileSkillDeleteOne) Where(ps ...predicate.ApplicantProfileSkill) *ApplicantProfileSkillDeleteOne {
	apsdo.apsd.mutation.Where(ps...)
	return apsdo
}

// Exec executes the deletion query.
func (apsdo *ApplicantProfileSkillDeleteOne) Exec(ctx context.Context) error {
	n, err := apsdo.apsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{applicantprofileskill.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (apsdo *ApplicantProfileSkillDeleteOne) ExecX(ctx context.Context) {
	if err := apsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
