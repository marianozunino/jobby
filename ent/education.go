// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/degreelevel"
	"github.com/marianozunino/cc-backend-go/ent/education"
)

// Education is the model entity for the Education schema.
type Education struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Institution holds the value of the "institution" field.
	Institution string `json:"institution,omitempty"`
	// DateObtained holds the value of the "date_obtained" field.
	DateObtained time.Time `json:"date_obtained,omitempty"`
	// DegreeLevelID holds the value of the "degree_level_id" field.
	DegreeLevelID *uuid.UUID `json:"degree_level_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// ApplicantProfileID holds the value of the "applicant_profile_id" field.
	ApplicantProfileID uuid.UUID `json:"applicant_profile_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EducationQuery when eager-loading is set.
	Edges                        EducationEdges `json:"edges"`
	applicant_profile_educations *uuid.UUID
	selectValues                 sql.SelectValues
}

// EducationEdges holds the relations/edges for other nodes in the graph.
type EducationEdges struct {
	// DegreeLevel holds the value of the degree_level edge.
	DegreeLevel *DegreeLevel `json:"degree_level,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DegreeLevelOrErr returns the DegreeLevel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EducationEdges) DegreeLevelOrErr() (*DegreeLevel, error) {
	if e.loadedTypes[0] {
		if e.DegreeLevel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: degreelevel.Label}
		}
		return e.DegreeLevel, nil
	}
	return nil, &NotLoadedError{edge: "degree_level"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Education) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case education.FieldDegreeLevelID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case education.FieldTitle, education.FieldInstitution, education.FieldComments:
			values[i] = new(sql.NullString)
		case education.FieldDateObtained, education.FieldCreatedAt, education.FieldUpdatedAt, education.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case education.FieldID, education.FieldApplicantProfileID:
			values[i] = new(uuid.UUID)
		case education.ForeignKeys[0]: // applicant_profile_educations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Education fields.
func (e *Education) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case education.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case education.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case education.FieldInstitution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution", values[i])
			} else if value.Valid {
				e.Institution = value.String
			}
		case education.FieldDateObtained:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_obtained", values[i])
			} else if value.Valid {
				e.DateObtained = value.Time
			}
		case education.FieldDegreeLevelID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field degree_level_id", values[i])
			} else if value.Valid {
				e.DegreeLevelID = new(uuid.UUID)
				*e.DegreeLevelID = *value.S.(*uuid.UUID)
			}
		case education.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case education.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case education.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = value.Time
			}
		case education.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				e.Comments = value.String
			}
		case education.FieldApplicantProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field applicant_profile_id", values[i])
			} else if value != nil {
				e.ApplicantProfileID = *value
			}
		case education.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field applicant_profile_educations", values[i])
			} else if value.Valid {
				e.applicant_profile_educations = new(uuid.UUID)
				*e.applicant_profile_educations = *value.S.(*uuid.UUID)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Education.
// This includes values selected through modifiers, order, etc.
func (e *Education) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryDegreeLevel queries the "degree_level" edge of the Education entity.
func (e *Education) QueryDegreeLevel() *DegreeLevelQuery {
	return NewEducationClient(e.config).QueryDegreeLevel(e)
}

// Update returns a builder for updating this Education.
// Note that you need to call Education.Unwrap() before calling this method if this Education
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Education) Update() *EducationUpdateOne {
	return NewEducationClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Education entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Education) Unwrap() *Education {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Education is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Education) String() string {
	var builder strings.Builder
	builder.WriteString("Education(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("institution=")
	builder.WriteString(e.Institution)
	builder.WriteString(", ")
	builder.WriteString("date_obtained=")
	builder.WriteString(e.DateObtained.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := e.DegreeLevelID; v != nil {
		builder.WriteString("degree_level_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(e.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(e.Comments)
	builder.WriteString(", ")
	builder.WriteString("applicant_profile_id=")
	builder.WriteString(fmt.Sprintf("%v", e.ApplicantProfileID))
	builder.WriteByte(')')
	return builder.String()
}

// Educations is a parsable slice of Education.
type Educations []*Education
