// Code generated by ent, DO NOT EDIT.

package language

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the language type in the database.
	Label = "language"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldApplicantProfileID holds the string denoting the applicant_profile_id field in the database.
	FieldApplicantProfileID = "applicant_profile_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeApplicantProfile holds the string denoting the applicant_profile edge name in mutations.
	EdgeApplicantProfile = "applicant_profile"
	// Table holds the table name of the language in the database.
	Table = "languages"
	// ApplicantProfileTable is the table that holds the applicant_profile relation/edge.
	ApplicantProfileTable = "languages"
	// ApplicantProfileInverseTable is the table name for the ApplicantProfile entity.
	// It exists in this package in order to avoid circular dependency with the "applicantprofile" package.
	ApplicantProfileInverseTable = "applicant_profiles"
	// ApplicantProfileColumn is the table column denoting the applicant_profile relation/edge.
	ApplicantProfileColumn = "applicant_profile_id"
)

// Columns holds all SQL columns for language fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLevel,
	FieldComments,
	FieldApplicantProfileID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Name defines the type for the "name" enum field.
type Name string

// Name values.
const (
	NameEspañol   Name = "Español"
	NameInglés    Name = "Inglés"
	NamePortugués Name = "Portugués"
	NameFrancés   Name = "Francés"
	NameAlemán    Name = "Alemán"
	NameItaliano  Name = "Italiano"
	NameChino     Name = "Chino"
	NameJaponés   Name = "Japonés"
	NameRuso      Name = "Ruso"
	NameÁrabe     Name = "Árabe"
	NameOtro      Name = "Otro"
)

func (n Name) String() string {
	return string(n)
}

// NameValidator is a validator for the "name" field enum values. It is called by the builders before save.
func NameValidator(n Name) error {
	switch n {
	case NameEspañol, NameInglés, NamePortugués, NameFrancés, NameAlemán, NameItaliano, NameChino, NameJaponés, NameRuso, NameÁrabe, NameOtro:
		return nil
	default:
		return fmt.Errorf("language: invalid enum value for name field: %q", n)
	}
}

// Level defines the type for the "level" enum field.
type Level string

// Level values.
const (
	LevelBásico     Level = "Básico"
	LevelIntermedio Level = "Intermedio"
	LevelAvanzado   Level = "Avanzado"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelBásico, LevelIntermedio, LevelAvanzado:
		return nil
	default:
		return fmt.Errorf("language: invalid enum value for level field: %q", l)
	}
}

// OrderOption defines the ordering options for the Language queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByApplicantProfileID orders the results by the applicant_profile_id field.
func ByApplicantProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicantProfileID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByApplicantProfileField orders the results by applicant_profile field.
func ByApplicantProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicantProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newApplicantProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicantProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicantProfileTable, ApplicantProfileColumn),
	)
}
