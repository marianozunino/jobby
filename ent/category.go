// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/category"
)

// Category is the model entity for the Category schema.
type Category struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID *uuid.UUID `json:"parent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// IsRoot holds the value of the "is_root" field.
	IsRoot bool `json:"is_root,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoryQuery when eager-loading is set.
	Edges        CategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CategoryEdges holds the relations/edges for other nodes in the graph.
type CategoryEdges struct {
	// ApplicantInterests holds the value of the applicant_interests edge.
	ApplicantInterests []*ApplicantInterest `json:"applicant_interests,omitempty"`
	// ChildCategories holds the value of the child_categories edge.
	ChildCategories []*Category `json:"child_categories,omitempty"`
	// ParentCategory holds the value of the parent_category edge.
	ParentCategory *Category `json:"parent_category,omitempty"`
	// JobOfferCategories holds the value of the job_offer_categories edge.
	JobOfferCategories []*JobOfferCategory `json:"job_offer_categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ApplicantInterestsOrErr returns the ApplicantInterests value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) ApplicantInterestsOrErr() ([]*ApplicantInterest, error) {
	if e.loadedTypes[0] {
		return e.ApplicantInterests, nil
	}
	return nil, &NotLoadedError{edge: "applicant_interests"}
}

// ChildCategoriesOrErr returns the ChildCategories value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) ChildCategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[1] {
		return e.ChildCategories, nil
	}
	return nil, &NotLoadedError{edge: "child_categories"}
}

// ParentCategoryOrErr returns the ParentCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryEdges) ParentCategoryOrErr() (*Category, error) {
	if e.loadedTypes[2] {
		if e.ParentCategory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.ParentCategory, nil
	}
	return nil, &NotLoadedError{edge: "parent_category"}
}

// JobOfferCategoriesOrErr returns the JobOfferCategories value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) JobOfferCategoriesOrErr() ([]*JobOfferCategory, error) {
	if e.loadedTypes[3] {
		return e.JobOfferCategories, nil
	}
	return nil, &NotLoadedError{edge: "job_offer_categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Category) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case category.FieldParentID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case category.FieldIsRoot:
			values[i] = new(sql.NullBool)
		case category.FieldName, category.FieldSlug:
			values[i] = new(sql.NullString)
		case category.FieldCreatedAt, category.FieldUpdatedAt, category.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case category.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Category fields.
func (c *Category) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case category.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case category.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				c.Slug = value.String
			}
		case category.FieldParentID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				c.ParentID = new(uuid.UUID)
				*c.ParentID = *value.S.(*uuid.UUID)
			}
		case category.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case category.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case category.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case category.FieldIsRoot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_root", values[i])
			} else if value.Valid {
				c.IsRoot = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Category.
// This includes values selected through modifiers, order, etc.
func (c *Category) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryApplicantInterests queries the "applicant_interests" edge of the Category entity.
func (c *Category) QueryApplicantInterests() *ApplicantInterestQuery {
	return NewCategoryClient(c.config).QueryApplicantInterests(c)
}

// QueryChildCategories queries the "child_categories" edge of the Category entity.
func (c *Category) QueryChildCategories() *CategoryQuery {
	return NewCategoryClient(c.config).QueryChildCategories(c)
}

// QueryParentCategory queries the "parent_category" edge of the Category entity.
func (c *Category) QueryParentCategory() *CategoryQuery {
	return NewCategoryClient(c.config).QueryParentCategory(c)
}

// QueryJobOfferCategories queries the "job_offer_categories" edge of the Category entity.
func (c *Category) QueryJobOfferCategories() *JobOfferCategoryQuery {
	return NewCategoryClient(c.config).QueryJobOfferCategories(c)
}

// Update returns a builder for updating this Category.
// Note that you need to call Category.Unwrap() before calling this method if this Category
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Category) Update() *CategoryUpdateOne {
	return NewCategoryClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Category entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Category) Unwrap() *Category {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Category is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Category) String() string {
	var builder strings.Builder
	builder.WriteString("Category(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(c.Slug)
	builder.WriteString(", ")
	if v := c.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_root=")
	builder.WriteString(fmt.Sprintf("%v", c.IsRoot))
	builder.WriteByte(')')
	return builder.String()
}

// Categories is a parsable slice of Category.
type Categories []*Category
