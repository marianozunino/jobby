// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/applicantprofile"
	"github.com/marianozunino/jobby/ent/user"
)

// ApplicantProfile is the model entity for the ApplicantProfile schema.
type ApplicantProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Address1 holds the value of the "address1" field.
	Address1 string `json:"address1,omitempty"`
	// Address2 holds the value of the "address2" field.
	Address2 string `json:"address2,omitempty"`
	// Cv holds the value of the "cv" field.
	Cv string `json:"cv,omitempty"`
	// InternalComments holds the value of the "internal_comments" field.
	InternalComments string `json:"internal_comments,omitempty"`
	// ReceiveEmails holds the value of the "receive_emails" field.
	ReceiveEmails bool `json:"receive_emails,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *uuid.UUID `json:"user_id,omitempty"`
	// ExtraSkills holds the value of the "extra_skills" field.
	ExtraSkills struct{} `json:"extra_skills,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicantProfileQuery when eager-loading is set.
	Edges        ApplicantProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApplicantProfileEdges holds the relations/edges for other nodes in the graph.
type ApplicantProfileEdges struct {
	// ApplicantInterests holds the value of the applicant_interests edge.
	ApplicantInterests []*ApplicantInterest `json:"applicant_interests,omitempty"`
	// ApplicantProfileSkills holds the value of the applicant_profile_skills edge.
	ApplicantProfileSkills []*ApplicantProfileSkill `json:"applicant_profile_skills,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Applications holds the value of the applications edge.
	Applications []*Application `json:"applications,omitempty"`
	// Educations holds the value of the educations edge.
	Educations []*Education `json:"educations,omitempty"`
	// Languages holds the value of the languages edge.
	Languages []*Language `json:"languages,omitempty"`
	// WorkExperiences holds the value of the work_experiences edge.
	WorkExperiences []*WorkExperience `json:"work_experiences,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// ApplicantInterestsOrErr returns the ApplicantInterests value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicantProfileEdges) ApplicantInterestsOrErr() ([]*ApplicantInterest, error) {
	if e.loadedTypes[0] {
		return e.ApplicantInterests, nil
	}
	return nil, &NotLoadedError{edge: "applicant_interests"}
}

// ApplicantProfileSkillsOrErr returns the ApplicantProfileSkills value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicantProfileEdges) ApplicantProfileSkillsOrErr() ([]*ApplicantProfileSkill, error) {
	if e.loadedTypes[1] {
		return e.ApplicantProfileSkills, nil
	}
	return nil, &NotLoadedError{edge: "applicant_profile_skills"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicantProfileEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicantProfileEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[3] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// EducationsOrErr returns the Educations value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicantProfileEdges) EducationsOrErr() ([]*Education, error) {
	if e.loadedTypes[4] {
		return e.Educations, nil
	}
	return nil, &NotLoadedError{edge: "educations"}
}

// LanguagesOrErr returns the Languages value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicantProfileEdges) LanguagesOrErr() ([]*Language, error) {
	if e.loadedTypes[5] {
		return e.Languages, nil
	}
	return nil, &NotLoadedError{edge: "languages"}
}

// WorkExperiencesOrErr returns the WorkExperiences value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicantProfileEdges) WorkExperiencesOrErr() ([]*WorkExperience, error) {
	if e.loadedTypes[6] {
		return e.WorkExperiences, nil
	}
	return nil, &NotLoadedError{edge: "work_experiences"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicantProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicantprofile.FieldUserID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case applicantprofile.FieldExtraSkills:
			values[i] = new([]byte)
		case applicantprofile.FieldReceiveEmails:
			values[i] = new(sql.NullBool)
		case applicantprofile.FieldGender, applicantprofile.FieldPhone, applicantprofile.FieldAddress1, applicantprofile.FieldAddress2, applicantprofile.FieldCv, applicantprofile.FieldInternalComments:
			values[i] = new(sql.NullString)
		case applicantprofile.FieldBirthday, applicantprofile.FieldCreatedAt, applicantprofile.FieldUpdatedAt, applicantprofile.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case applicantprofile.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicantProfile fields.
func (ap *ApplicantProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicantprofile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ap.ID = *value
			}
		case applicantprofile.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				ap.Birthday = value.Time
			}
		case applicantprofile.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				ap.Gender = value.String
			}
		case applicantprofile.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ap.Phone = value.String
			}
		case applicantprofile.FieldAddress1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address1", values[i])
			} else if value.Valid {
				ap.Address1 = value.String
			}
		case applicantprofile.FieldAddress2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address2", values[i])
			} else if value.Valid {
				ap.Address2 = value.String
			}
		case applicantprofile.FieldCv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cv", values[i])
			} else if value.Valid {
				ap.Cv = value.String
			}
		case applicantprofile.FieldInternalComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_comments", values[i])
			} else if value.Valid {
				ap.InternalComments = value.String
			}
		case applicantprofile.FieldReceiveEmails:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field receive_emails", values[i])
			} else if value.Valid {
				ap.ReceiveEmails = value.Bool
			}
		case applicantprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = value.Time
			}
		case applicantprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = value.Time
			}
		case applicantprofile.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ap.DeletedAt = value.Time
			}
		case applicantprofile.FieldUserID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ap.UserID = new(uuid.UUID)
				*ap.UserID = *value.S.(*uuid.UUID)
			}
		case applicantprofile.FieldExtraSkills:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra_skills", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ap.ExtraSkills); err != nil {
					return fmt.Errorf("unmarshal field extra_skills: %w", err)
				}
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplicantProfile.
// This includes values selected through modifiers, order, etc.
func (ap *ApplicantProfile) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// QueryApplicantInterests queries the "applicant_interests" edge of the ApplicantProfile entity.
func (ap *ApplicantProfile) QueryApplicantInterests() *ApplicantInterestQuery {
	return NewApplicantProfileClient(ap.config).QueryApplicantInterests(ap)
}

// QueryApplicantProfileSkills queries the "applicant_profile_skills" edge of the ApplicantProfile entity.
func (ap *ApplicantProfile) QueryApplicantProfileSkills() *ApplicantProfileSkillQuery {
	return NewApplicantProfileClient(ap.config).QueryApplicantProfileSkills(ap)
}

// QueryUser queries the "user" edge of the ApplicantProfile entity.
func (ap *ApplicantProfile) QueryUser() *UserQuery {
	return NewApplicantProfileClient(ap.config).QueryUser(ap)
}

// QueryApplications queries the "applications" edge of the ApplicantProfile entity.
func (ap *ApplicantProfile) QueryApplications() *ApplicationQuery {
	return NewApplicantProfileClient(ap.config).QueryApplications(ap)
}

// QueryEducations queries the "educations" edge of the ApplicantProfile entity.
func (ap *ApplicantProfile) QueryEducations() *EducationQuery {
	return NewApplicantProfileClient(ap.config).QueryEducations(ap)
}

// QueryLanguages queries the "languages" edge of the ApplicantProfile entity.
func (ap *ApplicantProfile) QueryLanguages() *LanguageQuery {
	return NewApplicantProfileClient(ap.config).QueryLanguages(ap)
}

// QueryWorkExperiences queries the "work_experiences" edge of the ApplicantProfile entity.
func (ap *ApplicantProfile) QueryWorkExperiences() *WorkExperienceQuery {
	return NewApplicantProfileClient(ap.config).QueryWorkExperiences(ap)
}

// Update returns a builder for updating this ApplicantProfile.
// Note that you need to call ApplicantProfile.Unwrap() before calling this method if this ApplicantProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *ApplicantProfile) Update() *ApplicantProfileUpdateOne {
	return NewApplicantProfileClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the ApplicantProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *ApplicantProfile) Unwrap() *ApplicantProfile {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicantProfile is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *ApplicantProfile) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicantProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("birthday=")
	builder.WriteString(ap.Birthday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(ap.Gender)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(ap.Phone)
	builder.WriteString(", ")
	builder.WriteString("address1=")
	builder.WriteString(ap.Address1)
	builder.WriteString(", ")
	builder.WriteString("address2=")
	builder.WriteString(ap.Address2)
	builder.WriteString(", ")
	builder.WriteString("cv=")
	builder.WriteString(ap.Cv)
	builder.WriteString(", ")
	builder.WriteString("internal_comments=")
	builder.WriteString(ap.InternalComments)
	builder.WriteString(", ")
	builder.WriteString("receive_emails=")
	builder.WriteString(fmt.Sprintf("%v", ap.ReceiveEmails))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ap.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ap.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("extra_skills=")
	builder.WriteString(fmt.Sprintf("%v", ap.ExtraSkills))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicantProfiles is a parsable slice of ApplicantProfile.
type ApplicantProfiles []*ApplicantProfile
