// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/application"
	"github.com/marianozunino/jobby/ent/interview"
	"github.com/marianozunino/jobby/ent/user"
)

// Interview is the model entity for the Interview schema.
type Interview struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// InterviewDate holds the value of the "interview_date" field.
	InterviewDate time.Time `json:"interview_date,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// ApplicationID holds the value of the "application_id" field.
	ApplicationID *uuid.UUID `json:"application_id,omitempty"`
	// InterviewerID holds the value of the "interviewer_id" field.
	InterviewerID uuid.UUID `json:"interviewer_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InterviewQuery when eager-loading is set.
	Edges        InterviewEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InterviewEdges holds the relations/edges for other nodes in the graph.
type InterviewEdges struct {
	// Application holds the value of the application edge.
	Application *Application `json:"application,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InterviewEdges) ApplicationOrErr() (*Application, error) {
	if e.loadedTypes[0] {
		if e.Application == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.Application, nil
	}
	return nil, &NotLoadedError{edge: "application"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InterviewEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Interview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case interview.FieldApplicationID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case interview.FieldComment, interview.FieldStatus:
			values[i] = new(sql.NullString)
		case interview.FieldInterviewDate, interview.FieldCreatedAt, interview.FieldUpdatedAt, interview.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case interview.FieldID, interview.FieldInterviewerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Interview fields.
func (i *Interview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case interview.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case interview.FieldComment:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[j])
			} else if value.Valid {
				i.Comment = value.String
			}
		case interview.FieldInterviewDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field interview_date", values[j])
			} else if value.Valid {
				i.InterviewDate = value.Time
			}
		case interview.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		case interview.FieldApplicationID:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[j])
			} else if value.Valid {
				i.ApplicationID = new(uuid.UUID)
				*i.ApplicationID = *value.S.(*uuid.UUID)
			}
		case interview.FieldInterviewerID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field interviewer_id", values[j])
			} else if value != nil {
				i.InterviewerID = *value
			}
		case interview.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case interview.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case interview.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[j])
			} else if value.Valid {
				i.DeletedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Interview.
// This includes values selected through modifiers, order, etc.
func (i *Interview) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the Interview entity.
func (i *Interview) QueryApplication() *ApplicationQuery {
	return NewInterviewClient(i.config).QueryApplication(i)
}

// QueryUser queries the "user" edge of the Interview entity.
func (i *Interview) QueryUser() *UserQuery {
	return NewInterviewClient(i.config).QueryUser(i)
}

// Update returns a builder for updating this Interview.
// Note that you need to call Interview.Unwrap() before calling this method if this Interview
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Interview) Update() *InterviewUpdateOne {
	return NewInterviewClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Interview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Interview) Unwrap() *Interview {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Interview is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Interview) String() string {
	var builder strings.Builder
	builder.WriteString("Interview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("comment=")
	builder.WriteString(i.Comment)
	builder.WriteString(", ")
	builder.WriteString("interview_date=")
	builder.WriteString(i.InterviewDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(i.Status)
	builder.WriteString(", ")
	if v := i.ApplicationID; v != nil {
		builder.WriteString("application_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("interviewer_id=")
	builder.WriteString(fmt.Sprintf("%v", i.InterviewerID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(i.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Interviews is a parsable slice of Interview.
type Interviews []*Interview
