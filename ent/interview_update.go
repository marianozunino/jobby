// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/application"
	"github.com/marianozunino/jobby/ent/interview"
	"github.com/marianozunino/jobby/ent/predicate"
	"github.com/marianozunino/jobby/ent/user"
)

// InterviewUpdate is the builder for updating Interview entities.
type InterviewUpdate struct {
	config
	hooks    []Hook
	mutation *InterviewMutation
}

// Where appends a list predicates to the InterviewUpdate builder.
func (iu *InterviewUpdate) Where(ps ...predicate.Interview) *InterviewUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetComment sets the "comment" field.
func (iu *InterviewUpdate) SetComment(s string) *InterviewUpdate {
	iu.mutation.SetComment(s)
	return iu
}

// SetInterviewDate sets the "interview_date" field.
func (iu *InterviewUpdate) SetInterviewDate(t time.Time) *InterviewUpdate {
	iu.mutation.SetInterviewDate(t)
	return iu
}

// SetStatus sets the "status" field.
func (iu *InterviewUpdate) SetStatus(s string) *InterviewUpdate {
	iu.mutation.SetStatus(s)
	return iu
}

// SetApplicationID sets the "application_id" field.
func (iu *InterviewUpdate) SetApplicationID(u uuid.UUID) *InterviewUpdate {
	iu.mutation.SetApplicationID(u)
	return iu
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableApplicationID(u *uuid.UUID) *InterviewUpdate {
	if u != nil {
		iu.SetApplicationID(*u)
	}
	return iu
}

// ClearApplicationID clears the value of the "application_id" field.
func (iu *InterviewUpdate) ClearApplicationID() *InterviewUpdate {
	iu.mutation.ClearApplicationID()
	return iu
}

// SetInterviewerID sets the "interviewer_id" field.
func (iu *InterviewUpdate) SetInterviewerID(u uuid.UUID) *InterviewUpdate {
	iu.mutation.SetInterviewerID(u)
	return iu
}

// SetNillableInterviewerID sets the "interviewer_id" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableInterviewerID(u *uuid.UUID) *InterviewUpdate {
	if u != nil {
		iu.SetInterviewerID(*u)
	}
	return iu
}

// ClearInterviewerID clears the value of the "interviewer_id" field.
func (iu *InterviewUpdate) ClearInterviewerID() *InterviewUpdate {
	iu.mutation.ClearInterviewerID()
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *InterviewUpdate) SetCreatedAt(t time.Time) *InterviewUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InterviewUpdate) SetUpdatedAt(t time.Time) *InterviewUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *InterviewUpdate) SetDeletedAt(t time.Time) *InterviewUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableDeletedAt(t *time.Time) *InterviewUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *InterviewUpdate) ClearDeletedAt() *InterviewUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetApplication sets the "application" edge to the Application entity.
func (iu *InterviewUpdate) SetApplication(a *Application) *InterviewUpdate {
	return iu.SetApplicationID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *InterviewUpdate) SetUserID(id uuid.UUID) *InterviewUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iu *InterviewUpdate) SetNillableUserID(id *uuid.UUID) *InterviewUpdate {
	if id != nil {
		iu = iu.SetUserID(*id)
	}
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *InterviewUpdate) SetUser(u *User) *InterviewUpdate {
	return iu.SetUserID(u.ID)
}

// Mutation returns the InterviewMutation object of the builder.
func (iu *InterviewUpdate) Mutation() *InterviewMutation {
	return iu.mutation
}

// ClearApplication clears the "application" edge to the Application entity.
func (iu *InterviewUpdate) ClearApplication() *InterviewUpdate {
	iu.mutation.ClearApplication()
	return iu
}

// ClearUser clears the "user" edge to the User entity.
func (iu *InterviewUpdate) ClearUser() *InterviewUpdate {
	iu.mutation.ClearUser()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InterviewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InterviewUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InterviewUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InterviewUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InterviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(interview.Table, interview.Columns, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Comment(); ok {
		_spec.SetField(interview.FieldComment, field.TypeString, value)
	}
	if value, ok := iu.mutation.InterviewDate(); ok {
		_spec.SetField(interview.FieldInterviewDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(interview.FieldStatus, field.TypeString, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(interview.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(interview.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(interview.FieldDeletedAt, field.TypeTime)
	}
	if iu.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.ApplicationTable,
			Columns: []string{interview.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.ApplicationTable,
			Columns: []string{interview.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.UserTable,
			Columns: []string{interview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.UserTable,
			Columns: []string{interview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InterviewUpdateOne is the builder for updating a single Interview entity.
type InterviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InterviewMutation
}

// SetComment sets the "comment" field.
func (iuo *InterviewUpdateOne) SetComment(s string) *InterviewUpdateOne {
	iuo.mutation.SetComment(s)
	return iuo
}

// SetInterviewDate sets the "interview_date" field.
func (iuo *InterviewUpdateOne) SetInterviewDate(t time.Time) *InterviewUpdateOne {
	iuo.mutation.SetInterviewDate(t)
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InterviewUpdateOne) SetStatus(s string) *InterviewUpdateOne {
	iuo.mutation.SetStatus(s)
	return iuo
}

// SetApplicationID sets the "application_id" field.
func (iuo *InterviewUpdateOne) SetApplicationID(u uuid.UUID) *InterviewUpdateOne {
	iuo.mutation.SetApplicationID(u)
	return iuo
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableApplicationID(u *uuid.UUID) *InterviewUpdateOne {
	if u != nil {
		iuo.SetApplicationID(*u)
	}
	return iuo
}

// ClearApplicationID clears the value of the "application_id" field.
func (iuo *InterviewUpdateOne) ClearApplicationID() *InterviewUpdateOne {
	iuo.mutation.ClearApplicationID()
	return iuo
}

// SetInterviewerID sets the "interviewer_id" field.
func (iuo *InterviewUpdateOne) SetInterviewerID(u uuid.UUID) *InterviewUpdateOne {
	iuo.mutation.SetInterviewerID(u)
	return iuo
}

// SetNillableInterviewerID sets the "interviewer_id" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableInterviewerID(u *uuid.UUID) *InterviewUpdateOne {
	if u != nil {
		iuo.SetInterviewerID(*u)
	}
	return iuo
}

// ClearInterviewerID clears the value of the "interviewer_id" field.
func (iuo *InterviewUpdateOne) ClearInterviewerID() *InterviewUpdateOne {
	iuo.mutation.ClearInterviewerID()
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *InterviewUpdateOne) SetCreatedAt(t time.Time) *InterviewUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InterviewUpdateOne) SetUpdatedAt(t time.Time) *InterviewUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *InterviewUpdateOne) SetDeletedAt(t time.Time) *InterviewUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableDeletedAt(t *time.Time) *InterviewUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *InterviewUpdateOne) ClearDeletedAt() *InterviewUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetApplication sets the "application" edge to the Application entity.
func (iuo *InterviewUpdateOne) SetApplication(a *Application) *InterviewUpdateOne {
	return iuo.SetApplicationID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *InterviewUpdateOne) SetUserID(id uuid.UUID) *InterviewUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableUserID(id *uuid.UUID) *InterviewUpdateOne {
	if id != nil {
		iuo = iuo.SetUserID(*id)
	}
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *InterviewUpdateOne) SetUser(u *User) *InterviewUpdateOne {
	return iuo.SetUserID(u.ID)
}

// Mutation returns the InterviewMutation object of the builder.
func (iuo *InterviewUpdateOne) Mutation() *InterviewMutation {
	return iuo.mutation
}

// ClearApplication clears the "application" edge to the Application entity.
func (iuo *InterviewUpdateOne) ClearApplication() *InterviewUpdateOne {
	iuo.mutation.ClearApplication()
	return iuo
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *InterviewUpdateOne) ClearUser() *InterviewUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// Where appends a list predicates to the InterviewUpdate builder.
func (iuo *InterviewUpdateOne) Where(ps ...predicate.Interview) *InterviewUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InterviewUpdateOne) Select(field string, fields ...string) *InterviewUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Interview entity.
func (iuo *InterviewUpdateOne) Save(ctx context.Context) (*Interview, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InterviewUpdateOne) SaveX(ctx context.Context) *Interview {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InterviewUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InterviewUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InterviewUpdateOne) sqlSave(ctx context.Context) (_node *Interview, err error) {
	_spec := sqlgraph.NewUpdateSpec(interview.Table, interview.Columns, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Interview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interview.FieldID)
		for _, f := range fields {
			if !interview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != interview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Comment(); ok {
		_spec.SetField(interview.FieldComment, field.TypeString, value)
	}
	if value, ok := iuo.mutation.InterviewDate(); ok {
		_spec.SetField(interview.FieldInterviewDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(interview.FieldStatus, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(interview.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(interview.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(interview.FieldDeletedAt, field.TypeTime)
	}
	if iuo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.ApplicationTable,
			Columns: []string{interview.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.ApplicationTable,
			Columns: []string{interview.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.UserTable,
			Columns: []string{interview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.UserTable,
			Columns: []string{interview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Interview{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
