// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/applicantprofile"
	"github.com/marianozunino/jobby/ent/workexperience"
)

// WorkExperience is the model entity for the WorkExperience schema.
type WorkExperience struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// ApplicantProfileID holds the value of the "applicant_profile_id" field.
	ApplicantProfileID *uuid.UUID `json:"applicant_profile_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// InternalComments holds the value of the "internal_comments" field.
	InternalComments string `json:"internal_comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkExperienceQuery when eager-loading is set.
	Edges        WorkExperienceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkExperienceEdges holds the relations/edges for other nodes in the graph.
type WorkExperienceEdges struct {
	// ApplicantProfile holds the value of the applicant_profile edge.
	ApplicantProfile *ApplicantProfile `json:"applicant_profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplicantProfileOrErr returns the ApplicantProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkExperienceEdges) ApplicantProfileOrErr() (*ApplicantProfile, error) {
	if e.loadedTypes[0] {
		if e.ApplicantProfile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: applicantprofile.Label}
		}
		return e.ApplicantProfile, nil
	}
	return nil, &NotLoadedError{edge: "applicant_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkExperience) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workexperience.FieldApplicantProfileID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workexperience.FieldCompany, workexperience.FieldPosition, workexperience.FieldDescription, workexperience.FieldInternalComments:
			values[i] = new(sql.NullString)
		case workexperience.FieldStartDate, workexperience.FieldEndDate, workexperience.FieldCreatedAt, workexperience.FieldUpdatedAt, workexperience.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case workexperience.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkExperience fields.
func (we *WorkExperience) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workexperience.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				we.ID = *value
			}
		case workexperience.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				we.Company = value.String
			}
		case workexperience.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				we.Position = value.String
			}
		case workexperience.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				we.Description = value.String
			}
		case workexperience.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				we.StartDate = value.Time
			}
		case workexperience.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				we.EndDate = value.Time
			}
		case workexperience.FieldApplicantProfileID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field applicant_profile_id", values[i])
			} else if value.Valid {
				we.ApplicantProfileID = new(uuid.UUID)
				*we.ApplicantProfileID = *value.S.(*uuid.UUID)
			}
		case workexperience.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				we.CreatedAt = value.Time
			}
		case workexperience.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				we.UpdatedAt = value.Time
			}
		case workexperience.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				we.DeletedAt = value.Time
			}
		case workexperience.FieldInternalComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_comments", values[i])
			} else if value.Valid {
				we.InternalComments = value.String
			}
		default:
			we.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkExperience.
// This includes values selected through modifiers, order, etc.
func (we *WorkExperience) Value(name string) (ent.Value, error) {
	return we.selectValues.Get(name)
}

// QueryApplicantProfile queries the "applicant_profile" edge of the WorkExperience entity.
func (we *WorkExperience) QueryApplicantProfile() *ApplicantProfileQuery {
	return NewWorkExperienceClient(we.config).QueryApplicantProfile(we)
}

// Update returns a builder for updating this WorkExperience.
// Note that you need to call WorkExperience.Unwrap() before calling this method if this WorkExperience
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkExperience) Update() *WorkExperienceUpdateOne {
	return NewWorkExperienceClient(we.config).UpdateOne(we)
}

// Unwrap unwraps the WorkExperience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkExperience) Unwrap() *WorkExperience {
	_tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkExperience is not a transactional entity")
	}
	we.config.driver = _tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkExperience) String() string {
	var builder strings.Builder
	builder.WriteString("WorkExperience(")
	builder.WriteString(fmt.Sprintf("id=%v, ", we.ID))
	builder.WriteString("company=")
	builder.WriteString(we.Company)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(we.Position)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(we.Description)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(we.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(we.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := we.ApplicantProfileID; v != nil {
		builder.WriteString("applicant_profile_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(we.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(we.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(we.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("internal_comments=")
	builder.WriteString(we.InternalComments)
	builder.WriteByte(')')
	return builder.String()
}

// WorkExperiences is a parsable slice of WorkExperience.
type WorkExperiences []*WorkExperience
