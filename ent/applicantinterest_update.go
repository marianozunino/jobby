// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/applicantinterest"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofile"
	"github.com/marianozunino/cc-backend-go/ent/category"
	"github.com/marianozunino/cc-backend-go/ent/predicate"
)

// ApplicantInterestUpdate is the builder for updating ApplicantInterest entities.
type ApplicantInterestUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicantInterestMutation
}

// Where appends a list predicates to the ApplicantInterestUpdate builder.
func (aiu *ApplicantInterestUpdate) Where(ps ...predicate.ApplicantInterest) *ApplicantInterestUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetCategoryID sets the "category_id" field.
func (aiu *ApplicantInterestUpdate) SetCategoryID(u uuid.UUID) *ApplicantInterestUpdate {
	aiu.mutation.SetCategoryID(u)
	return aiu
}

// SetCreatedAt sets the "created_at" field.
func (aiu *ApplicantInterestUpdate) SetCreatedAt(t time.Time) *ApplicantInterestUpdate {
	aiu.mutation.SetCreatedAt(t)
	return aiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiu *ApplicantInterestUpdate) SetNillableCreatedAt(t *time.Time) *ApplicantInterestUpdate {
	if t != nil {
		aiu.SetCreatedAt(*t)
	}
	return aiu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (aiu *ApplicantInterestUpdate) ClearCreatedAt() *ApplicantInterestUpdate {
	aiu.mutation.ClearCreatedAt()
	return aiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aiu *ApplicantInterestUpdate) SetUpdatedAt(t time.Time) *ApplicantInterestUpdate {
	aiu.mutation.SetUpdatedAt(t)
	return aiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aiu *ApplicantInterestUpdate) SetNillableUpdatedAt(t *time.Time) *ApplicantInterestUpdate {
	if t != nil {
		aiu.SetUpdatedAt(*t)
	}
	return aiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aiu *ApplicantInterestUpdate) ClearUpdatedAt() *ApplicantInterestUpdate {
	aiu.mutation.ClearUpdatedAt()
	return aiu
}

// SetDeletedAt sets the "deleted_at" field.
func (aiu *ApplicantInterestUpdate) SetDeletedAt(t time.Time) *ApplicantInterestUpdate {
	aiu.mutation.SetDeletedAt(t)
	return aiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aiu *ApplicantInterestUpdate) SetNillableDeletedAt(t *time.Time) *ApplicantInterestUpdate {
	if t != nil {
		aiu.SetDeletedAt(*t)
	}
	return aiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aiu *ApplicantInterestUpdate) ClearDeletedAt() *ApplicantInterestUpdate {
	aiu.mutation.ClearDeletedAt()
	return aiu
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (aiu *ApplicantInterestUpdate) SetApplicantProfileID(u uuid.UUID) *ApplicantInterestUpdate {
	aiu.mutation.SetApplicantProfileID(u)
	return aiu
}

// SetApplicantProfile sets the "applicant_profile" edge to the ApplicantProfile entity.
func (aiu *ApplicantInterestUpdate) SetApplicantProfile(a *ApplicantProfile) *ApplicantInterestUpdate {
	return aiu.SetApplicantProfileID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (aiu *ApplicantInterestUpdate) SetCategory(c *Category) *ApplicantInterestUpdate {
	return aiu.SetCategoryID(c.ID)
}

// Mutation returns the ApplicantInterestMutation object of the builder.
func (aiu *ApplicantInterestUpdate) Mutation() *ApplicantInterestMutation {
	return aiu.mutation
}

// ClearApplicantProfile clears the "applicant_profile" edge to the ApplicantProfile entity.
func (aiu *ApplicantInterestUpdate) ClearApplicantProfile() *ApplicantInterestUpdate {
	aiu.mutation.ClearApplicantProfile()
	return aiu
}

// ClearCategory clears the "category" edge to the Category entity.
func (aiu *ApplicantInterestUpdate) ClearCategory() *ApplicantInterestUpdate {
	aiu.mutation.ClearCategory()
	return aiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *ApplicantInterestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *ApplicantInterestUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *ApplicantInterestUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *ApplicantInterestUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *ApplicantInterestUpdate) check() error {
	if _, ok := aiu.mutation.ApplicantProfileID(); aiu.mutation.ApplicantProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicantInterest.applicant_profile"`)
	}
	if _, ok := aiu.mutation.CategoryID(); aiu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicantInterest.category"`)
	}
	return nil
}

func (aiu *ApplicantInterestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicantinterest.Table, applicantinterest.Columns, sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.CreatedAt(); ok {
		_spec.SetField(applicantinterest.FieldCreatedAt, field.TypeTime, value)
	}
	if aiu.mutation.CreatedAtCleared() {
		_spec.ClearField(applicantinterest.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := aiu.mutation.UpdatedAt(); ok {
		_spec.SetField(applicantinterest.FieldUpdatedAt, field.TypeTime, value)
	}
	if aiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(applicantinterest.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := aiu.mutation.DeletedAt(); ok {
		_spec.SetField(applicantinterest.FieldDeletedAt, field.TypeTime, value)
	}
	if aiu.mutation.DeletedAtCleared() {
		_spec.ClearField(applicantinterest.FieldDeletedAt, field.TypeTime)
	}
	if aiu.mutation.ApplicantProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.ApplicantProfileTable,
			Columns: []string{applicantinterest.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.ApplicantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.ApplicantProfileTable,
			Columns: []string{applicantinterest.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.CategoryTable,
			Columns: []string{applicantinterest.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.CategoryTable,
			Columns: []string{applicantinterest.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicantinterest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// ApplicantInterestUpdateOne is the builder for updating a single ApplicantInterest entity.
type ApplicantInterestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicantInterestMutation
}

// SetCategoryID sets the "category_id" field.
func (aiuo *ApplicantInterestUpdateOne) SetCategoryID(u uuid.UUID) *ApplicantInterestUpdateOne {
	aiuo.mutation.SetCategoryID(u)
	return aiuo
}

// SetCreatedAt sets the "created_at" field.
func (aiuo *ApplicantInterestUpdateOne) SetCreatedAt(t time.Time) *ApplicantInterestUpdateOne {
	aiuo.mutation.SetCreatedAt(t)
	return aiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiuo *ApplicantInterestUpdateOne) SetNillableCreatedAt(t *time.Time) *ApplicantInterestUpdateOne {
	if t != nil {
		aiuo.SetCreatedAt(*t)
	}
	return aiuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (aiuo *ApplicantInterestUpdateOne) ClearCreatedAt() *ApplicantInterestUpdateOne {
	aiuo.mutation.ClearCreatedAt()
	return aiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aiuo *ApplicantInterestUpdateOne) SetUpdatedAt(t time.Time) *ApplicantInterestUpdateOne {
	aiuo.mutation.SetUpdatedAt(t)
	return aiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aiuo *ApplicantInterestUpdateOne) SetNillableUpdatedAt(t *time.Time) *ApplicantInterestUpdateOne {
	if t != nil {
		aiuo.SetUpdatedAt(*t)
	}
	return aiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aiuo *ApplicantInterestUpdateOne) ClearUpdatedAt() *ApplicantInterestUpdateOne {
	aiuo.mutation.ClearUpdatedAt()
	return aiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aiuo *ApplicantInterestUpdateOne) SetDeletedAt(t time.Time) *ApplicantInterestUpdateOne {
	aiuo.mutation.SetDeletedAt(t)
	return aiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aiuo *ApplicantInterestUpdateOne) SetNillableDeletedAt(t *time.Time) *ApplicantInterestUpdateOne {
	if t != nil {
		aiuo.SetDeletedAt(*t)
	}
	return aiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aiuo *ApplicantInterestUpdateOne) ClearDeletedAt() *ApplicantInterestUpdateOne {
	aiuo.mutation.ClearDeletedAt()
	return aiuo
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (aiuo *ApplicantInterestUpdateOne) SetApplicantProfileID(u uuid.UUID) *ApplicantInterestUpdateOne {
	aiuo.mutation.SetApplicantProfileID(u)
	return aiuo
}

// SetApplicantProfile sets the "applicant_profile" edge to the ApplicantProfile entity.
func (aiuo *ApplicantInterestUpdateOne) SetApplicantProfile(a *ApplicantProfile) *ApplicantInterestUpdateOne {
	return aiuo.SetApplicantProfileID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (aiuo *ApplicantInterestUpdateOne) SetCategory(c *Category) *ApplicantInterestUpdateOne {
	return aiuo.SetCategoryID(c.ID)
}

// Mutation returns the ApplicantInterestMutation object of the builder.
func (aiuo *ApplicantInterestUpdateOne) Mutation() *ApplicantInterestMutation {
	return aiuo.mutation
}

// ClearApplicantProfile clears the "applicant_profile" edge to the ApplicantProfile entity.
func (aiuo *ApplicantInterestUpdateOne) ClearApplicantProfile() *ApplicantInterestUpdateOne {
	aiuo.mutation.ClearApplicantProfile()
	return aiuo
}

// ClearCategory clears the "category" edge to the Category entity.
func (aiuo *ApplicantInterestUpdateOne) ClearCategory() *ApplicantInterestUpdateOne {
	aiuo.mutation.ClearCategory()
	return aiuo
}

// Where appends a list predicates to the ApplicantInterestUpdate builder.
func (aiuo *ApplicantInterestUpdateOne) Where(ps ...predicate.ApplicantInterest) *ApplicantInterestUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *ApplicantInterestUpdateOne) Select(field string, fields ...string) *ApplicantInterestUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated ApplicantInterest entity.
func (aiuo *ApplicantInterestUpdateOne) Save(ctx context.Context) (*ApplicantInterest, error) {
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *ApplicantInterestUpdateOne) SaveX(ctx context.Context) *ApplicantInterest {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *ApplicantInterestUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *ApplicantInterestUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *ApplicantInterestUpdateOne) check() error {
	if _, ok := aiuo.mutation.ApplicantProfileID(); aiuo.mutation.ApplicantProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicantInterest.applicant_profile"`)
	}
	if _, ok := aiuo.mutation.CategoryID(); aiuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicantInterest.category"`)
	}
	return nil
}

func (aiuo *ApplicantInterestUpdateOne) sqlSave(ctx context.Context) (_node *ApplicantInterest, err error) {
	if err := aiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicantinterest.Table, applicantinterest.Columns, sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplicantInterest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicantinterest.FieldID)
		for _, f := range fields {
			if !applicantinterest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicantinterest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.CreatedAt(); ok {
		_spec.SetField(applicantinterest.FieldCreatedAt, field.TypeTime, value)
	}
	if aiuo.mutation.CreatedAtCleared() {
		_spec.ClearField(applicantinterest.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := aiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(applicantinterest.FieldUpdatedAt, field.TypeTime, value)
	}
	if aiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(applicantinterest.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := aiuo.mutation.DeletedAt(); ok {
		_spec.SetField(applicantinterest.FieldDeletedAt, field.TypeTime, value)
	}
	if aiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(applicantinterest.FieldDeletedAt, field.TypeTime)
	}
	if aiuo.mutation.ApplicantProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.ApplicantProfileTable,
			Columns: []string{applicantinterest.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.ApplicantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.ApplicantProfileTable,
			Columns: []string{applicantinterest.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.CategoryTable,
			Columns: []string{applicantinterest.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantinterest.CategoryTable,
			Columns: []string{applicantinterest.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicantInterest{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicantinterest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
