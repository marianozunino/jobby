// Code generated by ent, DO NOT EDIT.

package education

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldTitle, v))
}

// Institution applies equality check predicate on the "institution" field. It's identical to InstitutionEQ.
func Institution(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldInstitution, v))
}

// DateObtained applies equality check predicate on the "date_obtained" field. It's identical to DateObtainedEQ.
func DateObtained(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDateObtained, v))
}

// DegreeLevelID applies equality check predicate on the "degree_level_id" field. It's identical to DegreeLevelIDEQ.
func DegreeLevelID(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegreeLevelID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDeletedAt, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldComments, v))
}

// ApplicantProfileID applies equality check predicate on the "applicant_profile_id" field. It's identical to ApplicantProfileIDEQ.
func ApplicantProfileID(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldApplicantProfileID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldTitle, v))
}

// InstitutionEQ applies the EQ predicate on the "institution" field.
func InstitutionEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldInstitution, v))
}

// InstitutionNEQ applies the NEQ predicate on the "institution" field.
func InstitutionNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldInstitution, v))
}

// InstitutionIn applies the In predicate on the "institution" field.
func InstitutionIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldInstitution, vs...))
}

// InstitutionNotIn applies the NotIn predicate on the "institution" field.
func InstitutionNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldInstitution, vs...))
}

// InstitutionGT applies the GT predicate on the "institution" field.
func InstitutionGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldInstitution, v))
}

// InstitutionGTE applies the GTE predicate on the "institution" field.
func InstitutionGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldInstitution, v))
}

// InstitutionLT applies the LT predicate on the "institution" field.
func InstitutionLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldInstitution, v))
}

// InstitutionLTE applies the LTE predicate on the "institution" field.
func InstitutionLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldInstitution, v))
}

// InstitutionContains applies the Contains predicate on the "institution" field.
func InstitutionContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldInstitution, v))
}

// InstitutionHasPrefix applies the HasPrefix predicate on the "institution" field.
func InstitutionHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldInstitution, v))
}

// InstitutionHasSuffix applies the HasSuffix predicate on the "institution" field.
func InstitutionHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldInstitution, v))
}

// InstitutionIsNil applies the IsNil predicate on the "institution" field.
func InstitutionIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldInstitution))
}

// InstitutionNotNil applies the NotNil predicate on the "institution" field.
func InstitutionNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldInstitution))
}

// InstitutionEqualFold applies the EqualFold predicate on the "institution" field.
func InstitutionEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldInstitution, v))
}

// InstitutionContainsFold applies the ContainsFold predicate on the "institution" field.
func InstitutionContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldInstitution, v))
}

// DateObtainedEQ applies the EQ predicate on the "date_obtained" field.
func DateObtainedEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDateObtained, v))
}

// DateObtainedNEQ applies the NEQ predicate on the "date_obtained" field.
func DateObtainedNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDateObtained, v))
}

// DateObtainedIn applies the In predicate on the "date_obtained" field.
func DateObtainedIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDateObtained, vs...))
}

// DateObtainedNotIn applies the NotIn predicate on the "date_obtained" field.
func DateObtainedNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDateObtained, vs...))
}

// DateObtainedGT applies the GT predicate on the "date_obtained" field.
func DateObtainedGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldDateObtained, v))
}

// DateObtainedGTE applies the GTE predicate on the "date_obtained" field.
func DateObtainedGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldDateObtained, v))
}

// DateObtainedLT applies the LT predicate on the "date_obtained" field.
func DateObtainedLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldDateObtained, v))
}

// DateObtainedLTE applies the LTE predicate on the "date_obtained" field.
func DateObtainedLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldDateObtained, v))
}

// DateObtainedIsNil applies the IsNil predicate on the "date_obtained" field.
func DateObtainedIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldDateObtained))
}

// DateObtainedNotNil applies the NotNil predicate on the "date_obtained" field.
func DateObtainedNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldDateObtained))
}

// DegreeLevelIDEQ applies the EQ predicate on the "degree_level_id" field.
func DegreeLevelIDEQ(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegreeLevelID, v))
}

// DegreeLevelIDNEQ applies the NEQ predicate on the "degree_level_id" field.
func DegreeLevelIDNEQ(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDegreeLevelID, v))
}

// DegreeLevelIDIn applies the In predicate on the "degree_level_id" field.
func DegreeLevelIDIn(vs ...uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDegreeLevelID, vs...))
}

// DegreeLevelIDNotIn applies the NotIn predicate on the "degree_level_id" field.
func DegreeLevelIDNotIn(vs ...uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDegreeLevelID, vs...))
}

// DegreeLevelIDIsNil applies the IsNil predicate on the "degree_level_id" field.
func DegreeLevelIDIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldDegreeLevelID))
}

// DegreeLevelIDNotNil applies the NotNil predicate on the "degree_level_id" field.
func DegreeLevelIDNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldDegreeLevelID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldDeletedAt))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldComments, v))
}

// ApplicantProfileIDEQ applies the EQ predicate on the "applicant_profile_id" field.
func ApplicantProfileIDEQ(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldApplicantProfileID, v))
}

// ApplicantProfileIDNEQ applies the NEQ predicate on the "applicant_profile_id" field.
func ApplicantProfileIDNEQ(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldApplicantProfileID, v))
}

// ApplicantProfileIDIn applies the In predicate on the "applicant_profile_id" field.
func ApplicantProfileIDIn(vs ...uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldApplicantProfileID, vs...))
}

// ApplicantProfileIDNotIn applies the NotIn predicate on the "applicant_profile_id" field.
func ApplicantProfileIDNotIn(vs ...uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldApplicantProfileID, vs...))
}

// ApplicantProfileIDGT applies the GT predicate on the "applicant_profile_id" field.
func ApplicantProfileIDGT(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldApplicantProfileID, v))
}

// ApplicantProfileIDGTE applies the GTE predicate on the "applicant_profile_id" field.
func ApplicantProfileIDGTE(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldApplicantProfileID, v))
}

// ApplicantProfileIDLT applies the LT predicate on the "applicant_profile_id" field.
func ApplicantProfileIDLT(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldApplicantProfileID, v))
}

// ApplicantProfileIDLTE applies the LTE predicate on the "applicant_profile_id" field.
func ApplicantProfileIDLTE(v uuid.UUID) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldApplicantProfileID, v))
}

// ApplicantProfileIDIsNil applies the IsNil predicate on the "applicant_profile_id" field.
func ApplicantProfileIDIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldApplicantProfileID))
}

// ApplicantProfileIDNotNil applies the NotNil predicate on the "applicant_profile_id" field.
func ApplicantProfileIDNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldApplicantProfileID))
}

// HasDegreeLevel applies the HasEdge predicate on the "degree_level" edge.
func HasDegreeLevel() predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DegreeLevelTable, DegreeLevelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDegreeLevelWith applies the HasEdge predicate on the "degree_level" edge with a given conditions (other predicates).
func HasDegreeLevelWith(preds ...predicate.DegreeLevel) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		step := newDegreeLevelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Education) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		p(s.Not())
	})
}
