// Code generated by ent, DO NOT EDIT.

package education

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the education type in the database.
	Label = "education"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldInstitution holds the string denoting the institution field in the database.
	FieldInstitution = "institution"
	// FieldDateObtained holds the string denoting the date_obtained field in the database.
	FieldDateObtained = "date_obtained"
	// FieldDegreeLevelID holds the string denoting the degree_level_id field in the database.
	FieldDegreeLevelID = "degree_level_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldApplicantProfileID holds the string denoting the applicant_profile_id field in the database.
	FieldApplicantProfileID = "applicant_profile_id"
	// EdgeDegreeLevel holds the string denoting the degree_level edge name in mutations.
	EdgeDegreeLevel = "degree_level"
	// Table holds the table name of the education in the database.
	Table = "education"
	// DegreeLevelTable is the table that holds the degree_level relation/edge.
	DegreeLevelTable = "education"
	// DegreeLevelInverseTable is the table name for the DegreeLevel entity.
	// It exists in this package in order to avoid circular dependency with the "degreelevel" package.
	DegreeLevelInverseTable = "degree_levels"
	// DegreeLevelColumn is the table column denoting the degree_level relation/edge.
	DegreeLevelColumn = "degree_level_id"
)

// Columns holds all SQL columns for education fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldInstitution,
	FieldDateObtained,
	FieldDegreeLevelID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldComments,
	FieldApplicantProfileID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "education"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"applicant_profile_educations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Education queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByInstitution orders the results by the institution field.
func ByInstitution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstitution, opts...).ToFunc()
}

// ByDateObtained orders the results by the date_obtained field.
func ByDateObtained(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateObtained, opts...).ToFunc()
}

// ByDegreeLevelID orders the results by the degree_level_id field.
func ByDegreeLevelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDegreeLevelID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByApplicantProfileID orders the results by the applicant_profile_id field.
func ByApplicantProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicantProfileID, opts...).ToFunc()
}

// ByDegreeLevelField orders the results by degree_level field.
func ByDegreeLevelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDegreeLevelStep(), sql.OrderByField(field, opts...))
	}
}
func newDegreeLevelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DegreeLevelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DegreeLevelTable, DegreeLevelColumn),
	)
}
