// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofile"
	"github.com/marianozunino/cc-backend-go/ent/language"
)

// Language is the model entity for the Language schema.
type Language struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name language.Name `json:"name,omitempty"`
	// Level holds the value of the "level" field.
	Level language.Level `json:"level,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// ApplicantProfileID holds the value of the "applicant_profile_id" field.
	ApplicantProfileID *uuid.UUID `json:"applicant_profile_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LanguageQuery when eager-loading is set.
	Edges        LanguageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LanguageEdges holds the relations/edges for other nodes in the graph.
type LanguageEdges struct {
	// ApplicantProfile holds the value of the applicant_profile edge.
	ApplicantProfile *ApplicantProfile `json:"applicant_profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplicantProfileOrErr returns the ApplicantProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LanguageEdges) ApplicantProfileOrErr() (*ApplicantProfile, error) {
	if e.loadedTypes[0] {
		if e.ApplicantProfile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: applicantprofile.Label}
		}
		return e.ApplicantProfile, nil
	}
	return nil, &NotLoadedError{edge: "applicant_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Language) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case language.FieldApplicantProfileID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case language.FieldID:
			values[i] = new(sql.NullInt64)
		case language.FieldName, language.FieldLevel, language.FieldComments:
			values[i] = new(sql.NullString)
		case language.FieldCreatedAt, language.FieldUpdatedAt, language.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Language fields.
func (l *Language) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case language.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = uint(value.Int64)
		case language.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = language.Name(value.String)
			}
		case language.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				l.Level = language.Level(value.String)
			}
		case language.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				l.Comments = value.String
			}
		case language.FieldApplicantProfileID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field applicant_profile_id", values[i])
			} else if value.Valid {
				l.ApplicantProfileID = new(uuid.UUID)
				*l.ApplicantProfileID = *value.S.(*uuid.UUID)
			}
		case language.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case language.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case language.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = value.Time
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Language.
// This includes values selected through modifiers, order, etc.
func (l *Language) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryApplicantProfile queries the "applicant_profile" edge of the Language entity.
func (l *Language) QueryApplicantProfile() *ApplicantProfileQuery {
	return NewLanguageClient(l.config).QueryApplicantProfile(l)
}

// Update returns a builder for updating this Language.
// Note that you need to call Language.Unwrap() before calling this method if this Language
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Language) Update() *LanguageUpdateOne {
	return NewLanguageClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Language entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Language) Unwrap() *Language {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Language is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Language) String() string {
	var builder strings.Builder
	builder.WriteString("Language(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", l.Name))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", l.Level))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(l.Comments)
	builder.WriteString(", ")
	if v := l.ApplicantProfileID; v != nil {
		builder.WriteString("applicant_profile_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(l.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Languages is a parsable slice of Language.
type Languages []*Language
