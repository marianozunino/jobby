// Code generated by ent, DO NOT EDIT.

package applicantprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldID, id))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldBirthday, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldGender, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldPhone, v))
}

// Address1 applies equality check predicate on the "address1" field. It's identical to Address1EQ.
func Address1(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldAddress1, v))
}

// Address2 applies equality check predicate on the "address2" field. It's identical to Address2EQ.
func Address2(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldAddress2, v))
}

// Cv applies equality check predicate on the "cv" field. It's identical to CvEQ.
func Cv(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldCv, v))
}

// InternalComments applies equality check predicate on the "internal_comments" field. It's identical to InternalCommentsEQ.
func InternalComments(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldInternalComments, v))
}

// ReceiveEmails applies equality check predicate on the "receive_emails" field. It's identical to ReceiveEmailsEQ.
func ReceiveEmails(v bool) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldReceiveEmails, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldUserID, v))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldBirthday, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasSuffix(FieldGender, v))
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContainsFold(FieldGender, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContainsFold(FieldPhone, v))
}

// Address1EQ applies the EQ predicate on the "address1" field.
func Address1EQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldAddress1, v))
}

// Address1NEQ applies the NEQ predicate on the "address1" field.
func Address1NEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldAddress1, v))
}

// Address1In applies the In predicate on the "address1" field.
func Address1In(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldAddress1, vs...))
}

// Address1NotIn applies the NotIn predicate on the "address1" field.
func Address1NotIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldAddress1, vs...))
}

// Address1GT applies the GT predicate on the "address1" field.
func Address1GT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldAddress1, v))
}

// Address1GTE applies the GTE predicate on the "address1" field.
func Address1GTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldAddress1, v))
}

// Address1LT applies the LT predicate on the "address1" field.
func Address1LT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldAddress1, v))
}

// Address1LTE applies the LTE predicate on the "address1" field.
func Address1LTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldAddress1, v))
}

// Address1Contains applies the Contains predicate on the "address1" field.
func Address1Contains(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContains(FieldAddress1, v))
}

// Address1HasPrefix applies the HasPrefix predicate on the "address1" field.
func Address1HasPrefix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasPrefix(FieldAddress1, v))
}

// Address1HasSuffix applies the HasSuffix predicate on the "address1" field.
func Address1HasSuffix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasSuffix(FieldAddress1, v))
}

// Address1EqualFold applies the EqualFold predicate on the "address1" field.
func Address1EqualFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEqualFold(FieldAddress1, v))
}

// Address1ContainsFold applies the ContainsFold predicate on the "address1" field.
func Address1ContainsFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContainsFold(FieldAddress1, v))
}

// Address2EQ applies the EQ predicate on the "address2" field.
func Address2EQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldAddress2, v))
}

// Address2NEQ applies the NEQ predicate on the "address2" field.
func Address2NEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldAddress2, v))
}

// Address2In applies the In predicate on the "address2" field.
func Address2In(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldAddress2, vs...))
}

// Address2NotIn applies the NotIn predicate on the "address2" field.
func Address2NotIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldAddress2, vs...))
}

// Address2GT applies the GT predicate on the "address2" field.
func Address2GT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldAddress2, v))
}

// Address2GTE applies the GTE predicate on the "address2" field.
func Address2GTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldAddress2, v))
}

// Address2LT applies the LT predicate on the "address2" field.
func Address2LT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldAddress2, v))
}

// Address2LTE applies the LTE predicate on the "address2" field.
func Address2LTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldAddress2, v))
}

// Address2Contains applies the Contains predicate on the "address2" field.
func Address2Contains(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContains(FieldAddress2, v))
}

// Address2HasPrefix applies the HasPrefix predicate on the "address2" field.
func Address2HasPrefix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasPrefix(FieldAddress2, v))
}

// Address2HasSuffix applies the HasSuffix predicate on the "address2" field.
func Address2HasSuffix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasSuffix(FieldAddress2, v))
}

// Address2EqualFold applies the EqualFold predicate on the "address2" field.
func Address2EqualFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEqualFold(FieldAddress2, v))
}

// Address2ContainsFold applies the ContainsFold predicate on the "address2" field.
func Address2ContainsFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContainsFold(FieldAddress2, v))
}

// CvEQ applies the EQ predicate on the "cv" field.
func CvEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldCv, v))
}

// CvNEQ applies the NEQ predicate on the "cv" field.
func CvNEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldCv, v))
}

// CvIn applies the In predicate on the "cv" field.
func CvIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldCv, vs...))
}

// CvNotIn applies the NotIn predicate on the "cv" field.
func CvNotIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldCv, vs...))
}

// CvGT applies the GT predicate on the "cv" field.
func CvGT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldCv, v))
}

// CvGTE applies the GTE predicate on the "cv" field.
func CvGTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldCv, v))
}

// CvLT applies the LT predicate on the "cv" field.
func CvLT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldCv, v))
}

// CvLTE applies the LTE predicate on the "cv" field.
func CvLTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldCv, v))
}

// CvContains applies the Contains predicate on the "cv" field.
func CvContains(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContains(FieldCv, v))
}

// CvHasPrefix applies the HasPrefix predicate on the "cv" field.
func CvHasPrefix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasPrefix(FieldCv, v))
}

// CvHasSuffix applies the HasSuffix predicate on the "cv" field.
func CvHasSuffix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasSuffix(FieldCv, v))
}

// CvIsNil applies the IsNil predicate on the "cv" field.
func CvIsNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIsNull(FieldCv))
}

// CvNotNil applies the NotNil predicate on the "cv" field.
func CvNotNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotNull(FieldCv))
}

// CvEqualFold applies the EqualFold predicate on the "cv" field.
func CvEqualFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEqualFold(FieldCv, v))
}

// CvContainsFold applies the ContainsFold predicate on the "cv" field.
func CvContainsFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContainsFold(FieldCv, v))
}

// InternalCommentsEQ applies the EQ predicate on the "internal_comments" field.
func InternalCommentsEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldInternalComments, v))
}

// InternalCommentsNEQ applies the NEQ predicate on the "internal_comments" field.
func InternalCommentsNEQ(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldInternalComments, v))
}

// InternalCommentsIn applies the In predicate on the "internal_comments" field.
func InternalCommentsIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldInternalComments, vs...))
}

// InternalCommentsNotIn applies the NotIn predicate on the "internal_comments" field.
func InternalCommentsNotIn(vs ...string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldInternalComments, vs...))
}

// InternalCommentsGT applies the GT predicate on the "internal_comments" field.
func InternalCommentsGT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldInternalComments, v))
}

// InternalCommentsGTE applies the GTE predicate on the "internal_comments" field.
func InternalCommentsGTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldInternalComments, v))
}

// InternalCommentsLT applies the LT predicate on the "internal_comments" field.
func InternalCommentsLT(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldInternalComments, v))
}

// InternalCommentsLTE applies the LTE predicate on the "internal_comments" field.
func InternalCommentsLTE(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldInternalComments, v))
}

// InternalCommentsContains applies the Contains predicate on the "internal_comments" field.
func InternalCommentsContains(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContains(FieldInternalComments, v))
}

// InternalCommentsHasPrefix applies the HasPrefix predicate on the "internal_comments" field.
func InternalCommentsHasPrefix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasPrefix(FieldInternalComments, v))
}

// InternalCommentsHasSuffix applies the HasSuffix predicate on the "internal_comments" field.
func InternalCommentsHasSuffix(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldHasSuffix(FieldInternalComments, v))
}

// InternalCommentsEqualFold applies the EqualFold predicate on the "internal_comments" field.
func InternalCommentsEqualFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEqualFold(FieldInternalComments, v))
}

// InternalCommentsContainsFold applies the ContainsFold predicate on the "internal_comments" field.
func InternalCommentsContainsFold(v string) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldContainsFold(FieldInternalComments, v))
}

// ReceiveEmailsEQ applies the EQ predicate on the "receive_emails" field.
func ReceiveEmailsEQ(v bool) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldReceiveEmails, v))
}

// ReceiveEmailsNEQ applies the NEQ predicate on the "receive_emails" field.
func ReceiveEmailsNEQ(v bool) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldReceiveEmails, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotNull(FieldUserID))
}

// ExtraSkillsIsNil applies the IsNil predicate on the "extra_skills" field.
func ExtraSkillsIsNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldIsNull(FieldExtraSkills))
}

// ExtraSkillsNotNil applies the NotNil predicate on the "extra_skills" field.
func ExtraSkillsNotNil() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(sql.FieldNotNull(FieldExtraSkills))
}

// HasApplicantInterests applies the HasEdge predicate on the "applicant_interests" edge.
func HasApplicantInterests() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicantInterestsTable, ApplicantInterestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicantInterestsWith applies the HasEdge predicate on the "applicant_interests" edge with a given conditions (other predicates).
func HasApplicantInterestsWith(preds ...predicate.ApplicantInterest) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := newApplicantInterestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApplicantProfileSkills applies the HasEdge predicate on the "applicant_profile_skills" edge.
func HasApplicantProfileSkills() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicantProfileSkillsTable, ApplicantProfileSkillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicantProfileSkillsWith applies the HasEdge predicate on the "applicant_profile_skills" edge with a given conditions (other predicates).
func HasApplicantProfileSkillsWith(preds ...predicate.ApplicantProfileSkill) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := newApplicantProfileSkillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := newApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEducations applies the HasEdge predicate on the "educations" edge.
func HasEducations() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EducationsTable, EducationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationsWith applies the HasEdge predicate on the "educations" edge with a given conditions (other predicates).
func HasEducationsWith(preds ...predicate.Education) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := newEducationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguages applies the HasEdge predicate on the "languages" edge.
func HasLanguages() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LanguagesTable, LanguagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguagesWith applies the HasEdge predicate on the "languages" edge with a given conditions (other predicates).
func HasLanguagesWith(preds ...predicate.Language) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := newLanguagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkExperiences applies the HasEdge predicate on the "work_experiences" edge.
func HasWorkExperiences() predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkExperiencesTable, WorkExperiencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkExperiencesWith applies the HasEdge predicate on the "work_experiences" edge with a given conditions (other predicates).
func HasWorkExperiencesWith(preds ...predicate.WorkExperience) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		step := newWorkExperiencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplicantProfile) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplicantProfile) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplicantProfile) predicate.ApplicantProfile {
	return predicate.ApplicantProfile(func(s *sql.Selector) {
		p(s.Not())
	})
}
