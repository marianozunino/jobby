// Code generated by ent, DO NOT EDIT.

package applicantprofile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the applicantprofile type in the database.
	Label = "applicant_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAddress1 holds the string denoting the address1 field in the database.
	FieldAddress1 = "address1"
	// FieldAddress2 holds the string denoting the address2 field in the database.
	FieldAddress2 = "address2"
	// FieldCv holds the string denoting the cv field in the database.
	FieldCv = "cv"
	// FieldInternalComments holds the string denoting the internal_comments field in the database.
	FieldInternalComments = "internal_comments"
	// FieldReceiveEmails holds the string denoting the receive_emails field in the database.
	FieldReceiveEmails = "receive_emails"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldExtraSkills holds the string denoting the extra_skills field in the database.
	FieldExtraSkills = "extra_skills"
	// EdgeApplicantInterests holds the string denoting the applicant_interests edge name in mutations.
	EdgeApplicantInterests = "applicant_interests"
	// EdgeApplicantProfileSkills holds the string denoting the applicant_profile_skills edge name in mutations.
	EdgeApplicantProfileSkills = "applicant_profile_skills"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeEducations holds the string denoting the educations edge name in mutations.
	EdgeEducations = "educations"
	// EdgeLanguages holds the string denoting the languages edge name in mutations.
	EdgeLanguages = "languages"
	// EdgeWorkExperiences holds the string denoting the work_experiences edge name in mutations.
	EdgeWorkExperiences = "work_experiences"
	// Table holds the table name of the applicantprofile in the database.
	Table = "applicant_profiles"
	// ApplicantInterestsTable is the table that holds the applicant_interests relation/edge.
	ApplicantInterestsTable = "applicant_interests"
	// ApplicantInterestsInverseTable is the table name for the ApplicantInterest entity.
	// It exists in this package in order to avoid circular dependency with the "applicantinterest" package.
	ApplicantInterestsInverseTable = "applicant_interests"
	// ApplicantInterestsColumn is the table column denoting the applicant_interests relation/edge.
	ApplicantInterestsColumn = "applicant_profile_id"
	// ApplicantProfileSkillsTable is the table that holds the applicant_profile_skills relation/edge.
	ApplicantProfileSkillsTable = "applicant_profile_skills"
	// ApplicantProfileSkillsInverseTable is the table name for the ApplicantProfileSkill entity.
	// It exists in this package in order to avoid circular dependency with the "applicantprofileskill" package.
	ApplicantProfileSkillsInverseTable = "applicant_profile_skills"
	// ApplicantProfileSkillsColumn is the table column denoting the applicant_profile_skills relation/edge.
	ApplicantProfileSkillsColumn = "applicant_profile_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "applicant_profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "applications"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "applicant_profile_id"
	// EducationsTable is the table that holds the educations relation/edge.
	EducationsTable = "education"
	// EducationsInverseTable is the table name for the Education entity.
	// It exists in this package in order to avoid circular dependency with the "education" package.
	EducationsInverseTable = "education"
	// EducationsColumn is the table column denoting the educations relation/edge.
	EducationsColumn = "applicant_profile_educations"
	// LanguagesTable is the table that holds the languages relation/edge.
	LanguagesTable = "languages"
	// LanguagesInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguagesInverseTable = "languages"
	// LanguagesColumn is the table column denoting the languages relation/edge.
	LanguagesColumn = "applicant_profile_id"
	// WorkExperiencesTable is the table that holds the work_experiences relation/edge.
	WorkExperiencesTable = "work_experience"
	// WorkExperiencesInverseTable is the table name for the WorkExperience entity.
	// It exists in this package in order to avoid circular dependency with the "workexperience" package.
	WorkExperiencesInverseTable = "work_experience"
	// WorkExperiencesColumn is the table column denoting the work_experiences relation/edge.
	WorkExperiencesColumn = "applicant_profile_id"
)

// Columns holds all SQL columns for applicantprofile fields.
var Columns = []string{
	FieldID,
	FieldBirthday,
	FieldGender,
	FieldPhone,
	FieldAddress1,
	FieldAddress2,
	FieldCv,
	FieldInternalComments,
	FieldReceiveEmails,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldExtraSkills,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ApplicantProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBirthday orders the results by the birthday field.
func ByBirthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthday, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByAddress1 orders the results by the address1 field.
func ByAddress1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress1, opts...).ToFunc()
}

// ByAddress2 orders the results by the address2 field.
func ByAddress2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress2, opts...).ToFunc()
}

// ByCv orders the results by the cv field.
func ByCv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCv, opts...).ToFunc()
}

// ByInternalComments orders the results by the internal_comments field.
func ByInternalComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalComments, opts...).ToFunc()
}

// ByReceiveEmails orders the results by the receive_emails field.
func ByReceiveEmails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiveEmails, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByApplicantInterestsCount orders the results by applicant_interests count.
func ByApplicantInterestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicantInterestsStep(), opts...)
	}
}

// ByApplicantInterests orders the results by applicant_interests terms.
func ByApplicantInterests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicantInterestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplicantProfileSkillsCount orders the results by applicant_profile_skills count.
func ByApplicantProfileSkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicantProfileSkillsStep(), opts...)
	}
}

// ByApplicantProfileSkills orders the results by applicant_profile_skills terms.
func ByApplicantProfileSkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicantProfileSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByApplicationsCount orders the results by applications count.
func ByApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsStep(), opts...)
	}
}

// ByApplications orders the results by applications terms.
func ByApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEducationsCount orders the results by educations count.
func ByEducationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationsStep(), opts...)
	}
}

// ByEducations orders the results by educations terms.
func ByEducations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLanguagesCount orders the results by languages count.
func ByLanguagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLanguagesStep(), opts...)
	}
}

// ByLanguages orders the results by languages terms.
func ByLanguages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkExperiencesCount orders the results by work_experiences count.
func ByWorkExperiencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkExperiencesStep(), opts...)
	}
}

// ByWorkExperiences orders the results by work_experiences terms.
func ByWorkExperiences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkExperiencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicantInterestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicantInterestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicantInterestsTable, ApplicantInterestsColumn),
	)
}
func newApplicantProfileSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicantProfileSkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicantProfileSkillsTable, ApplicantProfileSkillsColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
	)
}
func newEducationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EducationsTable, EducationsColumn),
	)
}
func newLanguagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LanguagesTable, LanguagesColumn),
	)
}
func newWorkExperiencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkExperiencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkExperiencesTable, WorkExperiencesColumn),
	)
}
