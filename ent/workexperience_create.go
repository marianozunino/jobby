// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofile"
	"github.com/marianozunino/cc-backend-go/ent/workexperience"
)

// WorkExperienceCreate is the builder for creating a WorkExperience entity.
type WorkExperienceCreate struct {
	config
	mutation *WorkExperienceMutation
	hooks    []Hook
}

// SetCompany sets the "company" field.
func (wec *WorkExperienceCreate) SetCompany(s string) *WorkExperienceCreate {
	wec.mutation.SetCompany(s)
	return wec
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillableCompany(s *string) *WorkExperienceCreate {
	if s != nil {
		wec.SetCompany(*s)
	}
	return wec
}

// SetPosition sets the "position" field.
func (wec *WorkExperienceCreate) SetPosition(s string) *WorkExperienceCreate {
	wec.mutation.SetPosition(s)
	return wec
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillablePosition(s *string) *WorkExperienceCreate {
	if s != nil {
		wec.SetPosition(*s)
	}
	return wec
}

// SetDescription sets the "description" field.
func (wec *WorkExperienceCreate) SetDescription(s string) *WorkExperienceCreate {
	wec.mutation.SetDescription(s)
	return wec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillableDescription(s *string) *WorkExperienceCreate {
	if s != nil {
		wec.SetDescription(*s)
	}
	return wec
}

// SetStartDate sets the "start_date" field.
func (wec *WorkExperienceCreate) SetStartDate(t time.Time) *WorkExperienceCreate {
	wec.mutation.SetStartDate(t)
	return wec
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillableStartDate(t *time.Time) *WorkExperienceCreate {
	if t != nil {
		wec.SetStartDate(*t)
	}
	return wec
}

// SetEndDate sets the "end_date" field.
func (wec *WorkExperienceCreate) SetEndDate(t time.Time) *WorkExperienceCreate {
	wec.mutation.SetEndDate(t)
	return wec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillableEndDate(t *time.Time) *WorkExperienceCreate {
	if t != nil {
		wec.SetEndDate(*t)
	}
	return wec
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (wec *WorkExperienceCreate) SetApplicantProfileID(u uuid.UUID) *WorkExperienceCreate {
	wec.mutation.SetApplicantProfileID(u)
	return wec
}

// SetNillableApplicantProfileID sets the "applicant_profile_id" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillableApplicantProfileID(u *uuid.UUID) *WorkExperienceCreate {
	if u != nil {
		wec.SetApplicantProfileID(*u)
	}
	return wec
}

// SetCreatedAt sets the "created_at" field.
func (wec *WorkExperienceCreate) SetCreatedAt(t time.Time) *WorkExperienceCreate {
	wec.mutation.SetCreatedAt(t)
	return wec
}

// SetUpdatedAt sets the "updated_at" field.
func (wec *WorkExperienceCreate) SetUpdatedAt(t time.Time) *WorkExperienceCreate {
	wec.mutation.SetUpdatedAt(t)
	return wec
}

// SetDeletedAt sets the "deleted_at" field.
func (wec *WorkExperienceCreate) SetDeletedAt(t time.Time) *WorkExperienceCreate {
	wec.mutation.SetDeletedAt(t)
	return wec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillableDeletedAt(t *time.Time) *WorkExperienceCreate {
	if t != nil {
		wec.SetDeletedAt(*t)
	}
	return wec
}

// SetInternalComments sets the "internal_comments" field.
func (wec *WorkExperienceCreate) SetInternalComments(s string) *WorkExperienceCreate {
	wec.mutation.SetInternalComments(s)
	return wec
}

// SetNillableInternalComments sets the "internal_comments" field if the given value is not nil.
func (wec *WorkExperienceCreate) SetNillableInternalComments(s *string) *WorkExperienceCreate {
	if s != nil {
		wec.SetInternalComments(*s)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WorkExperienceCreate) SetID(u uuid.UUID) *WorkExperienceCreate {
	wec.mutation.SetID(u)
	return wec
}

// SetApplicantProfile sets the "applicant_profile" edge to the ApplicantProfile entity.
func (wec *WorkExperienceCreate) SetApplicantProfile(a *ApplicantProfile) *WorkExperienceCreate {
	return wec.SetApplicantProfileID(a.ID)
}

// Mutation returns the WorkExperienceMutation object of the builder.
func (wec *WorkExperienceCreate) Mutation() *WorkExperienceMutation {
	return wec.mutation
}

// Save creates the WorkExperience in the database.
func (wec *WorkExperienceCreate) Save(ctx context.Context) (*WorkExperience, error) {
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WorkExperienceCreate) SaveX(ctx context.Context) *WorkExperience {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WorkExperienceCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WorkExperienceCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WorkExperienceCreate) check() error {
	if _, ok := wec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkExperience.created_at"`)}
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkExperience.updated_at"`)}
	}
	return nil
}

func (wec *WorkExperienceCreate) sqlSave(ctx context.Context) (*WorkExperience, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WorkExperienceCreate) createSpec() (*WorkExperience, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkExperience{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(workexperience.Table, sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID))
	)
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wec.mutation.Company(); ok {
		_spec.SetField(workexperience.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := wec.mutation.Position(); ok {
		_spec.SetField(workexperience.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := wec.mutation.Description(); ok {
		_spec.SetField(workexperience.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wec.mutation.StartDate(); ok {
		_spec.SetField(workexperience.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := wec.mutation.EndDate(); ok {
		_spec.SetField(workexperience.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := wec.mutation.CreatedAt(); ok {
		_spec.SetField(workexperience.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wec.mutation.UpdatedAt(); ok {
		_spec.SetField(workexperience.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wec.mutation.DeletedAt(); ok {
		_spec.SetField(workexperience.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wec.mutation.InternalComments(); ok {
		_spec.SetField(workexperience.FieldInternalComments, field.TypeString, value)
		_node.InternalComments = value
	}
	if nodes := wec.mutation.ApplicantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperience.ApplicantProfileTable,
			Columns: []string{workexperience.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicantProfileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkExperienceCreateBulk is the builder for creating many WorkExperience entities in bulk.
type WorkExperienceCreateBulk struct {
	config
	builders []*WorkExperienceCreate
}

// Save creates the WorkExperience entities in the database.
func (wecb *WorkExperienceCreateBulk) Save(ctx context.Context) ([]*WorkExperience, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WorkExperience, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkExperienceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WorkExperienceCreateBulk) SaveX(ctx context.Context) []*WorkExperience {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WorkExperienceCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WorkExperienceCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}
