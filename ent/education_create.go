// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/degreelevel"
	"github.com/marianozunino/jobby/ent/education"
)

// EducationCreate is the builder for creating a Education entity.
type EducationCreate struct {
	config
	mutation *EducationMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ec *EducationCreate) SetTitle(s string) *EducationCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetInstitution sets the "institution" field.
func (ec *EducationCreate) SetInstitution(s string) *EducationCreate {
	ec.mutation.SetInstitution(s)
	return ec
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (ec *EducationCreate) SetNillableInstitution(s *string) *EducationCreate {
	if s != nil {
		ec.SetInstitution(*s)
	}
	return ec
}

// SetDateObtained sets the "date_obtained" field.
func (ec *EducationCreate) SetDateObtained(t time.Time) *EducationCreate {
	ec.mutation.SetDateObtained(t)
	return ec
}

// SetNillableDateObtained sets the "date_obtained" field if the given value is not nil.
func (ec *EducationCreate) SetNillableDateObtained(t *time.Time) *EducationCreate {
	if t != nil {
		ec.SetDateObtained(*t)
	}
	return ec
}

// SetDegreeLevelID sets the "degree_level_id" field.
func (ec *EducationCreate) SetDegreeLevelID(u uuid.UUID) *EducationCreate {
	ec.mutation.SetDegreeLevelID(u)
	return ec
}

// SetNillableDegreeLevelID sets the "degree_level_id" field if the given value is not nil.
func (ec *EducationCreate) SetNillableDegreeLevelID(u *uuid.UUID) *EducationCreate {
	if u != nil {
		ec.SetDegreeLevelID(*u)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EducationCreate) SetCreatedAt(t time.Time) *EducationCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EducationCreate) SetNillableCreatedAt(t *time.Time) *EducationCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EducationCreate) SetUpdatedAt(t time.Time) *EducationCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EducationCreate) SetNillableUpdatedAt(t *time.Time) *EducationCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EducationCreate) SetDeletedAt(t time.Time) *EducationCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EducationCreate) SetNillableDeletedAt(t *time.Time) *EducationCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetComments sets the "comments" field.
func (ec *EducationCreate) SetComments(s string) *EducationCreate {
	ec.mutation.SetComments(s)
	return ec
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (ec *EducationCreate) SetNillableComments(s *string) *EducationCreate {
	if s != nil {
		ec.SetComments(*s)
	}
	return ec
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (ec *EducationCreate) SetApplicantProfileID(u uuid.UUID) *EducationCreate {
	ec.mutation.SetApplicantProfileID(u)
	return ec
}

// SetNillableApplicantProfileID sets the "applicant_profile_id" field if the given value is not nil.
func (ec *EducationCreate) SetNillableApplicantProfileID(u *uuid.UUID) *EducationCreate {
	if u != nil {
		ec.SetApplicantProfileID(*u)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EducationCreate) SetID(u uuid.UUID) *EducationCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetDegreeLevel sets the "degree_level" edge to the DegreeLevel entity.
func (ec *EducationCreate) SetDegreeLevel(d *DegreeLevel) *EducationCreate {
	return ec.SetDegreeLevelID(d.ID)
}

// Mutation returns the EducationMutation object of the builder.
func (ec *EducationCreate) Mutation() *EducationMutation {
	return ec.mutation
}

// Save creates the Education in the database.
func (ec *EducationCreate) Save(ctx context.Context) (*Education, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EducationCreate) SaveX(ctx context.Context) *Education {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EducationCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EducationCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EducationCreate) check() error {
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Education.title"`)}
	}
	return nil
}

func (ec *EducationCreate) sqlSave(ctx context.Context) (*Education, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EducationCreate) createSpec() (*Education, *sqlgraph.CreateSpec) {
	var (
		_node = &Education{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(education.Table, sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(education.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.Institution(); ok {
		_spec.SetField(education.FieldInstitution, field.TypeString, value)
		_node.Institution = value
	}
	if value, ok := ec.mutation.DateObtained(); ok {
		_spec.SetField(education.FieldDateObtained, field.TypeTime, value)
		_node.DateObtained = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(education.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(education.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(education.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ec.mutation.Comments(); ok {
		_spec.SetField(education.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := ec.mutation.ApplicantProfileID(); ok {
		_spec.SetField(education.FieldApplicantProfileID, field.TypeUUID, value)
		_node.ApplicantProfileID = value
	}
	if nodes := ec.mutation.DegreeLevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.DegreeLevelTable,
			Columns: []string{education.DegreeLevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(degreelevel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DegreeLevelID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EducationCreateBulk is the builder for creating many Education entities in bulk.
type EducationCreateBulk struct {
	config
	builders []*EducationCreate
}

// Save creates the Education entities in the database.
func (ecb *EducationCreateBulk) Save(ctx context.Context) ([]*Education, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Education, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EducationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EducationCreateBulk) SaveX(ctx context.Context) []*Education {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EducationCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EducationCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
