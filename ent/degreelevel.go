// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/degreelevel"
)

// DegreeLevel is the model entity for the DegreeLevel schema.
type DegreeLevel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DegreeLevelQuery when eager-loading is set.
	Edges        DegreeLevelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DegreeLevelEdges holds the relations/edges for other nodes in the graph.
type DegreeLevelEdges struct {
	// Educations holds the value of the educations edge.
	Educations []*Education `json:"educations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EducationsOrErr returns the Educations value or an error if the edge
// was not loaded in eager-loading.
func (e DegreeLevelEdges) EducationsOrErr() ([]*Education, error) {
	if e.loadedTypes[0] {
		return e.Educations, nil
	}
	return nil, &NotLoadedError{edge: "educations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DegreeLevel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case degreelevel.FieldName:
			values[i] = new(sql.NullString)
		case degreelevel.FieldCreatedAt, degreelevel.FieldUpdatedAt, degreelevel.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case degreelevel.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DegreeLevel fields.
func (dl *DegreeLevel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case degreelevel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dl.ID = *value
			}
		case degreelevel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dl.Name = value.String
			}
		case degreelevel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dl.CreatedAt = value.Time
			}
		case degreelevel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dl.UpdatedAt = value.Time
			}
		case degreelevel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				dl.DeletedAt = new(time.Time)
				*dl.DeletedAt = value.Time
			}
		default:
			dl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DegreeLevel.
// This includes values selected through modifiers, order, etc.
func (dl *DegreeLevel) Value(name string) (ent.Value, error) {
	return dl.selectValues.Get(name)
}

// QueryEducations queries the "educations" edge of the DegreeLevel entity.
func (dl *DegreeLevel) QueryEducations() *EducationQuery {
	return NewDegreeLevelClient(dl.config).QueryEducations(dl)
}

// Update returns a builder for updating this DegreeLevel.
// Note that you need to call DegreeLevel.Unwrap() before calling this method if this DegreeLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (dl *DegreeLevel) Update() *DegreeLevelUpdateOne {
	return NewDegreeLevelClient(dl.config).UpdateOne(dl)
}

// Unwrap unwraps the DegreeLevel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dl *DegreeLevel) Unwrap() *DegreeLevel {
	_tx, ok := dl.config.driver.(*txDriver)
	if !ok {
		panic("ent: DegreeLevel is not a transactional entity")
	}
	dl.config.driver = _tx.drv
	return dl
}

// String implements the fmt.Stringer.
func (dl *DegreeLevel) String() string {
	var builder strings.Builder
	builder.WriteString("DegreeLevel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dl.ID))
	builder.WriteString("name=")
	builder.WriteString(dl.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := dl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// DegreeLevels is a parsable slice of DegreeLevel.
type DegreeLevels []*DegreeLevel
