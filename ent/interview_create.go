// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/application"
	"github.com/marianozunino/cc-backend-go/ent/interview"
	"github.com/marianozunino/cc-backend-go/ent/user"
)

// InterviewCreate is the builder for creating a Interview entity.
type InterviewCreate struct {
	config
	mutation *InterviewMutation
	hooks    []Hook
}

// SetComment sets the "comment" field.
func (ic *InterviewCreate) SetComment(s string) *InterviewCreate {
	ic.mutation.SetComment(s)
	return ic
}

// SetInterviewDate sets the "interview_date" field.
func (ic *InterviewCreate) SetInterviewDate(t time.Time) *InterviewCreate {
	ic.mutation.SetInterviewDate(t)
	return ic
}

// SetStatus sets the "status" field.
func (ic *InterviewCreate) SetStatus(s string) *InterviewCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetApplicationID sets the "application_id" field.
func (ic *InterviewCreate) SetApplicationID(u uuid.UUID) *InterviewCreate {
	ic.mutation.SetApplicationID(u)
	return ic
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableApplicationID(u *uuid.UUID) *InterviewCreate {
	if u != nil {
		ic.SetApplicationID(*u)
	}
	return ic
}

// SetInterviewerID sets the "interviewer_id" field.
func (ic *InterviewCreate) SetInterviewerID(u uuid.UUID) *InterviewCreate {
	ic.mutation.SetInterviewerID(u)
	return ic
}

// SetNillableInterviewerID sets the "interviewer_id" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableInterviewerID(u *uuid.UUID) *InterviewCreate {
	if u != nil {
		ic.SetInterviewerID(*u)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InterviewCreate) SetCreatedAt(t time.Time) *InterviewCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InterviewCreate) SetUpdatedAt(t time.Time) *InterviewCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *InterviewCreate) SetDeletedAt(t time.Time) *InterviewCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableDeletedAt(t *time.Time) *InterviewCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InterviewCreate) SetID(u uuid.UUID) *InterviewCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetApplication sets the "application" edge to the Application entity.
func (ic *InterviewCreate) SetApplication(a *Application) *InterviewCreate {
	return ic.SetApplicationID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ic *InterviewCreate) SetUserID(id uuid.UUID) *InterviewCreate {
	ic.mutation.SetUserID(id)
	return ic
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ic *InterviewCreate) SetNillableUserID(id *uuid.UUID) *InterviewCreate {
	if id != nil {
		ic = ic.SetUserID(*id)
	}
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *InterviewCreate) SetUser(u *User) *InterviewCreate {
	return ic.SetUserID(u.ID)
}

// Mutation returns the InterviewMutation object of the builder.
func (ic *InterviewCreate) Mutation() *InterviewMutation {
	return ic.mutation
}

// Save creates the Interview in the database.
func (ic *InterviewCreate) Save(ctx context.Context) (*Interview, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InterviewCreate) SaveX(ctx context.Context) *Interview {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InterviewCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InterviewCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InterviewCreate) check() error {
	if _, ok := ic.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Interview.comment"`)}
	}
	if _, ok := ic.mutation.InterviewDate(); !ok {
		return &ValidationError{Name: "interview_date", err: errors.New(`ent: missing required field "Interview.interview_date"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Interview.status"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Interview.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Interview.updated_at"`)}
	}
	return nil
}

func (ic *InterviewCreate) sqlSave(ctx context.Context) (*Interview, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InterviewCreate) createSpec() (*Interview, *sqlgraph.CreateSpec) {
	var (
		_node = &Interview{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(interview.Table, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Comment(); ok {
		_spec.SetField(interview.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := ic.mutation.InterviewDate(); ok {
		_spec.SetField(interview.FieldInterviewDate, field.TypeTime, value)
		_node.InterviewDate = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(interview.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(interview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(interview.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := ic.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.ApplicationTable,
			Columns: []string{interview.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interview.UserTable,
			Columns: []string{interview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InterviewerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InterviewCreateBulk is the builder for creating many Interview entities in bulk.
type InterviewCreateBulk struct {
	config
	builders []*InterviewCreate
}

// Save creates the Interview entities in the database.
func (icb *InterviewCreateBulk) Save(ctx context.Context) ([]*Interview, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Interview, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InterviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InterviewCreateBulk) SaveX(ctx context.Context) []*Interview {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InterviewCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InterviewCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
