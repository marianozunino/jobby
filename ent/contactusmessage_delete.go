// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marianozunino/jobby/ent/contactusmessage"
	"github.com/marianozunino/jobby/ent/predicate"
)

// ContactUsMessageDelete is the builder for deleting a ContactUsMessage entity.
type ContactUsMessageDelete struct {
	config
	hooks    []Hook
	mutation *ContactUsMessageMutation
}

// Where appends a list predicates to the ContactUsMessageDelete builder.
func (cumd *ContactUsMessageDelete) Where(ps ...predicate.ContactUsMessage) *ContactUsMessageDelete {
	cumd.mutation.Where(ps...)
	return cumd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cumd *ContactUsMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cumd.sqlExec, cumd.mutation, cumd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cumd *ContactUsMessageDelete) ExecX(ctx context.Context) int {
	n, err := cumd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cumd *ContactUsMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(contactusmessage.Table, sqlgraph.NewFieldSpec(contactusmessage.FieldID, field.TypeUUID))
	if ps := cumd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cumd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cumd.mutation.done = true
	return affected, err
}

// ContactUsMessageDeleteOne is the builder for deleting a single ContactUsMessage entity.
type ContactUsMessageDeleteOne struct {
	cumd *ContactUsMessageDelete
}

// Where appends a list predicates to the ContactUsMessageDelete builder.
func (cumdo *ContactUsMessageDeleteOne) Where(ps ...predicate.ContactUsMessage) *ContactUsMessageDeleteOne {
	cumdo.cumd.mutation.Where(ps...)
	return cumdo
}

// Exec executes the deletion query.
func (cumdo *ContactUsMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := cumdo.cumd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{contactusmessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cumdo *ContactUsMessageDeleteOne) ExecX(ctx context.Context) {
	if err := cumdo.Exec(ctx); err != nil {
		panic(err)
	}
}
