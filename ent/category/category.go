// Code generated by ent, DO NOT EDIT.

package category

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldIsRoot holds the string denoting the is_root field in the database.
	FieldIsRoot = "is_root"
	// EdgeApplicantInterests holds the string denoting the applicant_interests edge name in mutations.
	EdgeApplicantInterests = "applicant_interests"
	// EdgeChildCategories holds the string denoting the child_categories edge name in mutations.
	EdgeChildCategories = "child_categories"
	// EdgeJobOfferCategories holds the string denoting the job_offer_categories edge name in mutations.
	EdgeJobOfferCategories = "job_offer_categories"
	// EdgeParentCategory holds the string denoting the parent_category edge name in mutations.
	EdgeParentCategory = "parent_category"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// ApplicantInterestsTable is the table that holds the applicant_interests relation/edge.
	ApplicantInterestsTable = "applicant_interests"
	// ApplicantInterestsInverseTable is the table name for the ApplicantInterest entity.
	// It exists in this package in order to avoid circular dependency with the "applicantinterest" package.
	ApplicantInterestsInverseTable = "applicant_interests"
	// ApplicantInterestsColumn is the table column denoting the applicant_interests relation/edge.
	ApplicantInterestsColumn = "category_id"
	// ChildCategoriesTable is the table that holds the child_categories relation/edge.
	ChildCategoriesTable = "categories"
	// ChildCategoriesColumn is the table column denoting the child_categories relation/edge.
	ChildCategoriesColumn = "parent_id"
	// JobOfferCategoriesTable is the table that holds the job_offer_categories relation/edge.
	JobOfferCategoriesTable = "job_offer_categories"
	// JobOfferCategoriesInverseTable is the table name for the JobOfferCategory entity.
	// It exists in this package in order to avoid circular dependency with the "joboffercategory" package.
	JobOfferCategoriesInverseTable = "job_offer_categories"
	// JobOfferCategoriesColumn is the table column denoting the job_offer_categories relation/edge.
	JobOfferCategoriesColumn = "category_id"
	// ParentCategoryTable is the table that holds the parent_category relation/edge.
	ParentCategoryTable = "categories"
	// ParentCategoryColumn is the table column denoting the parent_category relation/edge.
	ParentCategoryColumn = "parent_id"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldParentID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldIsRoot,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Category queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByIsRoot orders the results by the is_root field.
func ByIsRoot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRoot, opts...).ToFunc()
}

// ByApplicantInterestsCount orders the results by applicant_interests count.
func ByApplicantInterestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicantInterestsStep(), opts...)
	}
}

// ByApplicantInterests orders the results by applicant_interests terms.
func ByApplicantInterests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicantInterestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChildCategoriesCount orders the results by child_categories count.
func ByChildCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildCategoriesStep(), opts...)
	}
}

// ByChildCategories orders the results by child_categories terms.
func ByChildCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobOfferCategoriesCount orders the results by job_offer_categories count.
func ByJobOfferCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobOfferCategoriesStep(), opts...)
	}
}

// ByJobOfferCategories orders the results by job_offer_categories terms.
func ByJobOfferCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobOfferCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentCategoryField orders the results by parent_category field.
func ByParentCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentCategoryStep(), sql.OrderByField(field, opts...))
	}
}
func newApplicantInterestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicantInterestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicantInterestsTable, ApplicantInterestsColumn),
	)
}
func newChildCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildCategoriesTable, ChildCategoriesColumn),
	)
}
func newJobOfferCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobOfferCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobOfferCategoriesTable, JobOfferCategoriesColumn),
	)
}
func newParentCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentCategoryTable, ParentCategoryColumn),
	)
}
