// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/category"
	"github.com/marianozunino/jobby/ent/joboffer"
	"github.com/marianozunino/jobby/ent/joboffercategory"
	"github.com/marianozunino/jobby/ent/predicate"
)

// JobOfferCategoryUpdate is the builder for updating JobOfferCategory entities.
type JobOfferCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *JobOfferCategoryMutation
}

// Where appends a list predicates to the JobOfferCategoryUpdate builder.
func (jocu *JobOfferCategoryUpdate) Where(ps ...predicate.JobOfferCategory) *JobOfferCategoryUpdate {
	jocu.mutation.Where(ps...)
	return jocu
}

// SetJobOfferID sets the "job_offer_id" field.
func (jocu *JobOfferCategoryUpdate) SetJobOfferID(u uuid.UUID) *JobOfferCategoryUpdate {
	jocu.mutation.SetJobOfferID(u)
	return jocu
}

// SetCategoryID sets the "category_id" field.
func (jocu *JobOfferCategoryUpdate) SetCategoryID(u uuid.UUID) *JobOfferCategoryUpdate {
	jocu.mutation.SetCategoryID(u)
	return jocu
}

// SetCreatedAt sets the "created_at" field.
func (jocu *JobOfferCategoryUpdate) SetCreatedAt(t time.Time) *JobOfferCategoryUpdate {
	jocu.mutation.SetCreatedAt(t)
	return jocu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jocu *JobOfferCategoryUpdate) SetNillableCreatedAt(t *time.Time) *JobOfferCategoryUpdate {
	if t != nil {
		jocu.SetCreatedAt(*t)
	}
	return jocu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (jocu *JobOfferCategoryUpdate) ClearCreatedAt() *JobOfferCategoryUpdate {
	jocu.mutation.ClearCreatedAt()
	return jocu
}

// SetUpdatedAt sets the "updated_at" field.
func (jocu *JobOfferCategoryUpdate) SetUpdatedAt(t time.Time) *JobOfferCategoryUpdate {
	jocu.mutation.SetUpdatedAt(t)
	return jocu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jocu *JobOfferCategoryUpdate) SetNillableUpdatedAt(t *time.Time) *JobOfferCategoryUpdate {
	if t != nil {
		jocu.SetUpdatedAt(*t)
	}
	return jocu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jocu *JobOfferCategoryUpdate) ClearUpdatedAt() *JobOfferCategoryUpdate {
	jocu.mutation.ClearUpdatedAt()
	return jocu
}

// SetDeletedAt sets the "deleted_at" field.
func (jocu *JobOfferCategoryUpdate) SetDeletedAt(t time.Time) *JobOfferCategoryUpdate {
	jocu.mutation.SetDeletedAt(t)
	return jocu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jocu *JobOfferCategoryUpdate) SetNillableDeletedAt(t *time.Time) *JobOfferCategoryUpdate {
	if t != nil {
		jocu.SetDeletedAt(*t)
	}
	return jocu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jocu *JobOfferCategoryUpdate) ClearDeletedAt() *JobOfferCategoryUpdate {
	jocu.mutation.ClearDeletedAt()
	return jocu
}

// SetCategory sets the "category" edge to the Category entity.
func (jocu *JobOfferCategoryUpdate) SetCategory(c *Category) *JobOfferCategoryUpdate {
	return jocu.SetCategoryID(c.ID)
}

// SetJobOffer sets the "job_offer" edge to the JobOffer entity.
func (jocu *JobOfferCategoryUpdate) SetJobOffer(j *JobOffer) *JobOfferCategoryUpdate {
	return jocu.SetJobOfferID(j.ID)
}

// Mutation returns the JobOfferCategoryMutation object of the builder.
func (jocu *JobOfferCategoryUpdate) Mutation() *JobOfferCategoryMutation {
	return jocu.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (jocu *JobOfferCategoryUpdate) ClearCategory() *JobOfferCategoryUpdate {
	jocu.mutation.ClearCategory()
	return jocu
}

// ClearJobOffer clears the "job_offer" edge to the JobOffer entity.
func (jocu *JobOfferCategoryUpdate) ClearJobOffer() *JobOfferCategoryUpdate {
	jocu.mutation.ClearJobOffer()
	return jocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jocu *JobOfferCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jocu.sqlSave, jocu.mutation, jocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jocu *JobOfferCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := jocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jocu *JobOfferCategoryUpdate) Exec(ctx context.Context) error {
	_, err := jocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jocu *JobOfferCategoryUpdate) ExecX(ctx context.Context) {
	if err := jocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jocu *JobOfferCategoryUpdate) check() error {
	if _, ok := jocu.mutation.CategoryID(); jocu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "JobOfferCategory.category"`)
	}
	if _, ok := jocu.mutation.JobOfferID(); jocu.mutation.JobOfferCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "JobOfferCategory.job_offer"`)
	}
	return nil
}

func (jocu *JobOfferCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jocu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(joboffercategory.Table, joboffercategory.Columns, sqlgraph.NewFieldSpec(joboffercategory.FieldID, field.TypeUUID))
	if ps := jocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jocu.mutation.CreatedAt(); ok {
		_spec.SetField(joboffercategory.FieldCreatedAt, field.TypeTime, value)
	}
	if jocu.mutation.CreatedAtCleared() {
		_spec.ClearField(joboffercategory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jocu.mutation.UpdatedAt(); ok {
		_spec.SetField(joboffercategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if jocu.mutation.UpdatedAtCleared() {
		_spec.ClearField(joboffercategory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := jocu.mutation.DeletedAt(); ok {
		_spec.SetField(joboffercategory.FieldDeletedAt, field.TypeTime, value)
	}
	if jocu.mutation.DeletedAtCleared() {
		_spec.ClearField(joboffercategory.FieldDeletedAt, field.TypeTime)
	}
	if jocu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.CategoryTable,
			Columns: []string{joboffercategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jocu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.CategoryTable,
			Columns: []string{joboffercategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jocu.mutation.JobOfferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.JobOfferTable,
			Columns: []string{joboffercategory.JobOfferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jocu.mutation.JobOfferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.JobOfferTable,
			Columns: []string{joboffercategory.JobOfferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joboffercategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jocu.mutation.done = true
	return n, nil
}

// JobOfferCategoryUpdateOne is the builder for updating a single JobOfferCategory entity.
type JobOfferCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobOfferCategoryMutation
}

// SetJobOfferID sets the "job_offer_id" field.
func (jocuo *JobOfferCategoryUpdateOne) SetJobOfferID(u uuid.UUID) *JobOfferCategoryUpdateOne {
	jocuo.mutation.SetJobOfferID(u)
	return jocuo
}

// SetCategoryID sets the "category_id" field.
func (jocuo *JobOfferCategoryUpdateOne) SetCategoryID(u uuid.UUID) *JobOfferCategoryUpdateOne {
	jocuo.mutation.SetCategoryID(u)
	return jocuo
}

// SetCreatedAt sets the "created_at" field.
func (jocuo *JobOfferCategoryUpdateOne) SetCreatedAt(t time.Time) *JobOfferCategoryUpdateOne {
	jocuo.mutation.SetCreatedAt(t)
	return jocuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jocuo *JobOfferCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *JobOfferCategoryUpdateOne {
	if t != nil {
		jocuo.SetCreatedAt(*t)
	}
	return jocuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (jocuo *JobOfferCategoryUpdateOne) ClearCreatedAt() *JobOfferCategoryUpdateOne {
	jocuo.mutation.ClearCreatedAt()
	return jocuo
}

// SetUpdatedAt sets the "updated_at" field.
func (jocuo *JobOfferCategoryUpdateOne) SetUpdatedAt(t time.Time) *JobOfferCategoryUpdateOne {
	jocuo.mutation.SetUpdatedAt(t)
	return jocuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jocuo *JobOfferCategoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *JobOfferCategoryUpdateOne {
	if t != nil {
		jocuo.SetUpdatedAt(*t)
	}
	return jocuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jocuo *JobOfferCategoryUpdateOne) ClearUpdatedAt() *JobOfferCategoryUpdateOne {
	jocuo.mutation.ClearUpdatedAt()
	return jocuo
}

// SetDeletedAt sets the "deleted_at" field.
func (jocuo *JobOfferCategoryUpdateOne) SetDeletedAt(t time.Time) *JobOfferCategoryUpdateOne {
	jocuo.mutation.SetDeletedAt(t)
	return jocuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jocuo *JobOfferCategoryUpdateOne) SetNillableDeletedAt(t *time.Time) *JobOfferCategoryUpdateOne {
	if t != nil {
		jocuo.SetDeletedAt(*t)
	}
	return jocuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jocuo *JobOfferCategoryUpdateOne) ClearDeletedAt() *JobOfferCategoryUpdateOne {
	jocuo.mutation.ClearDeletedAt()
	return jocuo
}

// SetCategory sets the "category" edge to the Category entity.
func (jocuo *JobOfferCategoryUpdateOne) SetCategory(c *Category) *JobOfferCategoryUpdateOne {
	return jocuo.SetCategoryID(c.ID)
}

// SetJobOffer sets the "job_offer" edge to the JobOffer entity.
func (jocuo *JobOfferCategoryUpdateOne) SetJobOffer(j *JobOffer) *JobOfferCategoryUpdateOne {
	return jocuo.SetJobOfferID(j.ID)
}

// Mutation returns the JobOfferCategoryMutation object of the builder.
func (jocuo *JobOfferCategoryUpdateOne) Mutation() *JobOfferCategoryMutation {
	return jocuo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (jocuo *JobOfferCategoryUpdateOne) ClearCategory() *JobOfferCategoryUpdateOne {
	jocuo.mutation.ClearCategory()
	return jocuo
}

// ClearJobOffer clears the "job_offer" edge to the JobOffer entity.
func (jocuo *JobOfferCategoryUpdateOne) ClearJobOffer() *JobOfferCategoryUpdateOne {
	jocuo.mutation.ClearJobOffer()
	return jocuo
}

// Where appends a list predicates to the JobOfferCategoryUpdate builder.
func (jocuo *JobOfferCategoryUpdateOne) Where(ps ...predicate.JobOfferCategory) *JobOfferCategoryUpdateOne {
	jocuo.mutation.Where(ps...)
	return jocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jocuo *JobOfferCategoryUpdateOne) Select(field string, fields ...string) *JobOfferCategoryUpdateOne {
	jocuo.fields = append([]string{field}, fields...)
	return jocuo
}

// Save executes the query and returns the updated JobOfferCategory entity.
func (jocuo *JobOfferCategoryUpdateOne) Save(ctx context.Context) (*JobOfferCategory, error) {
	return withHooks(ctx, jocuo.sqlSave, jocuo.mutation, jocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jocuo *JobOfferCategoryUpdateOne) SaveX(ctx context.Context) *JobOfferCategory {
	node, err := jocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jocuo *JobOfferCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := jocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jocuo *JobOfferCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := jocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jocuo *JobOfferCategoryUpdateOne) check() error {
	if _, ok := jocuo.mutation.CategoryID(); jocuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "JobOfferCategory.category"`)
	}
	if _, ok := jocuo.mutation.JobOfferID(); jocuo.mutation.JobOfferCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "JobOfferCategory.job_offer"`)
	}
	return nil
}

func (jocuo *JobOfferCategoryUpdateOne) sqlSave(ctx context.Context) (_node *JobOfferCategory, err error) {
	if err := jocuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(joboffercategory.Table, joboffercategory.Columns, sqlgraph.NewFieldSpec(joboffercategory.FieldID, field.TypeUUID))
	id, ok := jocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobOfferCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, joboffercategory.FieldID)
		for _, f := range fields {
			if !joboffercategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != joboffercategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jocuo.mutation.CreatedAt(); ok {
		_spec.SetField(joboffercategory.FieldCreatedAt, field.TypeTime, value)
	}
	if jocuo.mutation.CreatedAtCleared() {
		_spec.ClearField(joboffercategory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jocuo.mutation.UpdatedAt(); ok {
		_spec.SetField(joboffercategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if jocuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(joboffercategory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := jocuo.mutation.DeletedAt(); ok {
		_spec.SetField(joboffercategory.FieldDeletedAt, field.TypeTime, value)
	}
	if jocuo.mutation.DeletedAtCleared() {
		_spec.ClearField(joboffercategory.FieldDeletedAt, field.TypeTime)
	}
	if jocuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.CategoryTable,
			Columns: []string{joboffercategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jocuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.CategoryTable,
			Columns: []string{joboffercategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jocuo.mutation.JobOfferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.JobOfferTable,
			Columns: []string{joboffercategory.JobOfferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jocuo.mutation.JobOfferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.JobOfferTable,
			Columns: []string{joboffercategory.JobOfferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobOfferCategory{config: jocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joboffercategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jocuo.mutation.done = true
	return _node, nil
}
