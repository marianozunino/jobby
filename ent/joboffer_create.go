// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/application"
	"github.com/marianozunino/cc-backend-go/ent/joboffer"
	"github.com/marianozunino/cc-backend-go/ent/joboffercategory"
	"github.com/marianozunino/cc-backend-go/ent/status"
)

// JobOfferCreate is the builder for creating a JobOffer entity.
type JobOfferCreate struct {
	config
	mutation *JobOfferMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (joc *JobOfferCreate) SetTitle(s string) *JobOfferCreate {
	joc.mutation.SetTitle(s)
	return joc
}

// SetReference sets the "reference" field.
func (joc *JobOfferCreate) SetReference(i int32) *JobOfferCreate {
	joc.mutation.SetReference(i)
	return joc
}

// SetStartDate sets the "start_date" field.
func (joc *JobOfferCreate) SetStartDate(t time.Time) *JobOfferCreate {
	joc.mutation.SetStartDate(t)
	return joc
}

// SetEndDate sets the "end_date" field.
func (joc *JobOfferCreate) SetEndDate(t time.Time) *JobOfferCreate {
	joc.mutation.SetEndDate(t)
	return joc
}

// SetAddress1 sets the "address1" field.
func (joc *JobOfferCreate) SetAddress1(s string) *JobOfferCreate {
	joc.mutation.SetAddress1(s)
	return joc
}

// SetNillableAddress1 sets the "address1" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableAddress1(s *string) *JobOfferCreate {
	if s != nil {
		joc.SetAddress1(*s)
	}
	return joc
}

// SetAddress2 sets the "address2" field.
func (joc *JobOfferCreate) SetAddress2(s string) *JobOfferCreate {
	joc.mutation.SetAddress2(s)
	return joc
}

// SetNillableAddress2 sets the "address2" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableAddress2(s *string) *JobOfferCreate {
	if s != nil {
		joc.SetAddress2(*s)
	}
	return joc
}

// SetDepartment sets the "department" field.
func (joc *JobOfferCreate) SetDepartment(s string) *JobOfferCreate {
	joc.mutation.SetDepartment(s)
	return joc
}

// SetDescription sets the "description" field.
func (joc *JobOfferCreate) SetDescription(s string) *JobOfferCreate {
	joc.mutation.SetDescription(s)
	return joc
}

// SetWorkingHours sets the "working_hours" field.
func (joc *JobOfferCreate) SetWorkingHours(s string) *JobOfferCreate {
	joc.mutation.SetWorkingHours(s)
	return joc
}

// SetSalary sets the "salary" field.
func (joc *JobOfferCreate) SetSalary(s string) *JobOfferCreate {
	joc.mutation.SetSalary(s)
	return joc
}

// SetSlug sets the "slug" field.
func (joc *JobOfferCreate) SetSlug(s string) *JobOfferCreate {
	joc.mutation.SetSlug(s)
	return joc
}

// SetIsFeatured sets the "is_featured" field.
func (joc *JobOfferCreate) SetIsFeatured(b bool) *JobOfferCreate {
	joc.mutation.SetIsFeatured(b)
	return joc
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableIsFeatured(b *bool) *JobOfferCreate {
	if b != nil {
		joc.SetIsFeatured(*b)
	}
	return joc
}

// SetHasBeenEmailed sets the "has_been_emailed" field.
func (joc *JobOfferCreate) SetHasBeenEmailed(b bool) *JobOfferCreate {
	joc.mutation.SetHasBeenEmailed(b)
	return joc
}

// SetNillableHasBeenEmailed sets the "has_been_emailed" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableHasBeenEmailed(b *bool) *JobOfferCreate {
	if b != nil {
		joc.SetHasBeenEmailed(*b)
	}
	return joc
}

// SetStatusID sets the "status_id" field.
func (joc *JobOfferCreate) SetStatusID(u uuid.UUID) *JobOfferCreate {
	joc.mutation.SetStatusID(u)
	return joc
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableStatusID(u *uuid.UUID) *JobOfferCreate {
	if u != nil {
		joc.SetStatusID(*u)
	}
	return joc
}

// SetCreatedAt sets the "created_at" field.
func (joc *JobOfferCreate) SetCreatedAt(t time.Time) *JobOfferCreate {
	joc.mutation.SetCreatedAt(t)
	return joc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableCreatedAt(t *time.Time) *JobOfferCreate {
	if t != nil {
		joc.SetCreatedAt(*t)
	}
	return joc
}

// SetUpdatedAt sets the "updated_at" field.
func (joc *JobOfferCreate) SetUpdatedAt(t time.Time) *JobOfferCreate {
	joc.mutation.SetUpdatedAt(t)
	return joc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableUpdatedAt(t *time.Time) *JobOfferCreate {
	if t != nil {
		joc.SetUpdatedAt(*t)
	}
	return joc
}

// SetDeletedAt sets the "deleted_at" field.
func (joc *JobOfferCreate) SetDeletedAt(t time.Time) *JobOfferCreate {
	joc.mutation.SetDeletedAt(t)
	return joc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (joc *JobOfferCreate) SetNillableDeletedAt(t *time.Time) *JobOfferCreate {
	if t != nil {
		joc.SetDeletedAt(*t)
	}
	return joc
}

// SetID sets the "id" field.
func (joc *JobOfferCreate) SetID(u uuid.UUID) *JobOfferCreate {
	joc.mutation.SetID(u)
	return joc
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (joc *JobOfferCreate) AddApplicationIDs(ids ...uuid.UUID) *JobOfferCreate {
	joc.mutation.AddApplicationIDs(ids...)
	return joc
}

// AddApplications adds the "applications" edges to the Application entity.
func (joc *JobOfferCreate) AddApplications(a ...*Application) *JobOfferCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return joc.AddApplicationIDs(ids...)
}

// AddJobOfferCategoryIDs adds the "job_offer_categories" edge to the JobOfferCategory entity by IDs.
func (joc *JobOfferCreate) AddJobOfferCategoryIDs(ids ...uuid.UUID) *JobOfferCreate {
	joc.mutation.AddJobOfferCategoryIDs(ids...)
	return joc
}

// AddJobOfferCategories adds the "job_offer_categories" edges to the JobOfferCategory entity.
func (joc *JobOfferCreate) AddJobOfferCategories(j ...*JobOfferCategory) *JobOfferCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return joc.AddJobOfferCategoryIDs(ids...)
}

// SetStatus sets the "status" edge to the Status entity.
func (joc *JobOfferCreate) SetStatus(s *Status) *JobOfferCreate {
	return joc.SetStatusID(s.ID)
}

// Mutation returns the JobOfferMutation object of the builder.
func (joc *JobOfferCreate) Mutation() *JobOfferMutation {
	return joc.mutation
}

// Save creates the JobOffer in the database.
func (joc *JobOfferCreate) Save(ctx context.Context) (*JobOffer, error) {
	return withHooks(ctx, joc.sqlSave, joc.mutation, joc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (joc *JobOfferCreate) SaveX(ctx context.Context) *JobOffer {
	v, err := joc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (joc *JobOfferCreate) Exec(ctx context.Context) error {
	_, err := joc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (joc *JobOfferCreate) ExecX(ctx context.Context) {
	if err := joc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (joc *JobOfferCreate) check() error {
	if _, ok := joc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "JobOffer.title"`)}
	}
	if _, ok := joc.mutation.Reference(); !ok {
		return &ValidationError{Name: "reference", err: errors.New(`ent: missing required field "JobOffer.reference"`)}
	}
	if _, ok := joc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "JobOffer.start_date"`)}
	}
	if _, ok := joc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "JobOffer.end_date"`)}
	}
	if _, ok := joc.mutation.Department(); !ok {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required field "JobOffer.department"`)}
	}
	if _, ok := joc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "JobOffer.description"`)}
	}
	if _, ok := joc.mutation.WorkingHours(); !ok {
		return &ValidationError{Name: "working_hours", err: errors.New(`ent: missing required field "JobOffer.working_hours"`)}
	}
	if _, ok := joc.mutation.Salary(); !ok {
		return &ValidationError{Name: "salary", err: errors.New(`ent: missing required field "JobOffer.salary"`)}
	}
	if _, ok := joc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "JobOffer.slug"`)}
	}
	return nil
}

func (joc *JobOfferCreate) sqlSave(ctx context.Context) (*JobOffer, error) {
	if err := joc.check(); err != nil {
		return nil, err
	}
	_node, _spec := joc.createSpec()
	if err := sqlgraph.CreateNode(ctx, joc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	joc.mutation.id = &_node.ID
	joc.mutation.done = true
	return _node, nil
}

func (joc *JobOfferCreate) createSpec() (*JobOffer, *sqlgraph.CreateSpec) {
	var (
		_node = &JobOffer{config: joc.config}
		_spec = sqlgraph.NewCreateSpec(joboffer.Table, sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeUUID))
	)
	if id, ok := joc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := joc.mutation.Title(); ok {
		_spec.SetField(joboffer.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := joc.mutation.Reference(); ok {
		_spec.SetField(joboffer.FieldReference, field.TypeInt32, value)
		_node.Reference = value
	}
	if value, ok := joc.mutation.StartDate(); ok {
		_spec.SetField(joboffer.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := joc.mutation.EndDate(); ok {
		_spec.SetField(joboffer.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := joc.mutation.Address1(); ok {
		_spec.SetField(joboffer.FieldAddress1, field.TypeString, value)
		_node.Address1 = value
	}
	if value, ok := joc.mutation.Address2(); ok {
		_spec.SetField(joboffer.FieldAddress2, field.TypeString, value)
		_node.Address2 = value
	}
	if value, ok := joc.mutation.Department(); ok {
		_spec.SetField(joboffer.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := joc.mutation.Description(); ok {
		_spec.SetField(joboffer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := joc.mutation.WorkingHours(); ok {
		_spec.SetField(joboffer.FieldWorkingHours, field.TypeString, value)
		_node.WorkingHours = value
	}
	if value, ok := joc.mutation.Salary(); ok {
		_spec.SetField(joboffer.FieldSalary, field.TypeString, value)
		_node.Salary = value
	}
	if value, ok := joc.mutation.Slug(); ok {
		_spec.SetField(joboffer.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := joc.mutation.IsFeatured(); ok {
		_spec.SetField(joboffer.FieldIsFeatured, field.TypeBool, value)
		_node.IsFeatured = value
	}
	if value, ok := joc.mutation.HasBeenEmailed(); ok {
		_spec.SetField(joboffer.FieldHasBeenEmailed, field.TypeBool, value)
		_node.HasBeenEmailed = value
	}
	if value, ok := joc.mutation.CreatedAt(); ok {
		_spec.SetField(joboffer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := joc.mutation.UpdatedAt(); ok {
		_spec.SetField(joboffer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := joc.mutation.DeletedAt(); ok {
		_spec.SetField(joboffer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := joc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   joboffer.ApplicationsTable,
			Columns: []string{joboffer.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := joc.mutation.JobOfferCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   joboffer.JobOfferCategoriesTable,
			Columns: []string{joboffer.JobOfferCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joboffercategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := joc.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffer.StatusTable,
			Columns: []string{joboffer.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StatusID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobOfferCreateBulk is the builder for creating many JobOffer entities in bulk.
type JobOfferCreateBulk struct {
	config
	builders []*JobOfferCreate
}

// Save creates the JobOffer entities in the database.
func (jocb *JobOfferCreateBulk) Save(ctx context.Context) ([]*JobOffer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jocb.builders))
	nodes := make([]*JobOffer, len(jocb.builders))
	mutators := make([]Mutator, len(jocb.builders))
	for i := range jocb.builders {
		func(i int, root context.Context) {
			builder := jocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobOfferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jocb *JobOfferCreateBulk) SaveX(ctx context.Context) []*JobOffer {
	v, err := jocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jocb *JobOfferCreateBulk) Exec(ctx context.Context) error {
	_, err := jocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jocb *JobOfferCreateBulk) ExecX(ctx context.Context) {
	if err := jocb.Exec(ctx); err != nil {
		panic(err)
	}
}
