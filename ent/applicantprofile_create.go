// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/applicantinterest"
	"github.com/marianozunino/jobby/ent/applicantprofile"
	"github.com/marianozunino/jobby/ent/applicantprofileskill"
	"github.com/marianozunino/jobby/ent/application"
	"github.com/marianozunino/jobby/ent/education"
	"github.com/marianozunino/jobby/ent/language"
	"github.com/marianozunino/jobby/ent/user"
	"github.com/marianozunino/jobby/ent/workexperience"
)

// ApplicantProfileCreate is the builder for creating a ApplicantProfile entity.
type ApplicantProfileCreate struct {
	config
	mutation *ApplicantProfileMutation
	hooks    []Hook
}

// SetBirthday sets the "birthday" field.
func (apc *ApplicantProfileCreate) SetBirthday(t time.Time) *ApplicantProfileCreate {
	apc.mutation.SetBirthday(t)
	return apc
}

// SetGender sets the "gender" field.
func (apc *ApplicantProfileCreate) SetGender(s string) *ApplicantProfileCreate {
	apc.mutation.SetGender(s)
	return apc
}

// SetPhone sets the "phone" field.
func (apc *ApplicantProfileCreate) SetPhone(s string) *ApplicantProfileCreate {
	apc.mutation.SetPhone(s)
	return apc
}

// SetAddress1 sets the "address1" field.
func (apc *ApplicantProfileCreate) SetAddress1(s string) *ApplicantProfileCreate {
	apc.mutation.SetAddress1(s)
	return apc
}

// SetAddress2 sets the "address2" field.
func (apc *ApplicantProfileCreate) SetAddress2(s string) *ApplicantProfileCreate {
	apc.mutation.SetAddress2(s)
	return apc
}

// SetCv sets the "cv" field.
func (apc *ApplicantProfileCreate) SetCv(s string) *ApplicantProfileCreate {
	apc.mutation.SetCv(s)
	return apc
}

// SetNillableCv sets the "cv" field if the given value is not nil.
func (apc *ApplicantProfileCreate) SetNillableCv(s *string) *ApplicantProfileCreate {
	if s != nil {
		apc.SetCv(*s)
	}
	return apc
}

// SetInternalComments sets the "internal_comments" field.
func (apc *ApplicantProfileCreate) SetInternalComments(s string) *ApplicantProfileCreate {
	apc.mutation.SetInternalComments(s)
	return apc
}

// SetReceiveEmails sets the "receive_emails" field.
func (apc *ApplicantProfileCreate) SetReceiveEmails(b bool) *ApplicantProfileCreate {
	apc.mutation.SetReceiveEmails(b)
	return apc
}

// SetCreatedAt sets the "created_at" field.
func (apc *ApplicantProfileCreate) SetCreatedAt(t time.Time) *ApplicantProfileCreate {
	apc.mutation.SetCreatedAt(t)
	return apc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apc *ApplicantProfileCreate) SetNillableCreatedAt(t *time.Time) *ApplicantProfileCreate {
	if t != nil {
		apc.SetCreatedAt(*t)
	}
	return apc
}

// SetUpdatedAt sets the "updated_at" field.
func (apc *ApplicantProfileCreate) SetUpdatedAt(t time.Time) *ApplicantProfileCreate {
	apc.mutation.SetUpdatedAt(t)
	return apc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apc *ApplicantProfileCreate) SetNillableUpdatedAt(t *time.Time) *ApplicantProfileCreate {
	if t != nil {
		apc.SetUpdatedAt(*t)
	}
	return apc
}

// SetDeletedAt sets the "deleted_at" field.
func (apc *ApplicantProfileCreate) SetDeletedAt(t time.Time) *ApplicantProfileCreate {
	apc.mutation.SetDeletedAt(t)
	return apc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apc *ApplicantProfileCreate) SetNillableDeletedAt(t *time.Time) *ApplicantProfileCreate {
	if t != nil {
		apc.SetDeletedAt(*t)
	}
	return apc
}

// SetUserID sets the "user_id" field.
func (apc *ApplicantProfileCreate) SetUserID(u uuid.UUID) *ApplicantProfileCreate {
	apc.mutation.SetUserID(u)
	return apc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (apc *ApplicantProfileCreate) SetNillableUserID(u *uuid.UUID) *ApplicantProfileCreate {
	if u != nil {
		apc.SetUserID(*u)
	}
	return apc
}

// SetExtraSkills sets the "extra_skills" field.
func (apc *ApplicantProfileCreate) SetExtraSkills(s struct{}) *ApplicantProfileCreate {
	apc.mutation.SetExtraSkills(s)
	return apc
}

// SetNillableExtraSkills sets the "extra_skills" field if the given value is not nil.
func (apc *ApplicantProfileCreate) SetNillableExtraSkills(s *struct{}) *ApplicantProfileCreate {
	if s != nil {
		apc.SetExtraSkills(*s)
	}
	return apc
}

// SetID sets the "id" field.
func (apc *ApplicantProfileCreate) SetID(u uuid.UUID) *ApplicantProfileCreate {
	apc.mutation.SetID(u)
	return apc
}

// AddApplicantInterestIDs adds the "applicant_interests" edge to the ApplicantInterest entity by IDs.
func (apc *ApplicantProfileCreate) AddApplicantInterestIDs(ids ...uuid.UUID) *ApplicantProfileCreate {
	apc.mutation.AddApplicantInterestIDs(ids...)
	return apc
}

// AddApplicantInterests adds the "applicant_interests" edges to the ApplicantInterest entity.
func (apc *ApplicantProfileCreate) AddApplicantInterests(a ...*ApplicantInterest) *ApplicantProfileCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apc.AddApplicantInterestIDs(ids...)
}

// AddApplicantProfileSkillIDs adds the "applicant_profile_skills" edge to the ApplicantProfileSkill entity by IDs.
func (apc *ApplicantProfileCreate) AddApplicantProfileSkillIDs(ids ...uuid.UUID) *ApplicantProfileCreate {
	apc.mutation.AddApplicantProfileSkillIDs(ids...)
	return apc
}

// AddApplicantProfileSkills adds the "applicant_profile_skills" edges to the ApplicantProfileSkill entity.
func (apc *ApplicantProfileCreate) AddApplicantProfileSkills(a ...*ApplicantProfileSkill) *ApplicantProfileCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apc.AddApplicantProfileSkillIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (apc *ApplicantProfileCreate) SetUser(u *User) *ApplicantProfileCreate {
	return apc.SetUserID(u.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (apc *ApplicantProfileCreate) AddApplicationIDs(ids ...uuid.UUID) *ApplicantProfileCreate {
	apc.mutation.AddApplicationIDs(ids...)
	return apc
}

// AddApplications adds the "applications" edges to the Application entity.
func (apc *ApplicantProfileCreate) AddApplications(a ...*Application) *ApplicantProfileCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apc.AddApplicationIDs(ids...)
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (apc *ApplicantProfileCreate) AddEducationIDs(ids ...uuid.UUID) *ApplicantProfileCreate {
	apc.mutation.AddEducationIDs(ids...)
	return apc
}

// AddEducations adds the "educations" edges to the Education entity.
func (apc *ApplicantProfileCreate) AddEducations(e ...*Education) *ApplicantProfileCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return apc.AddEducationIDs(ids...)
}

// AddLanguageIDs adds the "languages" edge to the Language entity by IDs.
func (apc *ApplicantProfileCreate) AddLanguageIDs(ids ...uint) *ApplicantProfileCreate {
	apc.mutation.AddLanguageIDs(ids...)
	return apc
}

// AddLanguages adds the "languages" edges to the Language entity.
func (apc *ApplicantProfileCreate) AddLanguages(l ...*Language) *ApplicantProfileCreate {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return apc.AddLanguageIDs(ids...)
}

// AddWorkExperienceIDs adds the "work_experiences" edge to the WorkExperience entity by IDs.
func (apc *ApplicantProfileCreate) AddWorkExperienceIDs(ids ...uuid.UUID) *ApplicantProfileCreate {
	apc.mutation.AddWorkExperienceIDs(ids...)
	return apc
}

// AddWorkExperiences adds the "work_experiences" edges to the WorkExperience entity.
func (apc *ApplicantProfileCreate) AddWorkExperiences(w ...*WorkExperience) *ApplicantProfileCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return apc.AddWorkExperienceIDs(ids...)
}

// Mutation returns the ApplicantProfileMutation object of the builder.
func (apc *ApplicantProfileCreate) Mutation() *ApplicantProfileMutation {
	return apc.mutation
}

// Save creates the ApplicantProfile in the database.
func (apc *ApplicantProfileCreate) Save(ctx context.Context) (*ApplicantProfile, error) {
	return withHooks(ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *ApplicantProfileCreate) SaveX(ctx context.Context) *ApplicantProfile {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *ApplicantProfileCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *ApplicantProfileCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *ApplicantProfileCreate) check() error {
	if _, ok := apc.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New(`ent: missing required field "ApplicantProfile.birthday"`)}
	}
	if _, ok := apc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "ApplicantProfile.gender"`)}
	}
	if _, ok := apc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "ApplicantProfile.phone"`)}
	}
	if _, ok := apc.mutation.Address1(); !ok {
		return &ValidationError{Name: "address1", err: errors.New(`ent: missing required field "ApplicantProfile.address1"`)}
	}
	if _, ok := apc.mutation.Address2(); !ok {
		return &ValidationError{Name: "address2", err: errors.New(`ent: missing required field "ApplicantProfile.address2"`)}
	}
	if _, ok := apc.mutation.InternalComments(); !ok {
		return &ValidationError{Name: "internal_comments", err: errors.New(`ent: missing required field "ApplicantProfile.internal_comments"`)}
	}
	if _, ok := apc.mutation.ReceiveEmails(); !ok {
		return &ValidationError{Name: "receive_emails", err: errors.New(`ent: missing required field "ApplicantProfile.receive_emails"`)}
	}
	return nil
}

func (apc *ApplicantProfileCreate) sqlSave(ctx context.Context) (*ApplicantProfile, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *ApplicantProfileCreate) createSpec() (*ApplicantProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &ApplicantProfile{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(applicantprofile.Table, sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID))
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := apc.mutation.Birthday(); ok {
		_spec.SetField(applicantprofile.FieldBirthday, field.TypeTime, value)
		_node.Birthday = value
	}
	if value, ok := apc.mutation.Gender(); ok {
		_spec.SetField(applicantprofile.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := apc.mutation.Phone(); ok {
		_spec.SetField(applicantprofile.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := apc.mutation.Address1(); ok {
		_spec.SetField(applicantprofile.FieldAddress1, field.TypeString, value)
		_node.Address1 = value
	}
	if value, ok := apc.mutation.Address2(); ok {
		_spec.SetField(applicantprofile.FieldAddress2, field.TypeString, value)
		_node.Address2 = value
	}
	if value, ok := apc.mutation.Cv(); ok {
		_spec.SetField(applicantprofile.FieldCv, field.TypeString, value)
		_node.Cv = value
	}
	if value, ok := apc.mutation.InternalComments(); ok {
		_spec.SetField(applicantprofile.FieldInternalComments, field.TypeString, value)
		_node.InternalComments = value
	}
	if value, ok := apc.mutation.ReceiveEmails(); ok {
		_spec.SetField(applicantprofile.FieldReceiveEmails, field.TypeBool, value)
		_node.ReceiveEmails = value
	}
	if value, ok := apc.mutation.CreatedAt(); ok {
		_spec.SetField(applicantprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := apc.mutation.UpdatedAt(); ok {
		_spec.SetField(applicantprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := apc.mutation.DeletedAt(); ok {
		_spec.SetField(applicantprofile.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := apc.mutation.ExtraSkills(); ok {
		_spec.SetField(applicantprofile.FieldExtraSkills, field.TypeJSON, value)
		_node.ExtraSkills = value
	}
	if nodes := apc.mutation.ApplicantInterestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantInterestsTable,
			Columns: []string{applicantprofile.ApplicantInterestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.ApplicantProfileSkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantProfileSkillsTable,
			Columns: []string{applicantprofile.ApplicantProfileSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantprofile.UserTable,
			Columns: []string{applicantprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicationsTable,
			Columns: []string{applicantprofile.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.EducationsTable,
			Columns: []string{applicantprofile.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.LanguagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.LanguagesTable,
			Columns: []string{applicantprofile.LanguagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.WorkExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.WorkExperiencesTable,
			Columns: []string{applicantprofile.WorkExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicantProfileCreateBulk is the builder for creating many ApplicantProfile entities in bulk.
type ApplicantProfileCreateBulk struct {
	config
	builders []*ApplicantProfileCreate
}

// Save creates the ApplicantProfile entities in the database.
func (apcb *ApplicantProfileCreateBulk) Save(ctx context.Context) ([]*ApplicantProfile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*ApplicantProfile, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicantProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *ApplicantProfileCreateBulk) SaveX(ctx context.Context) []*ApplicantProfile {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *ApplicantProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *ApplicantProfileCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
