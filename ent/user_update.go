// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/applicantprofile"
	"github.com/marianozunino/jobby/ent/interview"
	"github.com/marianozunino/jobby/ent/post"
	"github.com/marianozunino/jobby/ent/predicate"
	"github.com/marianozunino/jobby/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetResetPasswordToken sets the "reset_password_token" field.
func (uu *UserUpdate) SetResetPasswordToken(s string) *UserUpdate {
	uu.mutation.SetResetPasswordToken(s)
	return uu
}

// SetNillableResetPasswordToken sets the "reset_password_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableResetPasswordToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetResetPasswordToken(*s)
	}
	return uu
}

// ClearResetPasswordToken clears the value of the "reset_password_token" field.
func (uu *UserUpdate) ClearResetPasswordToken() *UserUpdate {
	uu.mutation.ClearResetPasswordToken()
	return uu
}

// SetResetPasswordExpires sets the "reset_password_expires" field.
func (uu *UserUpdate) SetResetPasswordExpires(t time.Time) *UserUpdate {
	uu.mutation.SetResetPasswordExpires(t)
	return uu
}

// SetNillableResetPasswordExpires sets the "reset_password_expires" field if the given value is not nil.
func (uu *UserUpdate) SetNillableResetPasswordExpires(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetResetPasswordExpires(*t)
	}
	return uu
}

// ClearResetPasswordExpires clears the value of the "reset_password_expires" field.
func (uu *UserUpdate) ClearResetPasswordExpires() *UserUpdate {
	uu.mutation.ClearResetPasswordExpires()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uu *UserUpdate) ClearCreatedAt() *UserUpdate {
	uu.mutation.ClearCreatedAt()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetFullName sets the "full_name" field.
func (uu *UserUpdate) SetFullName(s string) *UserUpdate {
	uu.mutation.SetFullName(s)
	return uu
}

// SetSalt sets the "salt" field.
func (uu *UserUpdate) SetSalt(s string) *UserUpdate {
	uu.mutation.SetSalt(s)
	return uu
}

// SetExternalID sets the "external_id" field.
func (uu *UserUpdate) SetExternalID(i int32) *UserUpdate {
	uu.mutation.ResetExternalID()
	uu.mutation.SetExternalID(i)
	return uu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExternalID(i *int32) *UserUpdate {
	if i != nil {
		uu.SetExternalID(*i)
	}
	return uu
}

// AddExternalID adds i to the "external_id" field.
func (uu *UserUpdate) AddExternalID(i int32) *UserUpdate {
	uu.mutation.AddExternalID(i)
	return uu
}

// ClearExternalID clears the value of the "external_id" field.
func (uu *UserUpdate) ClearExternalID() *UserUpdate {
	uu.mutation.ClearExternalID()
	return uu
}

// AddApplicantProfileIDs adds the "applicant_profiles" edge to the ApplicantProfile entity by IDs.
func (uu *UserUpdate) AddApplicantProfileIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddApplicantProfileIDs(ids...)
	return uu
}

// AddApplicantProfiles adds the "applicant_profiles" edges to the ApplicantProfile entity.
func (uu *UserUpdate) AddApplicantProfiles(a ...*ApplicantProfile) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddApplicantProfileIDs(ids...)
}

// AddInterviewIDs adds the "interviews" edge to the Interview entity by IDs.
func (uu *UserUpdate) AddInterviewIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddInterviewIDs(ids...)
	return uu
}

// AddInterviews adds the "interviews" edges to the Interview entity.
func (uu *UserUpdate) AddInterviews(i ...*Interview) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInterviewIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddPostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddPostIDs(ids...)
	return uu
}

// AddPosts adds the "posts" edges to the Post entity.
func (uu *UserUpdate) AddPosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPostIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearApplicantProfiles clears all "applicant_profiles" edges to the ApplicantProfile entity.
func (uu *UserUpdate) ClearApplicantProfiles() *UserUpdate {
	uu.mutation.ClearApplicantProfiles()
	return uu
}

// RemoveApplicantProfileIDs removes the "applicant_profiles" edge to ApplicantProfile entities by IDs.
func (uu *UserUpdate) RemoveApplicantProfileIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveApplicantProfileIDs(ids...)
	return uu
}

// RemoveApplicantProfiles removes "applicant_profiles" edges to ApplicantProfile entities.
func (uu *UserUpdate) RemoveApplicantProfiles(a ...*ApplicantProfile) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveApplicantProfileIDs(ids...)
}

// ClearInterviews clears all "interviews" edges to the Interview entity.
func (uu *UserUpdate) ClearInterviews() *UserUpdate {
	uu.mutation.ClearInterviews()
	return uu
}

// RemoveInterviewIDs removes the "interviews" edge to Interview entities by IDs.
func (uu *UserUpdate) RemoveInterviewIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveInterviewIDs(ids...)
	return uu
}

// RemoveInterviews removes "interviews" edges to Interview entities.
func (uu *UserUpdate) RemoveInterviews(i ...*Interview) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInterviewIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uu *UserUpdate) ClearPosts() *UserUpdate {
	uu.mutation.ClearPosts()
	return uu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemovePostIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemovePostIDs(ids...)
	return uu
}

// RemovePosts removes "posts" edges to Post entities.
func (uu *UserUpdate) RemovePosts(p ...*Post) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.ResetPasswordToken(); ok {
		_spec.SetField(user.FieldResetPasswordToken, field.TypeString, value)
	}
	if uu.mutation.ResetPasswordTokenCleared() {
		_spec.ClearField(user.FieldResetPasswordToken, field.TypeString)
	}
	if value, ok := uu.mutation.ResetPasswordExpires(); ok {
		_spec.SetField(user.FieldResetPasswordExpires, field.TypeTime, value)
	}
	if uu.mutation.ResetPasswordExpiresCleared() {
		_spec.ClearField(user.FieldResetPasswordExpires, field.TypeTime)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Salt(); ok {
		_spec.SetField(user.FieldSalt, field.TypeString, value)
	}
	if value, ok := uu.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeInt32, value)
	}
	if value, ok := uu.mutation.AddedExternalID(); ok {
		_spec.AddField(user.FieldExternalID, field.TypeInt32, value)
	}
	if uu.mutation.ExternalIDCleared() {
		_spec.ClearField(user.FieldExternalID, field.TypeInt32)
	}
	if uu.mutation.ApplicantProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantProfilesTable,
			Columns: []string{user.ApplicantProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApplicantProfilesIDs(); len(nodes) > 0 && !uu.mutation.ApplicantProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantProfilesTable,
			Columns: []string{user.ApplicantProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApplicantProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantProfilesTable,
			Columns: []string{user.ApplicantProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InterviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InterviewsTable,
			Columns: []string{user.InterviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInterviewsIDs(); len(nodes) > 0 && !uu.mutation.InterviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InterviewsTable,
			Columns: []string{user.InterviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InterviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InterviewsTable,
			Columns: []string{user.InterviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetResetPasswordToken sets the "reset_password_token" field.
func (uuo *UserUpdateOne) SetResetPasswordToken(s string) *UserUpdateOne {
	uuo.mutation.SetResetPasswordToken(s)
	return uuo
}

// SetNillableResetPasswordToken sets the "reset_password_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableResetPasswordToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetResetPasswordToken(*s)
	}
	return uuo
}

// ClearResetPasswordToken clears the value of the "reset_password_token" field.
func (uuo *UserUpdateOne) ClearResetPasswordToken() *UserUpdateOne {
	uuo.mutation.ClearResetPasswordToken()
	return uuo
}

// SetResetPasswordExpires sets the "reset_password_expires" field.
func (uuo *UserUpdateOne) SetResetPasswordExpires(t time.Time) *UserUpdateOne {
	uuo.mutation.SetResetPasswordExpires(t)
	return uuo
}

// SetNillableResetPasswordExpires sets the "reset_password_expires" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableResetPasswordExpires(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetResetPasswordExpires(*t)
	}
	return uuo
}

// ClearResetPasswordExpires clears the value of the "reset_password_expires" field.
func (uuo *UserUpdateOne) ClearResetPasswordExpires() *UserUpdateOne {
	uuo.mutation.ClearResetPasswordExpires()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uuo *UserUpdateOne) ClearCreatedAt() *UserUpdateOne {
	uuo.mutation.ClearCreatedAt()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetFullName sets the "full_name" field.
func (uuo *UserUpdateOne) SetFullName(s string) *UserUpdateOne {
	uuo.mutation.SetFullName(s)
	return uuo
}

// SetSalt sets the "salt" field.
func (uuo *UserUpdateOne) SetSalt(s string) *UserUpdateOne {
	uuo.mutation.SetSalt(s)
	return uuo
}

// SetExternalID sets the "external_id" field.
func (uuo *UserUpdateOne) SetExternalID(i int32) *UserUpdateOne {
	uuo.mutation.ResetExternalID()
	uuo.mutation.SetExternalID(i)
	return uuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExternalID(i *int32) *UserUpdateOne {
	if i != nil {
		uuo.SetExternalID(*i)
	}
	return uuo
}

// AddExternalID adds i to the "external_id" field.
func (uuo *UserUpdateOne) AddExternalID(i int32) *UserUpdateOne {
	uuo.mutation.AddExternalID(i)
	return uuo
}

// ClearExternalID clears the value of the "external_id" field.
func (uuo *UserUpdateOne) ClearExternalID() *UserUpdateOne {
	uuo.mutation.ClearExternalID()
	return uuo
}

// AddApplicantProfileIDs adds the "applicant_profiles" edge to the ApplicantProfile entity by IDs.
func (uuo *UserUpdateOne) AddApplicantProfileIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddApplicantProfileIDs(ids...)
	return uuo
}

// AddApplicantProfiles adds the "applicant_profiles" edges to the ApplicantProfile entity.
func (uuo *UserUpdateOne) AddApplicantProfiles(a ...*ApplicantProfile) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddApplicantProfileIDs(ids...)
}

// AddInterviewIDs adds the "interviews" edge to the Interview entity by IDs.
func (uuo *UserUpdateOne) AddInterviewIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddInterviewIDs(ids...)
	return uuo
}

// AddInterviews adds the "interviews" edges to the Interview entity.
func (uuo *UserUpdateOne) AddInterviews(i ...*Interview) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInterviewIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddPostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddPostIDs(ids...)
	return uuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddPosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPostIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearApplicantProfiles clears all "applicant_profiles" edges to the ApplicantProfile entity.
func (uuo *UserUpdateOne) ClearApplicantProfiles() *UserUpdateOne {
	uuo.mutation.ClearApplicantProfiles()
	return uuo
}

// RemoveApplicantProfileIDs removes the "applicant_profiles" edge to ApplicantProfile entities by IDs.
func (uuo *UserUpdateOne) RemoveApplicantProfileIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveApplicantProfileIDs(ids...)
	return uuo
}

// RemoveApplicantProfiles removes "applicant_profiles" edges to ApplicantProfile entities.
func (uuo *UserUpdateOne) RemoveApplicantProfiles(a ...*ApplicantProfile) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveApplicantProfileIDs(ids...)
}

// ClearInterviews clears all "interviews" edges to the Interview entity.
func (uuo *UserUpdateOne) ClearInterviews() *UserUpdateOne {
	uuo.mutation.ClearInterviews()
	return uuo
}

// RemoveInterviewIDs removes the "interviews" edge to Interview entities by IDs.
func (uuo *UserUpdateOne) RemoveInterviewIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveInterviewIDs(ids...)
	return uuo
}

// RemoveInterviews removes "interviews" edges to Interview entities.
func (uuo *UserUpdateOne) RemoveInterviews(i ...*Interview) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInterviewIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearPosts() *UserUpdateOne {
	uuo.mutation.ClearPosts()
	return uuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemovePostIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemovePostIDs(ids...)
	return uuo
}

// RemovePosts removes "posts" edges to Post entities.
func (uuo *UserUpdateOne) RemovePosts(p ...*Post) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.ResetPasswordToken(); ok {
		_spec.SetField(user.FieldResetPasswordToken, field.TypeString, value)
	}
	if uuo.mutation.ResetPasswordTokenCleared() {
		_spec.ClearField(user.FieldResetPasswordToken, field.TypeString)
	}
	if value, ok := uuo.mutation.ResetPasswordExpires(); ok {
		_spec.SetField(user.FieldResetPasswordExpires, field.TypeTime, value)
	}
	if uuo.mutation.ResetPasswordExpiresCleared() {
		_spec.ClearField(user.FieldResetPasswordExpires, field.TypeTime)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Salt(); ok {
		_spec.SetField(user.FieldSalt, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeInt32, value)
	}
	if value, ok := uuo.mutation.AddedExternalID(); ok {
		_spec.AddField(user.FieldExternalID, field.TypeInt32, value)
	}
	if uuo.mutation.ExternalIDCleared() {
		_spec.ClearField(user.FieldExternalID, field.TypeInt32)
	}
	if uuo.mutation.ApplicantProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantProfilesTable,
			Columns: []string{user.ApplicantProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApplicantProfilesIDs(); len(nodes) > 0 && !uuo.mutation.ApplicantProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantProfilesTable,
			Columns: []string{user.ApplicantProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApplicantProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantProfilesTable,
			Columns: []string{user.ApplicantProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InterviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InterviewsTable,
			Columns: []string{user.InterviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInterviewsIDs(); len(nodes) > 0 && !uuo.mutation.InterviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InterviewsTable,
			Columns: []string{user.InterviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InterviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InterviewsTable,
			Columns: []string{user.InterviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
