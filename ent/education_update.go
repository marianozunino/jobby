// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/degreelevel"
	"github.com/marianozunino/cc-backend-go/ent/education"
	"github.com/marianozunino/cc-backend-go/ent/predicate"
)

// EducationUpdate is the builder for updating Education entities.
type EducationUpdate struct {
	config
	hooks    []Hook
	mutation *EducationMutation
}

// Where appends a list predicates to the EducationUpdate builder.
func (eu *EducationUpdate) Where(ps ...predicate.Education) *EducationUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTitle sets the "title" field.
func (eu *EducationUpdate) SetTitle(s string) *EducationUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetInstitution sets the "institution" field.
func (eu *EducationUpdate) SetInstitution(s string) *EducationUpdate {
	eu.mutation.SetInstitution(s)
	return eu
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableInstitution(s *string) *EducationUpdate {
	if s != nil {
		eu.SetInstitution(*s)
	}
	return eu
}

// ClearInstitution clears the value of the "institution" field.
func (eu *EducationUpdate) ClearInstitution() *EducationUpdate {
	eu.mutation.ClearInstitution()
	return eu
}

// SetDateObtained sets the "date_obtained" field.
func (eu *EducationUpdate) SetDateObtained(t time.Time) *EducationUpdate {
	eu.mutation.SetDateObtained(t)
	return eu
}

// SetNillableDateObtained sets the "date_obtained" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableDateObtained(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetDateObtained(*t)
	}
	return eu
}

// ClearDateObtained clears the value of the "date_obtained" field.
func (eu *EducationUpdate) ClearDateObtained() *EducationUpdate {
	eu.mutation.ClearDateObtained()
	return eu
}

// SetDegreeLevelID sets the "degree_level_id" field.
func (eu *EducationUpdate) SetDegreeLevelID(u uuid.UUID) *EducationUpdate {
	eu.mutation.SetDegreeLevelID(u)
	return eu
}

// SetNillableDegreeLevelID sets the "degree_level_id" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableDegreeLevelID(u *uuid.UUID) *EducationUpdate {
	if u != nil {
		eu.SetDegreeLevelID(*u)
	}
	return eu
}

// ClearDegreeLevelID clears the value of the "degree_level_id" field.
func (eu *EducationUpdate) ClearDegreeLevelID() *EducationUpdate {
	eu.mutation.ClearDegreeLevelID()
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EducationUpdate) SetCreatedAt(t time.Time) *EducationUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableCreatedAt(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (eu *EducationUpdate) ClearCreatedAt() *EducationUpdate {
	eu.mutation.ClearCreatedAt()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EducationUpdate) SetUpdatedAt(t time.Time) *EducationUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableUpdatedAt(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EducationUpdate) ClearUpdatedAt() *EducationUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EducationUpdate) SetDeletedAt(t time.Time) *EducationUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableDeletedAt(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EducationUpdate) ClearDeletedAt() *EducationUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetComments sets the "comments" field.
func (eu *EducationUpdate) SetComments(s string) *EducationUpdate {
	eu.mutation.SetComments(s)
	return eu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableComments(s *string) *EducationUpdate {
	if s != nil {
		eu.SetComments(*s)
	}
	return eu
}

// ClearComments clears the value of the "comments" field.
func (eu *EducationUpdate) ClearComments() *EducationUpdate {
	eu.mutation.ClearComments()
	return eu
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (eu *EducationUpdate) SetApplicantProfileID(u uuid.UUID) *EducationUpdate {
	eu.mutation.SetApplicantProfileID(u)
	return eu
}

// SetNillableApplicantProfileID sets the "applicant_profile_id" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableApplicantProfileID(u *uuid.UUID) *EducationUpdate {
	if u != nil {
		eu.SetApplicantProfileID(*u)
	}
	return eu
}

// ClearApplicantProfileID clears the value of the "applicant_profile_id" field.
func (eu *EducationUpdate) ClearApplicantProfileID() *EducationUpdate {
	eu.mutation.ClearApplicantProfileID()
	return eu
}

// SetDegreeLevel sets the "degree_level" edge to the DegreeLevel entity.
func (eu *EducationUpdate) SetDegreeLevel(d *DegreeLevel) *EducationUpdate {
	return eu.SetDegreeLevelID(d.ID)
}

// Mutation returns the EducationMutation object of the builder.
func (eu *EducationUpdate) Mutation() *EducationMutation {
	return eu.mutation
}

// ClearDegreeLevel clears the "degree_level" edge to the DegreeLevel entity.
func (eu *EducationUpdate) ClearDegreeLevel() *EducationUpdate {
	eu.mutation.ClearDegreeLevel()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EducationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EducationUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EducationUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EducationUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EducationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(education.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Institution(); ok {
		_spec.SetField(education.FieldInstitution, field.TypeString, value)
	}
	if eu.mutation.InstitutionCleared() {
		_spec.ClearField(education.FieldInstitution, field.TypeString)
	}
	if value, ok := eu.mutation.DateObtained(); ok {
		_spec.SetField(education.FieldDateObtained, field.TypeTime, value)
	}
	if eu.mutation.DateObtainedCleared() {
		_spec.ClearField(education.FieldDateObtained, field.TypeTime)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(education.FieldCreatedAt, field.TypeTime, value)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(education.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(education.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(education.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(education.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(education.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Comments(); ok {
		_spec.SetField(education.FieldComments, field.TypeString, value)
	}
	if eu.mutation.CommentsCleared() {
		_spec.ClearField(education.FieldComments, field.TypeString)
	}
	if value, ok := eu.mutation.ApplicantProfileID(); ok {
		_spec.SetField(education.FieldApplicantProfileID, field.TypeUUID, value)
	}
	if eu.mutation.ApplicantProfileIDCleared() {
		_spec.ClearField(education.FieldApplicantProfileID, field.TypeUUID)
	}
	if eu.mutation.DegreeLevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.DegreeLevelTable,
			Columns: []string{education.DegreeLevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(degreelevel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DegreeLevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.DegreeLevelTable,
			Columns: []string{education.DegreeLevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(degreelevel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EducationUpdateOne is the builder for updating a single Education entity.
type EducationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationMutation
}

// SetTitle sets the "title" field.
func (euo *EducationUpdateOne) SetTitle(s string) *EducationUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetInstitution sets the "institution" field.
func (euo *EducationUpdateOne) SetInstitution(s string) *EducationUpdateOne {
	euo.mutation.SetInstitution(s)
	return euo
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableInstitution(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetInstitution(*s)
	}
	return euo
}

// ClearInstitution clears the value of the "institution" field.
func (euo *EducationUpdateOne) ClearInstitution() *EducationUpdateOne {
	euo.mutation.ClearInstitution()
	return euo
}

// SetDateObtained sets the "date_obtained" field.
func (euo *EducationUpdateOne) SetDateObtained(t time.Time) *EducationUpdateOne {
	euo.mutation.SetDateObtained(t)
	return euo
}

// SetNillableDateObtained sets the "date_obtained" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableDateObtained(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetDateObtained(*t)
	}
	return euo
}

// ClearDateObtained clears the value of the "date_obtained" field.
func (euo *EducationUpdateOne) ClearDateObtained() *EducationUpdateOne {
	euo.mutation.ClearDateObtained()
	return euo
}

// SetDegreeLevelID sets the "degree_level_id" field.
func (euo *EducationUpdateOne) SetDegreeLevelID(u uuid.UUID) *EducationUpdateOne {
	euo.mutation.SetDegreeLevelID(u)
	return euo
}

// SetNillableDegreeLevelID sets the "degree_level_id" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableDegreeLevelID(u *uuid.UUID) *EducationUpdateOne {
	if u != nil {
		euo.SetDegreeLevelID(*u)
	}
	return euo
}

// ClearDegreeLevelID clears the value of the "degree_level_id" field.
func (euo *EducationUpdateOne) ClearDegreeLevelID() *EducationUpdateOne {
	euo.mutation.ClearDegreeLevelID()
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EducationUpdateOne) SetCreatedAt(t time.Time) *EducationUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableCreatedAt(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (euo *EducationUpdateOne) ClearCreatedAt() *EducationUpdateOne {
	euo.mutation.ClearCreatedAt()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EducationUpdateOne) SetUpdatedAt(t time.Time) *EducationUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableUpdatedAt(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EducationUpdateOne) ClearUpdatedAt() *EducationUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EducationUpdateOne) SetDeletedAt(t time.Time) *EducationUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableDeletedAt(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EducationUpdateOne) ClearDeletedAt() *EducationUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetComments sets the "comments" field.
func (euo *EducationUpdateOne) SetComments(s string) *EducationUpdateOne {
	euo.mutation.SetComments(s)
	return euo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableComments(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetComments(*s)
	}
	return euo
}

// ClearComments clears the value of the "comments" field.
func (euo *EducationUpdateOne) ClearComments() *EducationUpdateOne {
	euo.mutation.ClearComments()
	return euo
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (euo *EducationUpdateOne) SetApplicantProfileID(u uuid.UUID) *EducationUpdateOne {
	euo.mutation.SetApplicantProfileID(u)
	return euo
}

// SetNillableApplicantProfileID sets the "applicant_profile_id" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableApplicantProfileID(u *uuid.UUID) *EducationUpdateOne {
	if u != nil {
		euo.SetApplicantProfileID(*u)
	}
	return euo
}

// ClearApplicantProfileID clears the value of the "applicant_profile_id" field.
func (euo *EducationUpdateOne) ClearApplicantProfileID() *EducationUpdateOne {
	euo.mutation.ClearApplicantProfileID()
	return euo
}

// SetDegreeLevel sets the "degree_level" edge to the DegreeLevel entity.
func (euo *EducationUpdateOne) SetDegreeLevel(d *DegreeLevel) *EducationUpdateOne {
	return euo.SetDegreeLevelID(d.ID)
}

// Mutation returns the EducationMutation object of the builder.
func (euo *EducationUpdateOne) Mutation() *EducationMutation {
	return euo.mutation
}

// ClearDegreeLevel clears the "degree_level" edge to the DegreeLevel entity.
func (euo *EducationUpdateOne) ClearDegreeLevel() *EducationUpdateOne {
	euo.mutation.ClearDegreeLevel()
	return euo
}

// Where appends a list predicates to the EducationUpdate builder.
func (euo *EducationUpdateOne) Where(ps ...predicate.Education) *EducationUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EducationUpdateOne) Select(field string, fields ...string) *EducationUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Education entity.
func (euo *EducationUpdateOne) Save(ctx context.Context) (*Education, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EducationUpdateOne) SaveX(ctx context.Context) *Education {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EducationUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EducationUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EducationUpdateOne) sqlSave(ctx context.Context) (_node *Education, err error) {
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Education.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, education.FieldID)
		for _, f := range fields {
			if !education.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != education.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(education.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Institution(); ok {
		_spec.SetField(education.FieldInstitution, field.TypeString, value)
	}
	if euo.mutation.InstitutionCleared() {
		_spec.ClearField(education.FieldInstitution, field.TypeString)
	}
	if value, ok := euo.mutation.DateObtained(); ok {
		_spec.SetField(education.FieldDateObtained, field.TypeTime, value)
	}
	if euo.mutation.DateObtainedCleared() {
		_spec.ClearField(education.FieldDateObtained, field.TypeTime)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(education.FieldCreatedAt, field.TypeTime, value)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(education.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(education.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(education.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(education.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(education.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Comments(); ok {
		_spec.SetField(education.FieldComments, field.TypeString, value)
	}
	if euo.mutation.CommentsCleared() {
		_spec.ClearField(education.FieldComments, field.TypeString)
	}
	if value, ok := euo.mutation.ApplicantProfileID(); ok {
		_spec.SetField(education.FieldApplicantProfileID, field.TypeUUID, value)
	}
	if euo.mutation.ApplicantProfileIDCleared() {
		_spec.ClearField(education.FieldApplicantProfileID, field.TypeUUID)
	}
	if euo.mutation.DegreeLevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.DegreeLevelTable,
			Columns: []string{education.DegreeLevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(degreelevel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DegreeLevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.DegreeLevelTable,
			Columns: []string{education.DegreeLevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(degreelevel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Education{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
