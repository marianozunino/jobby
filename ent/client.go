// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/marianozunino/cc-backend-go/ent/applicantinterest"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofile"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofileskill"
	"github.com/marianozunino/cc-backend-go/ent/application"
	"github.com/marianozunino/cc-backend-go/ent/category"
	"github.com/marianozunino/cc-backend-go/ent/contactusmessage"
	"github.com/marianozunino/cc-backend-go/ent/degreelevel"
	"github.com/marianozunino/cc-backend-go/ent/education"
	"github.com/marianozunino/cc-backend-go/ent/interview"
	"github.com/marianozunino/cc-backend-go/ent/joboffer"
	"github.com/marianozunino/cc-backend-go/ent/joboffercategory"
	"github.com/marianozunino/cc-backend-go/ent/language"
	"github.com/marianozunino/cc-backend-go/ent/post"
	"github.com/marianozunino/cc-backend-go/ent/postcategory"
	"github.com/marianozunino/cc-backend-go/ent/skill"
	"github.com/marianozunino/cc-backend-go/ent/status"
	"github.com/marianozunino/cc-backend-go/ent/user"
	"github.com/marianozunino/cc-backend-go/ent/workexperience"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApplicantInterest is the client for interacting with the ApplicantInterest builders.
	ApplicantInterest *ApplicantInterestClient
	// ApplicantProfile is the client for interacting with the ApplicantProfile builders.
	ApplicantProfile *ApplicantProfileClient
	// ApplicantProfileSkill is the client for interacting with the ApplicantProfileSkill builders.
	ApplicantProfileSkill *ApplicantProfileSkillClient
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// ContactUsMessage is the client for interacting with the ContactUsMessage builders.
	ContactUsMessage *ContactUsMessageClient
	// DegreeLevel is the client for interacting with the DegreeLevel builders.
	DegreeLevel *DegreeLevelClient
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// Interview is the client for interacting with the Interview builders.
	Interview *InterviewClient
	// JobOffer is the client for interacting with the JobOffer builders.
	JobOffer *JobOfferClient
	// JobOfferCategory is the client for interacting with the JobOfferCategory builders.
	JobOfferCategory *JobOfferCategoryClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// Post is the client for interacting with the Post builders.
	Post *PostClient
	// PostCategory is the client for interacting with the PostCategory builders.
	PostCategory *PostCategoryClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// Status is the client for interacting with the Status builders.
	Status *StatusClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WorkExperience is the client for interacting with the WorkExperience builders.
	WorkExperience *WorkExperienceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApplicantInterest = NewApplicantInterestClient(c.config)
	c.ApplicantProfile = NewApplicantProfileClient(c.config)
	c.ApplicantProfileSkill = NewApplicantProfileSkillClient(c.config)
	c.Application = NewApplicationClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.ContactUsMessage = NewContactUsMessageClient(c.config)
	c.DegreeLevel = NewDegreeLevelClient(c.config)
	c.Education = NewEducationClient(c.config)
	c.Interview = NewInterviewClient(c.config)
	c.JobOffer = NewJobOfferClient(c.config)
	c.JobOfferCategory = NewJobOfferCategoryClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.Post = NewPostClient(c.config)
	c.PostCategory = NewPostCategoryClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.Status = NewStatusClient(c.config)
	c.User = NewUserClient(c.config)
	c.WorkExperience = NewWorkExperienceClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ApplicantInterest:     NewApplicantInterestClient(cfg),
		ApplicantProfile:      NewApplicantProfileClient(cfg),
		ApplicantProfileSkill: NewApplicantProfileSkillClient(cfg),
		Application:           NewApplicationClient(cfg),
		Category:              NewCategoryClient(cfg),
		ContactUsMessage:      NewContactUsMessageClient(cfg),
		DegreeLevel:           NewDegreeLevelClient(cfg),
		Education:             NewEducationClient(cfg),
		Interview:             NewInterviewClient(cfg),
		JobOffer:              NewJobOfferClient(cfg),
		JobOfferCategory:      NewJobOfferCategoryClient(cfg),
		Language:              NewLanguageClient(cfg),
		Post:                  NewPostClient(cfg),
		PostCategory:          NewPostCategoryClient(cfg),
		Skill:                 NewSkillClient(cfg),
		Status:                NewStatusClient(cfg),
		User:                  NewUserClient(cfg),
		WorkExperience:        NewWorkExperienceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ApplicantInterest:     NewApplicantInterestClient(cfg),
		ApplicantProfile:      NewApplicantProfileClient(cfg),
		ApplicantProfileSkill: NewApplicantProfileSkillClient(cfg),
		Application:           NewApplicationClient(cfg),
		Category:              NewCategoryClient(cfg),
		ContactUsMessage:      NewContactUsMessageClient(cfg),
		DegreeLevel:           NewDegreeLevelClient(cfg),
		Education:             NewEducationClient(cfg),
		Interview:             NewInterviewClient(cfg),
		JobOffer:              NewJobOfferClient(cfg),
		JobOfferCategory:      NewJobOfferCategoryClient(cfg),
		Language:              NewLanguageClient(cfg),
		Post:                  NewPostClient(cfg),
		PostCategory:          NewPostCategoryClient(cfg),
		Skill:                 NewSkillClient(cfg),
		Status:                NewStatusClient(cfg),
		User:                  NewUserClient(cfg),
		WorkExperience:        NewWorkExperienceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApplicantInterest.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ApplicantInterest, c.ApplicantProfile, c.ApplicantProfileSkill, c.Application,
		c.Category, c.ContactUsMessage, c.DegreeLevel, c.Education, c.Interview,
		c.JobOffer, c.JobOfferCategory, c.Language, c.Post, c.PostCategory, c.Skill,
		c.Status, c.User, c.WorkExperience,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ApplicantInterest, c.ApplicantProfile, c.ApplicantProfileSkill, c.Application,
		c.Category, c.ContactUsMessage, c.DegreeLevel, c.Education, c.Interview,
		c.JobOffer, c.JobOfferCategory, c.Language, c.Post, c.PostCategory, c.Skill,
		c.Status, c.User, c.WorkExperience,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApplicantInterestMutation:
		return c.ApplicantInterest.mutate(ctx, m)
	case *ApplicantProfileMutation:
		return c.ApplicantProfile.mutate(ctx, m)
	case *ApplicantProfileSkillMutation:
		return c.ApplicantProfileSkill.mutate(ctx, m)
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *CategoryMutation:
		return c.Category.mutate(ctx, m)
	case *ContactUsMessageMutation:
		return c.ContactUsMessage.mutate(ctx, m)
	case *DegreeLevelMutation:
		return c.DegreeLevel.mutate(ctx, m)
	case *EducationMutation:
		return c.Education.mutate(ctx, m)
	case *InterviewMutation:
		return c.Interview.mutate(ctx, m)
	case *JobOfferMutation:
		return c.JobOffer.mutate(ctx, m)
	case *JobOfferCategoryMutation:
		return c.JobOfferCategory.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *PostMutation:
		return c.Post.mutate(ctx, m)
	case *PostCategoryMutation:
		return c.PostCategory.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	case *StatusMutation:
		return c.Status.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WorkExperienceMutation:
		return c.WorkExperience.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApplicantInterestClient is a client for the ApplicantInterest schema.
type ApplicantInterestClient struct {
	config
}

// NewApplicantInterestClient returns a client for the ApplicantInterest from the given config.
func NewApplicantInterestClient(c config) *ApplicantInterestClient {
	return &ApplicantInterestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applicantinterest.Hooks(f(g(h())))`.
func (c *ApplicantInterestClient) Use(hooks ...Hook) {
	c.hooks.ApplicantInterest = append(c.hooks.ApplicantInterest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applicantinterest.Intercept(f(g(h())))`.
func (c *ApplicantInterestClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplicantInterest = append(c.inters.ApplicantInterest, interceptors...)
}

// Create returns a builder for creating a ApplicantInterest entity.
func (c *ApplicantInterestClient) Create() *ApplicantInterestCreate {
	mutation := newApplicantInterestMutation(c.config, OpCreate)
	return &ApplicantInterestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplicantInterest entities.
func (c *ApplicantInterestClient) CreateBulk(builders ...*ApplicantInterestCreate) *ApplicantInterestCreateBulk {
	return &ApplicantInterestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplicantInterest.
func (c *ApplicantInterestClient) Update() *ApplicantInterestUpdate {
	mutation := newApplicantInterestMutation(c.config, OpUpdate)
	return &ApplicantInterestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicantInterestClient) UpdateOne(ai *ApplicantInterest) *ApplicantInterestUpdateOne {
	mutation := newApplicantInterestMutation(c.config, OpUpdateOne, withApplicantInterest(ai))
	return &ApplicantInterestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicantInterestClient) UpdateOneID(id uuid.UUID) *ApplicantInterestUpdateOne {
	mutation := newApplicantInterestMutation(c.config, OpUpdateOne, withApplicantInterestID(id))
	return &ApplicantInterestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplicantInterest.
func (c *ApplicantInterestClient) Delete() *ApplicantInterestDelete {
	mutation := newApplicantInterestMutation(c.config, OpDelete)
	return &ApplicantInterestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicantInterestClient) DeleteOne(ai *ApplicantInterest) *ApplicantInterestDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicantInterestClient) DeleteOneID(id uuid.UUID) *ApplicantInterestDeleteOne {
	builder := c.Delete().Where(applicantinterest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicantInterestDeleteOne{builder}
}

// Query returns a query builder for ApplicantInterest.
func (c *ApplicantInterestClient) Query() *ApplicantInterestQuery {
	return &ApplicantInterestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplicantInterest},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplicantInterest entity by its id.
func (c *ApplicantInterestClient) Get(ctx context.Context, id uuid.UUID) (*ApplicantInterest, error) {
	return c.Query().Where(applicantinterest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicantInterestClient) GetX(ctx context.Context, id uuid.UUID) *ApplicantInterest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantProfile queries the applicant_profile edge of a ApplicantInterest.
func (c *ApplicantInterestClient) QueryApplicantProfile(ai *ApplicantInterest) *ApplicantProfileQuery {
	query := (&ApplicantProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantinterest.Table, applicantinterest.FieldID, id),
			sqlgraph.To(applicantprofile.Table, applicantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicantinterest.ApplicantProfileTable, applicantinterest.ApplicantProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a ApplicantInterest.
func (c *ApplicantInterestClient) QueryCategory(ai *ApplicantInterest) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantinterest.Table, applicantinterest.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicantinterest.CategoryTable, applicantinterest.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicantInterestClient) Hooks() []Hook {
	return c.hooks.ApplicantInterest
}

// Interceptors returns the client interceptors.
func (c *ApplicantInterestClient) Interceptors() []Interceptor {
	return c.inters.ApplicantInterest
}

func (c *ApplicantInterestClient) mutate(ctx context.Context, m *ApplicantInterestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicantInterestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicantInterestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicantInterestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicantInterestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApplicantInterest mutation op: %q", m.Op())
	}
}

// ApplicantProfileClient is a client for the ApplicantProfile schema.
type ApplicantProfileClient struct {
	config
}

// NewApplicantProfileClient returns a client for the ApplicantProfile from the given config.
func NewApplicantProfileClient(c config) *ApplicantProfileClient {
	return &ApplicantProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applicantprofile.Hooks(f(g(h())))`.
func (c *ApplicantProfileClient) Use(hooks ...Hook) {
	c.hooks.ApplicantProfile = append(c.hooks.ApplicantProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applicantprofile.Intercept(f(g(h())))`.
func (c *ApplicantProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplicantProfile = append(c.inters.ApplicantProfile, interceptors...)
}

// Create returns a builder for creating a ApplicantProfile entity.
func (c *ApplicantProfileClient) Create() *ApplicantProfileCreate {
	mutation := newApplicantProfileMutation(c.config, OpCreate)
	return &ApplicantProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplicantProfile entities.
func (c *ApplicantProfileClient) CreateBulk(builders ...*ApplicantProfileCreate) *ApplicantProfileCreateBulk {
	return &ApplicantProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplicantProfile.
func (c *ApplicantProfileClient) Update() *ApplicantProfileUpdate {
	mutation := newApplicantProfileMutation(c.config, OpUpdate)
	return &ApplicantProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicantProfileClient) UpdateOne(ap *ApplicantProfile) *ApplicantProfileUpdateOne {
	mutation := newApplicantProfileMutation(c.config, OpUpdateOne, withApplicantProfile(ap))
	return &ApplicantProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicantProfileClient) UpdateOneID(id uuid.UUID) *ApplicantProfileUpdateOne {
	mutation := newApplicantProfileMutation(c.config, OpUpdateOne, withApplicantProfileID(id))
	return &ApplicantProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplicantProfile.
func (c *ApplicantProfileClient) Delete() *ApplicantProfileDelete {
	mutation := newApplicantProfileMutation(c.config, OpDelete)
	return &ApplicantProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicantProfileClient) DeleteOne(ap *ApplicantProfile) *ApplicantProfileDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicantProfileClient) DeleteOneID(id uuid.UUID) *ApplicantProfileDeleteOne {
	builder := c.Delete().Where(applicantprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicantProfileDeleteOne{builder}
}

// Query returns a query builder for ApplicantProfile.
func (c *ApplicantProfileClient) Query() *ApplicantProfileQuery {
	return &ApplicantProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplicantProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplicantProfile entity by its id.
func (c *ApplicantProfileClient) Get(ctx context.Context, id uuid.UUID) (*ApplicantProfile, error) {
	return c.Query().Where(applicantprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicantProfileClient) GetX(ctx context.Context, id uuid.UUID) *ApplicantProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantInterests queries the applicant_interests edge of a ApplicantProfile.
func (c *ApplicantProfileClient) QueryApplicantInterests(ap *ApplicantProfile) *ApplicantInterestQuery {
	query := (&ApplicantInterestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofile.Table, applicantprofile.FieldID, id),
			sqlgraph.To(applicantinterest.Table, applicantinterest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, applicantprofile.ApplicantInterestsTable, applicantprofile.ApplicantInterestsColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplicantProfileSkills queries the applicant_profile_skills edge of a ApplicantProfile.
func (c *ApplicantProfileClient) QueryApplicantProfileSkills(ap *ApplicantProfile) *ApplicantProfileSkillQuery {
	query := (&ApplicantProfileSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofile.Table, applicantprofile.FieldID, id),
			sqlgraph.To(applicantprofileskill.Table, applicantprofileskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, applicantprofile.ApplicantProfileSkillsTable, applicantprofile.ApplicantProfileSkillsColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ApplicantProfile.
func (c *ApplicantProfileClient) QueryUser(ap *ApplicantProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofile.Table, applicantprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicantprofile.UserTable, applicantprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplications queries the applications edge of a ApplicantProfile.
func (c *ApplicantProfileClient) QueryApplications(ap *ApplicantProfile) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofile.Table, applicantprofile.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, applicantprofile.ApplicationsTable, applicantprofile.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducations queries the educations edge of a ApplicantProfile.
func (c *ApplicantProfileClient) QueryEducations(ap *ApplicantProfile) *EducationQuery {
	query := (&EducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofile.Table, applicantprofile.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, applicantprofile.EducationsTable, applicantprofile.EducationsColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguages queries the languages edge of a ApplicantProfile.
func (c *ApplicantProfileClient) QueryLanguages(ap *ApplicantProfile) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofile.Table, applicantprofile.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, applicantprofile.LanguagesTable, applicantprofile.LanguagesColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkExperiences queries the work_experiences edge of a ApplicantProfile.
func (c *ApplicantProfileClient) QueryWorkExperiences(ap *ApplicantProfile) *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofile.Table, applicantprofile.FieldID, id),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, applicantprofile.WorkExperiencesTable, applicantprofile.WorkExperiencesColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicantProfileClient) Hooks() []Hook {
	return c.hooks.ApplicantProfile
}

// Interceptors returns the client interceptors.
func (c *ApplicantProfileClient) Interceptors() []Interceptor {
	return c.inters.ApplicantProfile
}

func (c *ApplicantProfileClient) mutate(ctx context.Context, m *ApplicantProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicantProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicantProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicantProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicantProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApplicantProfile mutation op: %q", m.Op())
	}
}

// ApplicantProfileSkillClient is a client for the ApplicantProfileSkill schema.
type ApplicantProfileSkillClient struct {
	config
}

// NewApplicantProfileSkillClient returns a client for the ApplicantProfileSkill from the given config.
func NewApplicantProfileSkillClient(c config) *ApplicantProfileSkillClient {
	return &ApplicantProfileSkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applicantprofileskill.Hooks(f(g(h())))`.
func (c *ApplicantProfileSkillClient) Use(hooks ...Hook) {
	c.hooks.ApplicantProfileSkill = append(c.hooks.ApplicantProfileSkill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applicantprofileskill.Intercept(f(g(h())))`.
func (c *ApplicantProfileSkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplicantProfileSkill = append(c.inters.ApplicantProfileSkill, interceptors...)
}

// Create returns a builder for creating a ApplicantProfileSkill entity.
func (c *ApplicantProfileSkillClient) Create() *ApplicantProfileSkillCreate {
	mutation := newApplicantProfileSkillMutation(c.config, OpCreate)
	return &ApplicantProfileSkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplicantProfileSkill entities.
func (c *ApplicantProfileSkillClient) CreateBulk(builders ...*ApplicantProfileSkillCreate) *ApplicantProfileSkillCreateBulk {
	return &ApplicantProfileSkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplicantProfileSkill.
func (c *ApplicantProfileSkillClient) Update() *ApplicantProfileSkillUpdate {
	mutation := newApplicantProfileSkillMutation(c.config, OpUpdate)
	return &ApplicantProfileSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicantProfileSkillClient) UpdateOne(aps *ApplicantProfileSkill) *ApplicantProfileSkillUpdateOne {
	mutation := newApplicantProfileSkillMutation(c.config, OpUpdateOne, withApplicantProfileSkill(aps))
	return &ApplicantProfileSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicantProfileSkillClient) UpdateOneID(id uuid.UUID) *ApplicantProfileSkillUpdateOne {
	mutation := newApplicantProfileSkillMutation(c.config, OpUpdateOne, withApplicantProfileSkillID(id))
	return &ApplicantProfileSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplicantProfileSkill.
func (c *ApplicantProfileSkillClient) Delete() *ApplicantProfileSkillDelete {
	mutation := newApplicantProfileSkillMutation(c.config, OpDelete)
	return &ApplicantProfileSkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicantProfileSkillClient) DeleteOne(aps *ApplicantProfileSkill) *ApplicantProfileSkillDeleteOne {
	return c.DeleteOneID(aps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicantProfileSkillClient) DeleteOneID(id uuid.UUID) *ApplicantProfileSkillDeleteOne {
	builder := c.Delete().Where(applicantprofileskill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicantProfileSkillDeleteOne{builder}
}

// Query returns a query builder for ApplicantProfileSkill.
func (c *ApplicantProfileSkillClient) Query() *ApplicantProfileSkillQuery {
	return &ApplicantProfileSkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplicantProfileSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplicantProfileSkill entity by its id.
func (c *ApplicantProfileSkillClient) Get(ctx context.Context, id uuid.UUID) (*ApplicantProfileSkill, error) {
	return c.Query().Where(applicantprofileskill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicantProfileSkillClient) GetX(ctx context.Context, id uuid.UUID) *ApplicantProfileSkill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantProfile queries the applicant_profile edge of a ApplicantProfileSkill.
func (c *ApplicantProfileSkillClient) QueryApplicantProfile(aps *ApplicantProfileSkill) *ApplicantProfileQuery {
	query := (&ApplicantProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofileskill.Table, applicantprofileskill.FieldID, id),
			sqlgraph.To(applicantprofile.Table, applicantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicantprofileskill.ApplicantProfileTable, applicantprofileskill.ApplicantProfileColumn),
		)
		fromV = sqlgraph.Neighbors(aps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkill queries the skill edge of a ApplicantProfileSkill.
func (c *ApplicantProfileSkillClient) QuerySkill(aps *ApplicantProfileSkill) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofileskill.Table, applicantprofileskill.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicantprofileskill.SkillTable, applicantprofileskill.SkillColumn),
		)
		fromV = sqlgraph.Neighbors(aps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicantProfileSkillClient) Hooks() []Hook {
	return c.hooks.ApplicantProfileSkill
}

// Interceptors returns the client interceptors.
func (c *ApplicantProfileSkillClient) Interceptors() []Interceptor {
	return c.inters.ApplicantProfileSkill
}

func (c *ApplicantProfileSkillClient) mutate(ctx context.Context, m *ApplicantProfileSkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicantProfileSkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicantProfileSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicantProfileSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicantProfileSkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApplicantProfileSkill mutation op: %q", m.Op())
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id uuid.UUID) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id uuid.UUID) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id uuid.UUID) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id uuid.UUID) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantProfile queries the applicant_profile edge of a Application.
func (c *ApplicationClient) QueryApplicantProfile(a *Application) *ApplicantProfileQuery {
	query := (&ApplicantProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(applicantprofile.Table, applicantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.ApplicantProfileTable, application.ApplicantProfileColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobOffer queries the job_offer edge of a Application.
func (c *ApplicationClient) QueryJobOffer(a *Application) *JobOfferQuery {
	query := (&JobOfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(joboffer.Table, joboffer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.JobOfferTable, application.JobOfferColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviews queries the interviews edge of a Application.
func (c *ApplicationClient) QueryInterviews(a *Application) *InterviewQuery {
	query := (&InterviewClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(interview.Table, interview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, application.InterviewsTable, application.InterviewsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Application mutation op: %q", m.Op())
	}
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category.Intercept(f(g(h())))`.
func (c *CategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category = append(c.inters.Category, interceptors...)
}

// Create returns a builder for creating a Category entity.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id uuid.UUID) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryClient) DeleteOneID(id uuid.UUID) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id uuid.UUID) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id uuid.UUID) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantInterests queries the applicant_interests edge of a Category.
func (c *CategoryClient) QueryApplicantInterests(ca *Category) *ApplicantInterestQuery {
	query := (&ApplicantInterestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(applicantinterest.Table, applicantinterest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.ApplicantInterestsTable, category.ApplicantInterestsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildCategories queries the child_categories edge of a Category.
func (c *CategoryClient) QueryChildCategories(ca *Category) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.ChildCategoriesTable, category.ChildCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentCategory queries the parent_category edge of a Category.
func (c *CategoryClient) QueryParentCategory(ca *Category) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.ParentCategoryTable, category.ParentCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobOfferCategories queries the job_offer_categories edge of a Category.
func (c *CategoryClient) QueryJobOfferCategories(ca *Category) *JobOfferCategoryQuery {
	query := (&JobOfferCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(joboffercategory.Table, joboffercategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.JobOfferCategoriesTable, category.JobOfferCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// Interceptors returns the client interceptors.
func (c *CategoryClient) Interceptors() []Interceptor {
	return c.inters.Category
}

func (c *CategoryClient) mutate(ctx context.Context, m *CategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category mutation op: %q", m.Op())
	}
}

// ContactUsMessageClient is a client for the ContactUsMessage schema.
type ContactUsMessageClient struct {
	config
}

// NewContactUsMessageClient returns a client for the ContactUsMessage from the given config.
func NewContactUsMessageClient(c config) *ContactUsMessageClient {
	return &ContactUsMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contactusmessage.Hooks(f(g(h())))`.
func (c *ContactUsMessageClient) Use(hooks ...Hook) {
	c.hooks.ContactUsMessage = append(c.hooks.ContactUsMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contactusmessage.Intercept(f(g(h())))`.
func (c *ContactUsMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ContactUsMessage = append(c.inters.ContactUsMessage, interceptors...)
}

// Create returns a builder for creating a ContactUsMessage entity.
func (c *ContactUsMessageClient) Create() *ContactUsMessageCreate {
	mutation := newContactUsMessageMutation(c.config, OpCreate)
	return &ContactUsMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContactUsMessage entities.
func (c *ContactUsMessageClient) CreateBulk(builders ...*ContactUsMessageCreate) *ContactUsMessageCreateBulk {
	return &ContactUsMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContactUsMessage.
func (c *ContactUsMessageClient) Update() *ContactUsMessageUpdate {
	mutation := newContactUsMessageMutation(c.config, OpUpdate)
	return &ContactUsMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactUsMessageClient) UpdateOne(cum *ContactUsMessage) *ContactUsMessageUpdateOne {
	mutation := newContactUsMessageMutation(c.config, OpUpdateOne, withContactUsMessage(cum))
	return &ContactUsMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactUsMessageClient) UpdateOneID(id uuid.UUID) *ContactUsMessageUpdateOne {
	mutation := newContactUsMessageMutation(c.config, OpUpdateOne, withContactUsMessageID(id))
	return &ContactUsMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContactUsMessage.
func (c *ContactUsMessageClient) Delete() *ContactUsMessageDelete {
	mutation := newContactUsMessageMutation(c.config, OpDelete)
	return &ContactUsMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContactUsMessageClient) DeleteOne(cum *ContactUsMessage) *ContactUsMessageDeleteOne {
	return c.DeleteOneID(cum.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContactUsMessageClient) DeleteOneID(id uuid.UUID) *ContactUsMessageDeleteOne {
	builder := c.Delete().Where(contactusmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactUsMessageDeleteOne{builder}
}

// Query returns a query builder for ContactUsMessage.
func (c *ContactUsMessageClient) Query() *ContactUsMessageQuery {
	return &ContactUsMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContactUsMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a ContactUsMessage entity by its id.
func (c *ContactUsMessageClient) Get(ctx context.Context, id uuid.UUID) (*ContactUsMessage, error) {
	return c.Query().Where(contactusmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactUsMessageClient) GetX(ctx context.Context, id uuid.UUID) *ContactUsMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContactUsMessageClient) Hooks() []Hook {
	return c.hooks.ContactUsMessage
}

// Interceptors returns the client interceptors.
func (c *ContactUsMessageClient) Interceptors() []Interceptor {
	return c.inters.ContactUsMessage
}

func (c *ContactUsMessageClient) mutate(ctx context.Context, m *ContactUsMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContactUsMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContactUsMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContactUsMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContactUsMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ContactUsMessage mutation op: %q", m.Op())
	}
}

// DegreeLevelClient is a client for the DegreeLevel schema.
type DegreeLevelClient struct {
	config
}

// NewDegreeLevelClient returns a client for the DegreeLevel from the given config.
func NewDegreeLevelClient(c config) *DegreeLevelClient {
	return &DegreeLevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `degreelevel.Hooks(f(g(h())))`.
func (c *DegreeLevelClient) Use(hooks ...Hook) {
	c.hooks.DegreeLevel = append(c.hooks.DegreeLevel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `degreelevel.Intercept(f(g(h())))`.
func (c *DegreeLevelClient) Intercept(interceptors ...Interceptor) {
	c.inters.DegreeLevel = append(c.inters.DegreeLevel, interceptors...)
}

// Create returns a builder for creating a DegreeLevel entity.
func (c *DegreeLevelClient) Create() *DegreeLevelCreate {
	mutation := newDegreeLevelMutation(c.config, OpCreate)
	return &DegreeLevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DegreeLevel entities.
func (c *DegreeLevelClient) CreateBulk(builders ...*DegreeLevelCreate) *DegreeLevelCreateBulk {
	return &DegreeLevelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DegreeLevel.
func (c *DegreeLevelClient) Update() *DegreeLevelUpdate {
	mutation := newDegreeLevelMutation(c.config, OpUpdate)
	return &DegreeLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DegreeLevelClient) UpdateOne(dl *DegreeLevel) *DegreeLevelUpdateOne {
	mutation := newDegreeLevelMutation(c.config, OpUpdateOne, withDegreeLevel(dl))
	return &DegreeLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DegreeLevelClient) UpdateOneID(id uuid.UUID) *DegreeLevelUpdateOne {
	mutation := newDegreeLevelMutation(c.config, OpUpdateOne, withDegreeLevelID(id))
	return &DegreeLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DegreeLevel.
func (c *DegreeLevelClient) Delete() *DegreeLevelDelete {
	mutation := newDegreeLevelMutation(c.config, OpDelete)
	return &DegreeLevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DegreeLevelClient) DeleteOne(dl *DegreeLevel) *DegreeLevelDeleteOne {
	return c.DeleteOneID(dl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DegreeLevelClient) DeleteOneID(id uuid.UUID) *DegreeLevelDeleteOne {
	builder := c.Delete().Where(degreelevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DegreeLevelDeleteOne{builder}
}

// Query returns a query builder for DegreeLevel.
func (c *DegreeLevelClient) Query() *DegreeLevelQuery {
	return &DegreeLevelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDegreeLevel},
		inters: c.Interceptors(),
	}
}

// Get returns a DegreeLevel entity by its id.
func (c *DegreeLevelClient) Get(ctx context.Context, id uuid.UUID) (*DegreeLevel, error) {
	return c.Query().Where(degreelevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DegreeLevelClient) GetX(ctx context.Context, id uuid.UUID) *DegreeLevel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEducations queries the educations edge of a DegreeLevel.
func (c *DegreeLevelClient) QueryEducations(dl *DegreeLevel) *EducationQuery {
	query := (&EducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(degreelevel.Table, degreelevel.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, degreelevel.EducationsTable, degreelevel.EducationsColumn),
		)
		fromV = sqlgraph.Neighbors(dl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DegreeLevelClient) Hooks() []Hook {
	return c.hooks.DegreeLevel
}

// Interceptors returns the client interceptors.
func (c *DegreeLevelClient) Interceptors() []Interceptor {
	return c.inters.DegreeLevel
}

func (c *DegreeLevelClient) mutate(ctx context.Context, m *DegreeLevelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DegreeLevelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DegreeLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DegreeLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DegreeLevelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DegreeLevel mutation op: %q", m.Op())
	}
}

// EducationClient is a client for the Education schema.
type EducationClient struct {
	config
}

// NewEducationClient returns a client for the Education from the given config.
func NewEducationClient(c config) *EducationClient {
	return &EducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `education.Hooks(f(g(h())))`.
func (c *EducationClient) Use(hooks ...Hook) {
	c.hooks.Education = append(c.hooks.Education, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `education.Intercept(f(g(h())))`.
func (c *EducationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Education = append(c.inters.Education, interceptors...)
}

// Create returns a builder for creating a Education entity.
func (c *EducationClient) Create() *EducationCreate {
	mutation := newEducationMutation(c.config, OpCreate)
	return &EducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Education entities.
func (c *EducationClient) CreateBulk(builders ...*EducationCreate) *EducationCreateBulk {
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Education.
func (c *EducationClient) Update() *EducationUpdate {
	mutation := newEducationMutation(c.config, OpUpdate)
	return &EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationClient) UpdateOne(e *Education) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducation(e))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationClient) UpdateOneID(id uuid.UUID) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducationID(id))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Education.
func (c *EducationClient) Delete() *EducationDelete {
	mutation := newEducationMutation(c.config, OpDelete)
	return &EducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationClient) DeleteOne(e *Education) *EducationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationClient) DeleteOneID(id uuid.UUID) *EducationDeleteOne {
	builder := c.Delete().Where(education.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDeleteOne{builder}
}

// Query returns a query builder for Education.
func (c *EducationClient) Query() *EducationQuery {
	return &EducationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducation},
		inters: c.Interceptors(),
	}
}

// Get returns a Education entity by its id.
func (c *EducationClient) Get(ctx context.Context, id uuid.UUID) (*Education, error) {
	return c.Query().Where(education.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationClient) GetX(ctx context.Context, id uuid.UUID) *Education {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDegreeLevel queries the degree_level edge of a Education.
func (c *EducationClient) QueryDegreeLevel(e *Education) *DegreeLevelQuery {
	query := (&DegreeLevelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(degreelevel.Table, degreelevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, education.DegreeLevelTable, education.DegreeLevelColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationClient) Hooks() []Hook {
	return c.hooks.Education
}

// Interceptors returns the client interceptors.
func (c *EducationClient) Interceptors() []Interceptor {
	return c.inters.Education
}

func (c *EducationClient) mutate(ctx context.Context, m *EducationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Education mutation op: %q", m.Op())
	}
}

// InterviewClient is a client for the Interview schema.
type InterviewClient struct {
	config
}

// NewInterviewClient returns a client for the Interview from the given config.
func NewInterviewClient(c config) *InterviewClient {
	return &InterviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `interview.Hooks(f(g(h())))`.
func (c *InterviewClient) Use(hooks ...Hook) {
	c.hooks.Interview = append(c.hooks.Interview, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `interview.Intercept(f(g(h())))`.
func (c *InterviewClient) Intercept(interceptors ...Interceptor) {
	c.inters.Interview = append(c.inters.Interview, interceptors...)
}

// Create returns a builder for creating a Interview entity.
func (c *InterviewClient) Create() *InterviewCreate {
	mutation := newInterviewMutation(c.config, OpCreate)
	return &InterviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Interview entities.
func (c *InterviewClient) CreateBulk(builders ...*InterviewCreate) *InterviewCreateBulk {
	return &InterviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Interview.
func (c *InterviewClient) Update() *InterviewUpdate {
	mutation := newInterviewMutation(c.config, OpUpdate)
	return &InterviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InterviewClient) UpdateOne(i *Interview) *InterviewUpdateOne {
	mutation := newInterviewMutation(c.config, OpUpdateOne, withInterview(i))
	return &InterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InterviewClient) UpdateOneID(id uuid.UUID) *InterviewUpdateOne {
	mutation := newInterviewMutation(c.config, OpUpdateOne, withInterviewID(id))
	return &InterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Interview.
func (c *InterviewClient) Delete() *InterviewDelete {
	mutation := newInterviewMutation(c.config, OpDelete)
	return &InterviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InterviewClient) DeleteOne(i *Interview) *InterviewDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InterviewClient) DeleteOneID(id uuid.UUID) *InterviewDeleteOne {
	builder := c.Delete().Where(interview.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InterviewDeleteOne{builder}
}

// Query returns a query builder for Interview.
func (c *InterviewClient) Query() *InterviewQuery {
	return &InterviewQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInterview},
		inters: c.Interceptors(),
	}
}

// Get returns a Interview entity by its id.
func (c *InterviewClient) Get(ctx context.Context, id uuid.UUID) (*Interview, error) {
	return c.Query().Where(interview.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InterviewClient) GetX(ctx context.Context, id uuid.UUID) *Interview {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplication queries the application edge of a Interview.
func (c *InterviewClient) QueryApplication(i *Interview) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(interview.Table, interview.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, interview.ApplicationTable, interview.ApplicationColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Interview.
func (c *InterviewClient) QueryUser(i *Interview) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(interview.Table, interview.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, interview.UserTable, interview.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InterviewClient) Hooks() []Hook {
	return c.hooks.Interview
}

// Interceptors returns the client interceptors.
func (c *InterviewClient) Interceptors() []Interceptor {
	return c.inters.Interview
}

func (c *InterviewClient) mutate(ctx context.Context, m *InterviewMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InterviewCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InterviewUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InterviewDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Interview mutation op: %q", m.Op())
	}
}

// JobOfferClient is a client for the JobOffer schema.
type JobOfferClient struct {
	config
}

// NewJobOfferClient returns a client for the JobOffer from the given config.
func NewJobOfferClient(c config) *JobOfferClient {
	return &JobOfferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `joboffer.Hooks(f(g(h())))`.
func (c *JobOfferClient) Use(hooks ...Hook) {
	c.hooks.JobOffer = append(c.hooks.JobOffer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `joboffer.Intercept(f(g(h())))`.
func (c *JobOfferClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobOffer = append(c.inters.JobOffer, interceptors...)
}

// Create returns a builder for creating a JobOffer entity.
func (c *JobOfferClient) Create() *JobOfferCreate {
	mutation := newJobOfferMutation(c.config, OpCreate)
	return &JobOfferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobOffer entities.
func (c *JobOfferClient) CreateBulk(builders ...*JobOfferCreate) *JobOfferCreateBulk {
	return &JobOfferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobOffer.
func (c *JobOfferClient) Update() *JobOfferUpdate {
	mutation := newJobOfferMutation(c.config, OpUpdate)
	return &JobOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobOfferClient) UpdateOne(jo *JobOffer) *JobOfferUpdateOne {
	mutation := newJobOfferMutation(c.config, OpUpdateOne, withJobOffer(jo))
	return &JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobOfferClient) UpdateOneID(id uuid.UUID) *JobOfferUpdateOne {
	mutation := newJobOfferMutation(c.config, OpUpdateOne, withJobOfferID(id))
	return &JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobOffer.
func (c *JobOfferClient) Delete() *JobOfferDelete {
	mutation := newJobOfferMutation(c.config, OpDelete)
	return &JobOfferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobOfferClient) DeleteOne(jo *JobOffer) *JobOfferDeleteOne {
	return c.DeleteOneID(jo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobOfferClient) DeleteOneID(id uuid.UUID) *JobOfferDeleteOne {
	builder := c.Delete().Where(joboffer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobOfferDeleteOne{builder}
}

// Query returns a query builder for JobOffer.
func (c *JobOfferClient) Query() *JobOfferQuery {
	return &JobOfferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobOffer},
		inters: c.Interceptors(),
	}
}

// Get returns a JobOffer entity by its id.
func (c *JobOfferClient) Get(ctx context.Context, id uuid.UUID) (*JobOffer, error) {
	return c.Query().Where(joboffer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobOfferClient) GetX(ctx context.Context, id uuid.UUID) *JobOffer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplications queries the applications edge of a JobOffer.
func (c *JobOfferClient) QueryApplications(jo *JobOffer) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joboffer.Table, joboffer.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, joboffer.ApplicationsTable, joboffer.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(jo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobOfferCategories queries the job_offer_categories edge of a JobOffer.
func (c *JobOfferClient) QueryJobOfferCategories(jo *JobOffer) *JobOfferCategoryQuery {
	query := (&JobOfferCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joboffer.Table, joboffer.FieldID, id),
			sqlgraph.To(joboffercategory.Table, joboffercategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, joboffer.JobOfferCategoriesTable, joboffer.JobOfferCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(jo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a JobOffer.
func (c *JobOfferClient) QueryStatus(jo *JobOffer) *StatusQuery {
	query := (&StatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joboffer.Table, joboffer.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, joboffer.StatusTable, joboffer.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(jo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobOfferClient) Hooks() []Hook {
	return c.hooks.JobOffer
}

// Interceptors returns the client interceptors.
func (c *JobOfferClient) Interceptors() []Interceptor {
	return c.inters.JobOffer
}

func (c *JobOfferClient) mutate(ctx context.Context, m *JobOfferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobOfferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobOfferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobOffer mutation op: %q", m.Op())
	}
}

// JobOfferCategoryClient is a client for the JobOfferCategory schema.
type JobOfferCategoryClient struct {
	config
}

// NewJobOfferCategoryClient returns a client for the JobOfferCategory from the given config.
func NewJobOfferCategoryClient(c config) *JobOfferCategoryClient {
	return &JobOfferCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `joboffercategory.Hooks(f(g(h())))`.
func (c *JobOfferCategoryClient) Use(hooks ...Hook) {
	c.hooks.JobOfferCategory = append(c.hooks.JobOfferCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `joboffercategory.Intercept(f(g(h())))`.
func (c *JobOfferCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobOfferCategory = append(c.inters.JobOfferCategory, interceptors...)
}

// Create returns a builder for creating a JobOfferCategory entity.
func (c *JobOfferCategoryClient) Create() *JobOfferCategoryCreate {
	mutation := newJobOfferCategoryMutation(c.config, OpCreate)
	return &JobOfferCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobOfferCategory entities.
func (c *JobOfferCategoryClient) CreateBulk(builders ...*JobOfferCategoryCreate) *JobOfferCategoryCreateBulk {
	return &JobOfferCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobOfferCategory.
func (c *JobOfferCategoryClient) Update() *JobOfferCategoryUpdate {
	mutation := newJobOfferCategoryMutation(c.config, OpUpdate)
	return &JobOfferCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobOfferCategoryClient) UpdateOne(joc *JobOfferCategory) *JobOfferCategoryUpdateOne {
	mutation := newJobOfferCategoryMutation(c.config, OpUpdateOne, withJobOfferCategory(joc))
	return &JobOfferCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobOfferCategoryClient) UpdateOneID(id uuid.UUID) *JobOfferCategoryUpdateOne {
	mutation := newJobOfferCategoryMutation(c.config, OpUpdateOne, withJobOfferCategoryID(id))
	return &JobOfferCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobOfferCategory.
func (c *JobOfferCategoryClient) Delete() *JobOfferCategoryDelete {
	mutation := newJobOfferCategoryMutation(c.config, OpDelete)
	return &JobOfferCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobOfferCategoryClient) DeleteOne(joc *JobOfferCategory) *JobOfferCategoryDeleteOne {
	return c.DeleteOneID(joc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobOfferCategoryClient) DeleteOneID(id uuid.UUID) *JobOfferCategoryDeleteOne {
	builder := c.Delete().Where(joboffercategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobOfferCategoryDeleteOne{builder}
}

// Query returns a query builder for JobOfferCategory.
func (c *JobOfferCategoryClient) Query() *JobOfferCategoryQuery {
	return &JobOfferCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobOfferCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a JobOfferCategory entity by its id.
func (c *JobOfferCategoryClient) Get(ctx context.Context, id uuid.UUID) (*JobOfferCategory, error) {
	return c.Query().Where(joboffercategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobOfferCategoryClient) GetX(ctx context.Context, id uuid.UUID) *JobOfferCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a JobOfferCategory.
func (c *JobOfferCategoryClient) QueryCategory(joc *JobOfferCategory) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := joc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joboffercategory.Table, joboffercategory.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, joboffercategory.CategoryTable, joboffercategory.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(joc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobOffer queries the job_offer edge of a JobOfferCategory.
func (c *JobOfferCategoryClient) QueryJobOffer(joc *JobOfferCategory) *JobOfferQuery {
	query := (&JobOfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := joc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joboffercategory.Table, joboffercategory.FieldID, id),
			sqlgraph.To(joboffer.Table, joboffer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, joboffercategory.JobOfferTable, joboffercategory.JobOfferColumn),
		)
		fromV = sqlgraph.Neighbors(joc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobOfferCategoryClient) Hooks() []Hook {
	return c.hooks.JobOfferCategory
}

// Interceptors returns the client interceptors.
func (c *JobOfferCategoryClient) Interceptors() []Interceptor {
	return c.inters.JobOfferCategory
}

func (c *JobOfferCategoryClient) mutate(ctx context.Context, m *JobOfferCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobOfferCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobOfferCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobOfferCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobOfferCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobOfferCategory mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id uint) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id uint) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id uint) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id uint) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantProfile queries the applicant_profile edge of a Language.
func (c *LanguageClient) QueryApplicantProfile(l *Language) *ApplicantProfileQuery {
	query := (&ApplicantProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(applicantprofile.Table, applicantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, language.ApplicantProfileTable, language.ApplicantProfileColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `post.Hooks(f(g(h())))`.
func (c *PostClient) Use(hooks ...Hook) {
	c.hooks.Post = append(c.hooks.Post, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `post.Intercept(f(g(h())))`.
func (c *PostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Post = append(c.inters.Post, interceptors...)
}

// Create returns a builder for creating a Post entity.
func (c *PostClient) Create() *PostCreate {
	mutation := newPostMutation(c.config, OpCreate)
	return &PostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Post entities.
func (c *PostClient) CreateBulk(builders ...*PostCreate) *PostCreateBulk {
	return &PostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	mutation := newPostMutation(c.config, OpUpdate)
	return &PostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(po *Post) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPost(po))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id uuid.UUID) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPostID(id))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	mutation := newPostMutation(c.config, OpDelete)
	return &PostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostClient) DeleteOne(po *Post) *PostDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostClient) DeleteOneID(id uuid.UUID) *PostDeleteOne {
	builder := c.Delete().Where(post.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostDeleteOne{builder}
}

// Query returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePost},
		inters: c.Interceptors(),
	}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id uuid.UUID) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id uuid.UUID) *Post {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPostCategories queries the post_categories edge of a Post.
func (c *PostClient) QueryPostCategories(po *Post) *PostCategoryQuery {
	query := (&PostCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(postcategory.Table, postcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, post.PostCategoriesTable, post.PostCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Post.
func (c *PostClient) QueryUser(po *Post) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, post.UserTable, post.UserColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostClient) Hooks() []Hook {
	return c.hooks.Post
}

// Interceptors returns the client interceptors.
func (c *PostClient) Interceptors() []Interceptor {
	return c.inters.Post
}

func (c *PostClient) mutate(ctx context.Context, m *PostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Post mutation op: %q", m.Op())
	}
}

// PostCategoryClient is a client for the PostCategory schema.
type PostCategoryClient struct {
	config
}

// NewPostCategoryClient returns a client for the PostCategory from the given config.
func NewPostCategoryClient(c config) *PostCategoryClient {
	return &PostCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postcategory.Hooks(f(g(h())))`.
func (c *PostCategoryClient) Use(hooks ...Hook) {
	c.hooks.PostCategory = append(c.hooks.PostCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `postcategory.Intercept(f(g(h())))`.
func (c *PostCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.PostCategory = append(c.inters.PostCategory, interceptors...)
}

// Create returns a builder for creating a PostCategory entity.
func (c *PostCategoryClient) Create() *PostCategoryCreate {
	mutation := newPostCategoryMutation(c.config, OpCreate)
	return &PostCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostCategory entities.
func (c *PostCategoryClient) CreateBulk(builders ...*PostCategoryCreate) *PostCategoryCreateBulk {
	return &PostCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostCategory.
func (c *PostCategoryClient) Update() *PostCategoryUpdate {
	mutation := newPostCategoryMutation(c.config, OpUpdate)
	return &PostCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostCategoryClient) UpdateOne(pc *PostCategory) *PostCategoryUpdateOne {
	mutation := newPostCategoryMutation(c.config, OpUpdateOne, withPostCategory(pc))
	return &PostCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostCategoryClient) UpdateOneID(id uuid.UUID) *PostCategoryUpdateOne {
	mutation := newPostCategoryMutation(c.config, OpUpdateOne, withPostCategoryID(id))
	return &PostCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostCategory.
func (c *PostCategoryClient) Delete() *PostCategoryDelete {
	mutation := newPostCategoryMutation(c.config, OpDelete)
	return &PostCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostCategoryClient) DeleteOne(pc *PostCategory) *PostCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostCategoryClient) DeleteOneID(id uuid.UUID) *PostCategoryDeleteOne {
	builder := c.Delete().Where(postcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostCategoryDeleteOne{builder}
}

// Query returns a query builder for PostCategory.
func (c *PostCategoryClient) Query() *PostCategoryQuery {
	return &PostCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePostCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a PostCategory entity by its id.
func (c *PostCategoryClient) Get(ctx context.Context, id uuid.UUID) (*PostCategory, error) {
	return c.Query().Where(postcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostCategoryClient) GetX(ctx context.Context, id uuid.UUID) *PostCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPostCategories queries the post_categories edge of a PostCategory.
func (c *PostCategoryClient) QueryPostCategories(pc *PostCategory) *PostCategoryQuery {
	query := (&PostCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(postcategory.Table, postcategory.FieldID, id),
			sqlgraph.To(postcategory.Table, postcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, postcategory.PostCategoriesTable, postcategory.PostCategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostCategoryClient) Hooks() []Hook {
	return c.hooks.PostCategory
}

// Interceptors returns the client interceptors.
func (c *PostCategoryClient) Interceptors() []Interceptor {
	return c.inters.PostCategory
}

func (c *PostCategoryClient) mutate(ctx context.Context, m *PostCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PostCategory mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id uuid.UUID) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id uuid.UUID) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id uuid.UUID) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id uuid.UUID) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantProfileSkills queries the applicant_profile_skills edge of a Skill.
func (c *SkillClient) QueryApplicantProfileSkills(s *Skill) *ApplicantProfileSkillQuery {
	query := (&ApplicantProfileSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(applicantprofileskill.Table, applicantprofileskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skill.ApplicantProfileSkillsTable, skill.ApplicantProfileSkillsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// StatusClient is a client for the Status schema.
type StatusClient struct {
	config
}

// NewStatusClient returns a client for the Status from the given config.
func NewStatusClient(c config) *StatusClient {
	return &StatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `status.Hooks(f(g(h())))`.
func (c *StatusClient) Use(hooks ...Hook) {
	c.hooks.Status = append(c.hooks.Status, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `status.Intercept(f(g(h())))`.
func (c *StatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.Status = append(c.inters.Status, interceptors...)
}

// Create returns a builder for creating a Status entity.
func (c *StatusClient) Create() *StatusCreate {
	mutation := newStatusMutation(c.config, OpCreate)
	return &StatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Status entities.
func (c *StatusClient) CreateBulk(builders ...*StatusCreate) *StatusCreateBulk {
	return &StatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Status.
func (c *StatusClient) Update() *StatusUpdate {
	mutation := newStatusMutation(c.config, OpUpdate)
	return &StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusClient) UpdateOne(s *Status) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatus(s))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusClient) UpdateOneID(id uuid.UUID) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatusID(id))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Status.
func (c *StatusClient) Delete() *StatusDelete {
	mutation := newStatusMutation(c.config, OpDelete)
	return &StatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatusClient) DeleteOne(s *Status) *StatusDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StatusClient) DeleteOneID(id uuid.UUID) *StatusDeleteOne {
	builder := c.Delete().Where(status.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusDeleteOne{builder}
}

// Query returns a query builder for Status.
func (c *StatusClient) Query() *StatusQuery {
	return &StatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a Status entity by its id.
func (c *StatusClient) Get(ctx context.Context, id uuid.UUID) (*Status, error) {
	return c.Query().Where(status.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusClient) GetX(ctx context.Context, id uuid.UUID) *Status {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJobOffers queries the job_offers edge of a Status.
func (c *StatusClient) QueryJobOffers(s *Status) *JobOfferQuery {
	query := (&JobOfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(joboffer.Table, joboffer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, status.JobOffersTable, status.JobOffersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusClient) Hooks() []Hook {
	return c.hooks.Status
}

// Interceptors returns the client interceptors.
func (c *StatusClient) Interceptors() []Interceptor {
	return c.inters.Status
}

func (c *StatusClient) mutate(ctx context.Context, m *StatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Status mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantProfiles queries the applicant_profiles edge of a User.
func (c *UserClient) QueryApplicantProfiles(u *User) *ApplicantProfileQuery {
	query := (&ApplicantProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(applicantprofile.Table, applicantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApplicantProfilesTable, user.ApplicantProfilesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviews queries the interviews edge of a User.
func (c *UserClient) QueryInterviews(u *User) *InterviewQuery {
	query := (&InterviewClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(interview.Table, interview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InterviewsTable, user.InterviewsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosts queries the posts edge of a User.
func (c *UserClient) QueryPosts(u *User) *PostQuery {
	query := (&PostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PostsTable, user.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WorkExperienceClient is a client for the WorkExperience schema.
type WorkExperienceClient struct {
	config
}

// NewWorkExperienceClient returns a client for the WorkExperience from the given config.
func NewWorkExperienceClient(c config) *WorkExperienceClient {
	return &WorkExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workexperience.Hooks(f(g(h())))`.
func (c *WorkExperienceClient) Use(hooks ...Hook) {
	c.hooks.WorkExperience = append(c.hooks.WorkExperience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workexperience.Intercept(f(g(h())))`.
func (c *WorkExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkExperience = append(c.inters.WorkExperience, interceptors...)
}

// Create returns a builder for creating a WorkExperience entity.
func (c *WorkExperienceClient) Create() *WorkExperienceCreate {
	mutation := newWorkExperienceMutation(c.config, OpCreate)
	return &WorkExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkExperience entities.
func (c *WorkExperienceClient) CreateBulk(builders ...*WorkExperienceCreate) *WorkExperienceCreateBulk {
	return &WorkExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkExperience.
func (c *WorkExperienceClient) Update() *WorkExperienceUpdate {
	mutation := newWorkExperienceMutation(c.config, OpUpdate)
	return &WorkExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkExperienceClient) UpdateOne(we *WorkExperience) *WorkExperienceUpdateOne {
	mutation := newWorkExperienceMutation(c.config, OpUpdateOne, withWorkExperience(we))
	return &WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkExperienceClient) UpdateOneID(id uuid.UUID) *WorkExperienceUpdateOne {
	mutation := newWorkExperienceMutation(c.config, OpUpdateOne, withWorkExperienceID(id))
	return &WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkExperience.
func (c *WorkExperienceClient) Delete() *WorkExperienceDelete {
	mutation := newWorkExperienceMutation(c.config, OpDelete)
	return &WorkExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkExperienceClient) DeleteOne(we *WorkExperience) *WorkExperienceDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkExperienceClient) DeleteOneID(id uuid.UUID) *WorkExperienceDeleteOne {
	builder := c.Delete().Where(workexperience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkExperienceDeleteOne{builder}
}

// Query returns a query builder for WorkExperience.
func (c *WorkExperienceClient) Query() *WorkExperienceQuery {
	return &WorkExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkExperience entity by its id.
func (c *WorkExperienceClient) Get(ctx context.Context, id uuid.UUID) (*WorkExperience, error) {
	return c.Query().Where(workexperience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkExperienceClient) GetX(ctx context.Context, id uuid.UUID) *WorkExperience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicantProfile queries the applicant_profile edge of a WorkExperience.
func (c *WorkExperienceClient) QueryApplicantProfile(we *WorkExperience) *ApplicantProfileQuery {
	query := (&ApplicantProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperience.Table, workexperience.FieldID, id),
			sqlgraph.To(applicantprofile.Table, applicantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperience.ApplicantProfileTable, workexperience.ApplicantProfileColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkExperienceClient) Hooks() []Hook {
	return c.hooks.WorkExperience
}

// Interceptors returns the client interceptors.
func (c *WorkExperienceClient) Interceptors() []Interceptor {
	return c.inters.WorkExperience
}

func (c *WorkExperienceClient) mutate(ctx context.Context, m *WorkExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkExperience mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApplicantInterest, ApplicantProfile, ApplicantProfileSkill, Application,
		Category, ContactUsMessage, DegreeLevel, Education, Interview, JobOffer,
		JobOfferCategory, Language, Post, PostCategory, Skill, Status, User,
		WorkExperience []ent.Hook
	}
	inters struct {
		ApplicantInterest, ApplicantProfile, ApplicantProfileSkill, Application,
		Category, ContactUsMessage, DegreeLevel, Education, Interview, JobOffer,
		JobOfferCategory, Language, Post, PostCategory, Skill, Status, User,
		WorkExperience []ent.Interceptor
	}
)
