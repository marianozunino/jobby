// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/applicantinterest"
	"github.com/marianozunino/jobby/ent/applicantprofile"
	"github.com/marianozunino/jobby/ent/applicantprofileskill"
	"github.com/marianozunino/jobby/ent/application"
	"github.com/marianozunino/jobby/ent/education"
	"github.com/marianozunino/jobby/ent/language"
	"github.com/marianozunino/jobby/ent/predicate"
	"github.com/marianozunino/jobby/ent/user"
	"github.com/marianozunino/jobby/ent/workexperience"
)

// ApplicantProfileUpdate is the builder for updating ApplicantProfile entities.
type ApplicantProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicantProfileMutation
}

// Where appends a list predicates to the ApplicantProfileUpdate builder.
func (apu *ApplicantProfileUpdate) Where(ps ...predicate.ApplicantProfile) *ApplicantProfileUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetBirthday sets the "birthday" field.
func (apu *ApplicantProfileUpdate) SetBirthday(t time.Time) *ApplicantProfileUpdate {
	apu.mutation.SetBirthday(t)
	return apu
}

// SetGender sets the "gender" field.
func (apu *ApplicantProfileUpdate) SetGender(s string) *ApplicantProfileUpdate {
	apu.mutation.SetGender(s)
	return apu
}

// SetPhone sets the "phone" field.
func (apu *ApplicantProfileUpdate) SetPhone(s string) *ApplicantProfileUpdate {
	apu.mutation.SetPhone(s)
	return apu
}

// SetAddress1 sets the "address1" field.
func (apu *ApplicantProfileUpdate) SetAddress1(s string) *ApplicantProfileUpdate {
	apu.mutation.SetAddress1(s)
	return apu
}

// SetAddress2 sets the "address2" field.
func (apu *ApplicantProfileUpdate) SetAddress2(s string) *ApplicantProfileUpdate {
	apu.mutation.SetAddress2(s)
	return apu
}

// SetCv sets the "cv" field.
func (apu *ApplicantProfileUpdate) SetCv(s string) *ApplicantProfileUpdate {
	apu.mutation.SetCv(s)
	return apu
}

// SetNillableCv sets the "cv" field if the given value is not nil.
func (apu *ApplicantProfileUpdate) SetNillableCv(s *string) *ApplicantProfileUpdate {
	if s != nil {
		apu.SetCv(*s)
	}
	return apu
}

// ClearCv clears the value of the "cv" field.
func (apu *ApplicantProfileUpdate) ClearCv() *ApplicantProfileUpdate {
	apu.mutation.ClearCv()
	return apu
}

// SetInternalComments sets the "internal_comments" field.
func (apu *ApplicantProfileUpdate) SetInternalComments(s string) *ApplicantProfileUpdate {
	apu.mutation.SetInternalComments(s)
	return apu
}

// SetReceiveEmails sets the "receive_emails" field.
func (apu *ApplicantProfileUpdate) SetReceiveEmails(b bool) *ApplicantProfileUpdate {
	apu.mutation.SetReceiveEmails(b)
	return apu
}

// SetCreatedAt sets the "created_at" field.
func (apu *ApplicantProfileUpdate) SetCreatedAt(t time.Time) *ApplicantProfileUpdate {
	apu.mutation.SetCreatedAt(t)
	return apu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apu *ApplicantProfileUpdate) SetNillableCreatedAt(t *time.Time) *ApplicantProfileUpdate {
	if t != nil {
		apu.SetCreatedAt(*t)
	}
	return apu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (apu *ApplicantProfileUpdate) ClearCreatedAt() *ApplicantProfileUpdate {
	apu.mutation.ClearCreatedAt()
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *ApplicantProfileUpdate) SetUpdatedAt(t time.Time) *ApplicantProfileUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apu *ApplicantProfileUpdate) SetNillableUpdatedAt(t *time.Time) *ApplicantProfileUpdate {
	if t != nil {
		apu.SetUpdatedAt(*t)
	}
	return apu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apu *ApplicantProfileUpdate) ClearUpdatedAt() *ApplicantProfileUpdate {
	apu.mutation.ClearUpdatedAt()
	return apu
}

// SetDeletedAt sets the "deleted_at" field.
func (apu *ApplicantProfileUpdate) SetDeletedAt(t time.Time) *ApplicantProfileUpdate {
	apu.mutation.SetDeletedAt(t)
	return apu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apu *ApplicantProfileUpdate) SetNillableDeletedAt(t *time.Time) *ApplicantProfileUpdate {
	if t != nil {
		apu.SetDeletedAt(*t)
	}
	return apu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (apu *ApplicantProfileUpdate) ClearDeletedAt() *ApplicantProfileUpdate {
	apu.mutation.ClearDeletedAt()
	return apu
}

// SetUserID sets the "user_id" field.
func (apu *ApplicantProfileUpdate) SetUserID(u uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.SetUserID(u)
	return apu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (apu *ApplicantProfileUpdate) SetNillableUserID(u *uuid.UUID) *ApplicantProfileUpdate {
	if u != nil {
		apu.SetUserID(*u)
	}
	return apu
}

// ClearUserID clears the value of the "user_id" field.
func (apu *ApplicantProfileUpdate) ClearUserID() *ApplicantProfileUpdate {
	apu.mutation.ClearUserID()
	return apu
}

// SetExtraSkills sets the "extra_skills" field.
func (apu *ApplicantProfileUpdate) SetExtraSkills(s struct{}) *ApplicantProfileUpdate {
	apu.mutation.SetExtraSkills(s)
	return apu
}

// SetNillableExtraSkills sets the "extra_skills" field if the given value is not nil.
func (apu *ApplicantProfileUpdate) SetNillableExtraSkills(s *struct{}) *ApplicantProfileUpdate {
	if s != nil {
		apu.SetExtraSkills(*s)
	}
	return apu
}

// ClearExtraSkills clears the value of the "extra_skills" field.
func (apu *ApplicantProfileUpdate) ClearExtraSkills() *ApplicantProfileUpdate {
	apu.mutation.ClearExtraSkills()
	return apu
}

// AddApplicantInterestIDs adds the "applicant_interests" edge to the ApplicantInterest entity by IDs.
func (apu *ApplicantProfileUpdate) AddApplicantInterestIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.AddApplicantInterestIDs(ids...)
	return apu
}

// AddApplicantInterests adds the "applicant_interests" edges to the ApplicantInterest entity.
func (apu *ApplicantProfileUpdate) AddApplicantInterests(a ...*ApplicantInterest) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddApplicantInterestIDs(ids...)
}

// AddApplicantProfileSkillIDs adds the "applicant_profile_skills" edge to the ApplicantProfileSkill entity by IDs.
func (apu *ApplicantProfileUpdate) AddApplicantProfileSkillIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.AddApplicantProfileSkillIDs(ids...)
	return apu
}

// AddApplicantProfileSkills adds the "applicant_profile_skills" edges to the ApplicantProfileSkill entity.
func (apu *ApplicantProfileUpdate) AddApplicantProfileSkills(a ...*ApplicantProfileSkill) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddApplicantProfileSkillIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (apu *ApplicantProfileUpdate) SetUser(u *User) *ApplicantProfileUpdate {
	return apu.SetUserID(u.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (apu *ApplicantProfileUpdate) AddApplicationIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.AddApplicationIDs(ids...)
	return apu
}

// AddApplications adds the "applications" edges to the Application entity.
func (apu *ApplicantProfileUpdate) AddApplications(a ...*Application) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddApplicationIDs(ids...)
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (apu *ApplicantProfileUpdate) AddEducationIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.AddEducationIDs(ids...)
	return apu
}

// AddEducations adds the "educations" edges to the Education entity.
func (apu *ApplicantProfileUpdate) AddEducations(e ...*Education) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return apu.AddEducationIDs(ids...)
}

// AddLanguageIDs adds the "languages" edge to the Language entity by IDs.
func (apu *ApplicantProfileUpdate) AddLanguageIDs(ids ...uint) *ApplicantProfileUpdate {
	apu.mutation.AddLanguageIDs(ids...)
	return apu
}

// AddLanguages adds the "languages" edges to the Language entity.
func (apu *ApplicantProfileUpdate) AddLanguages(l ...*Language) *ApplicantProfileUpdate {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return apu.AddLanguageIDs(ids...)
}

// AddWorkExperienceIDs adds the "work_experiences" edge to the WorkExperience entity by IDs.
func (apu *ApplicantProfileUpdate) AddWorkExperienceIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.AddWorkExperienceIDs(ids...)
	return apu
}

// AddWorkExperiences adds the "work_experiences" edges to the WorkExperience entity.
func (apu *ApplicantProfileUpdate) AddWorkExperiences(w ...*WorkExperience) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return apu.AddWorkExperienceIDs(ids...)
}

// Mutation returns the ApplicantProfileMutation object of the builder.
func (apu *ApplicantProfileUpdate) Mutation() *ApplicantProfileMutation {
	return apu.mutation
}

// ClearApplicantInterests clears all "applicant_interests" edges to the ApplicantInterest entity.
func (apu *ApplicantProfileUpdate) ClearApplicantInterests() *ApplicantProfileUpdate {
	apu.mutation.ClearApplicantInterests()
	return apu
}

// RemoveApplicantInterestIDs removes the "applicant_interests" edge to ApplicantInterest entities by IDs.
func (apu *ApplicantProfileUpdate) RemoveApplicantInterestIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.RemoveApplicantInterestIDs(ids...)
	return apu
}

// RemoveApplicantInterests removes "applicant_interests" edges to ApplicantInterest entities.
func (apu *ApplicantProfileUpdate) RemoveApplicantInterests(a ...*ApplicantInterest) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveApplicantInterestIDs(ids...)
}

// ClearApplicantProfileSkills clears all "applicant_profile_skills" edges to the ApplicantProfileSkill entity.
func (apu *ApplicantProfileUpdate) ClearApplicantProfileSkills() *ApplicantProfileUpdate {
	apu.mutation.ClearApplicantProfileSkills()
	return apu
}

// RemoveApplicantProfileSkillIDs removes the "applicant_profile_skills" edge to ApplicantProfileSkill entities by IDs.
func (apu *ApplicantProfileUpdate) RemoveApplicantProfileSkillIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.RemoveApplicantProfileSkillIDs(ids...)
	return apu
}

// RemoveApplicantProfileSkills removes "applicant_profile_skills" edges to ApplicantProfileSkill entities.
func (apu *ApplicantProfileUpdate) RemoveApplicantProfileSkills(a ...*ApplicantProfileSkill) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveApplicantProfileSkillIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (apu *ApplicantProfileUpdate) ClearUser() *ApplicantProfileUpdate {
	apu.mutation.ClearUser()
	return apu
}

// ClearApplications clears all "applications" edges to the Application entity.
func (apu *ApplicantProfileUpdate) ClearApplications() *ApplicantProfileUpdate {
	apu.mutation.ClearApplications()
	return apu
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (apu *ApplicantProfileUpdate) RemoveApplicationIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.RemoveApplicationIDs(ids...)
	return apu
}

// RemoveApplications removes "applications" edges to Application entities.
func (apu *ApplicantProfileUpdate) RemoveApplications(a ...*Application) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveApplicationIDs(ids...)
}

// ClearEducations clears all "educations" edges to the Education entity.
func (apu *ApplicantProfileUpdate) ClearEducations() *ApplicantProfileUpdate {
	apu.mutation.ClearEducations()
	return apu
}

// RemoveEducationIDs removes the "educations" edge to Education entities by IDs.
func (apu *ApplicantProfileUpdate) RemoveEducationIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.RemoveEducationIDs(ids...)
	return apu
}

// RemoveEducations removes "educations" edges to Education entities.
func (apu *ApplicantProfileUpdate) RemoveEducations(e ...*Education) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return apu.RemoveEducationIDs(ids...)
}

// ClearLanguages clears all "languages" edges to the Language entity.
func (apu *ApplicantProfileUpdate) ClearLanguages() *ApplicantProfileUpdate {
	apu.mutation.ClearLanguages()
	return apu
}

// RemoveLanguageIDs removes the "languages" edge to Language entities by IDs.
func (apu *ApplicantProfileUpdate) RemoveLanguageIDs(ids ...uint) *ApplicantProfileUpdate {
	apu.mutation.RemoveLanguageIDs(ids...)
	return apu
}

// RemoveLanguages removes "languages" edges to Language entities.
func (apu *ApplicantProfileUpdate) RemoveLanguages(l ...*Language) *ApplicantProfileUpdate {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return apu.RemoveLanguageIDs(ids...)
}

// ClearWorkExperiences clears all "work_experiences" edges to the WorkExperience entity.
func (apu *ApplicantProfileUpdate) ClearWorkExperiences() *ApplicantProfileUpdate {
	apu.mutation.ClearWorkExperiences()
	return apu
}

// RemoveWorkExperienceIDs removes the "work_experiences" edge to WorkExperience entities by IDs.
func (apu *ApplicantProfileUpdate) RemoveWorkExperienceIDs(ids ...uuid.UUID) *ApplicantProfileUpdate {
	apu.mutation.RemoveWorkExperienceIDs(ids...)
	return apu
}

// RemoveWorkExperiences removes "work_experiences" edges to WorkExperience entities.
func (apu *ApplicantProfileUpdate) RemoveWorkExperiences(w ...*WorkExperience) *ApplicantProfileUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return apu.RemoveWorkExperienceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *ApplicantProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *ApplicantProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *ApplicantProfileUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *ApplicantProfileUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apu *ApplicantProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(applicantprofile.Table, applicantprofile.Columns, sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.Birthday(); ok {
		_spec.SetField(applicantprofile.FieldBirthday, field.TypeTime, value)
	}
	if value, ok := apu.mutation.Gender(); ok {
		_spec.SetField(applicantprofile.FieldGender, field.TypeString, value)
	}
	if value, ok := apu.mutation.Phone(); ok {
		_spec.SetField(applicantprofile.FieldPhone, field.TypeString, value)
	}
	if value, ok := apu.mutation.Address1(); ok {
		_spec.SetField(applicantprofile.FieldAddress1, field.TypeString, value)
	}
	if value, ok := apu.mutation.Address2(); ok {
		_spec.SetField(applicantprofile.FieldAddress2, field.TypeString, value)
	}
	if value, ok := apu.mutation.Cv(); ok {
		_spec.SetField(applicantprofile.FieldCv, field.TypeString, value)
	}
	if apu.mutation.CvCleared() {
		_spec.ClearField(applicantprofile.FieldCv, field.TypeString)
	}
	if value, ok := apu.mutation.InternalComments(); ok {
		_spec.SetField(applicantprofile.FieldInternalComments, field.TypeString, value)
	}
	if value, ok := apu.mutation.ReceiveEmails(); ok {
		_spec.SetField(applicantprofile.FieldReceiveEmails, field.TypeBool, value)
	}
	if value, ok := apu.mutation.CreatedAt(); ok {
		_spec.SetField(applicantprofile.FieldCreatedAt, field.TypeTime, value)
	}
	if apu.mutation.CreatedAtCleared() {
		_spec.ClearField(applicantprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(applicantprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if apu.mutation.UpdatedAtCleared() {
		_spec.ClearField(applicantprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.DeletedAt(); ok {
		_spec.SetField(applicantprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if apu.mutation.DeletedAtCleared() {
		_spec.ClearField(applicantprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.ExtraSkills(); ok {
		_spec.SetField(applicantprofile.FieldExtraSkills, field.TypeJSON, value)
	}
	if apu.mutation.ExtraSkillsCleared() {
		_spec.ClearField(applicantprofile.FieldExtraSkills, field.TypeJSON)
	}
	if apu.mutation.ApplicantInterestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantInterestsTable,
			Columns: []string{applicantprofile.ApplicantInterestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedApplicantInterestsIDs(); len(nodes) > 0 && !apu.mutation.ApplicantInterestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantInterestsTable,
			Columns: []string{applicantprofile.ApplicantInterestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ApplicantInterestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantInterestsTable,
			Columns: []string{applicantprofile.ApplicantInterestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.ApplicantProfileSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantProfileSkillsTable,
			Columns: []string{applicantprofile.ApplicantProfileSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedApplicantProfileSkillsIDs(); len(nodes) > 0 && !apu.mutation.ApplicantProfileSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantProfileSkillsTable,
			Columns: []string{applicantprofile.ApplicantProfileSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ApplicantProfileSkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantProfileSkillsTable,
			Columns: []string{applicantprofile.ApplicantProfileSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantprofile.UserTable,
			Columns: []string{applicantprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantprofile.UserTable,
			Columns: []string{applicantprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicationsTable,
			Columns: []string{applicantprofile.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !apu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicationsTable,
			Columns: []string{applicantprofile.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicationsTable,
			Columns: []string{applicantprofile.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.EducationsTable,
			Columns: []string{applicantprofile.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !apu.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.EducationsTable,
			Columns: []string{applicantprofile.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.EducationsTable,
			Columns: []string{applicantprofile.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.LanguagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.LanguagesTable,
			Columns: []string{applicantprofile.LanguagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedLanguagesIDs(); len(nodes) > 0 && !apu.mutation.LanguagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.LanguagesTable,
			Columns: []string{applicantprofile.LanguagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.LanguagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.LanguagesTable,
			Columns: []string{applicantprofile.LanguagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.WorkExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.WorkExperiencesTable,
			Columns: []string{applicantprofile.WorkExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedWorkExperiencesIDs(); len(nodes) > 0 && !apu.mutation.WorkExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.WorkExperiencesTable,
			Columns: []string{applicantprofile.WorkExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.WorkExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.WorkExperiencesTable,
			Columns: []string{applicantprofile.WorkExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicantprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// ApplicantProfileUpdateOne is the builder for updating a single ApplicantProfile entity.
type ApplicantProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicantProfileMutation
}

// SetBirthday sets the "birthday" field.
func (apuo *ApplicantProfileUpdateOne) SetBirthday(t time.Time) *ApplicantProfileUpdateOne {
	apuo.mutation.SetBirthday(t)
	return apuo
}

// SetGender sets the "gender" field.
func (apuo *ApplicantProfileUpdateOne) SetGender(s string) *ApplicantProfileUpdateOne {
	apuo.mutation.SetGender(s)
	return apuo
}

// SetPhone sets the "phone" field.
func (apuo *ApplicantProfileUpdateOne) SetPhone(s string) *ApplicantProfileUpdateOne {
	apuo.mutation.SetPhone(s)
	return apuo
}

// SetAddress1 sets the "address1" field.
func (apuo *ApplicantProfileUpdateOne) SetAddress1(s string) *ApplicantProfileUpdateOne {
	apuo.mutation.SetAddress1(s)
	return apuo
}

// SetAddress2 sets the "address2" field.
func (apuo *ApplicantProfileUpdateOne) SetAddress2(s string) *ApplicantProfileUpdateOne {
	apuo.mutation.SetAddress2(s)
	return apuo
}

// SetCv sets the "cv" field.
func (apuo *ApplicantProfileUpdateOne) SetCv(s string) *ApplicantProfileUpdateOne {
	apuo.mutation.SetCv(s)
	return apuo
}

// SetNillableCv sets the "cv" field if the given value is not nil.
func (apuo *ApplicantProfileUpdateOne) SetNillableCv(s *string) *ApplicantProfileUpdateOne {
	if s != nil {
		apuo.SetCv(*s)
	}
	return apuo
}

// ClearCv clears the value of the "cv" field.
func (apuo *ApplicantProfileUpdateOne) ClearCv() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearCv()
	return apuo
}

// SetInternalComments sets the "internal_comments" field.
func (apuo *ApplicantProfileUpdateOne) SetInternalComments(s string) *ApplicantProfileUpdateOne {
	apuo.mutation.SetInternalComments(s)
	return apuo
}

// SetReceiveEmails sets the "receive_emails" field.
func (apuo *ApplicantProfileUpdateOne) SetReceiveEmails(b bool) *ApplicantProfileUpdateOne {
	apuo.mutation.SetReceiveEmails(b)
	return apuo
}

// SetCreatedAt sets the "created_at" field.
func (apuo *ApplicantProfileUpdateOne) SetCreatedAt(t time.Time) *ApplicantProfileUpdateOne {
	apuo.mutation.SetCreatedAt(t)
	return apuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apuo *ApplicantProfileUpdateOne) SetNillableCreatedAt(t *time.Time) *ApplicantProfileUpdateOne {
	if t != nil {
		apuo.SetCreatedAt(*t)
	}
	return apuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (apuo *ApplicantProfileUpdateOne) ClearCreatedAt() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearCreatedAt()
	return apuo
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *ApplicantProfileUpdateOne) SetUpdatedAt(t time.Time) *ApplicantProfileUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apuo *ApplicantProfileUpdateOne) SetNillableUpdatedAt(t *time.Time) *ApplicantProfileUpdateOne {
	if t != nil {
		apuo.SetUpdatedAt(*t)
	}
	return apuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apuo *ApplicantProfileUpdateOne) ClearUpdatedAt() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearUpdatedAt()
	return apuo
}

// SetDeletedAt sets the "deleted_at" field.
func (apuo *ApplicantProfileUpdateOne) SetDeletedAt(t time.Time) *ApplicantProfileUpdateOne {
	apuo.mutation.SetDeletedAt(t)
	return apuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apuo *ApplicantProfileUpdateOne) SetNillableDeletedAt(t *time.Time) *ApplicantProfileUpdateOne {
	if t != nil {
		apuo.SetDeletedAt(*t)
	}
	return apuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (apuo *ApplicantProfileUpdateOne) ClearDeletedAt() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearDeletedAt()
	return apuo
}

// SetUserID sets the "user_id" field.
func (apuo *ApplicantProfileUpdateOne) SetUserID(u uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.SetUserID(u)
	return apuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (apuo *ApplicantProfileUpdateOne) SetNillableUserID(u *uuid.UUID) *ApplicantProfileUpdateOne {
	if u != nil {
		apuo.SetUserID(*u)
	}
	return apuo
}

// ClearUserID clears the value of the "user_id" field.
func (apuo *ApplicantProfileUpdateOne) ClearUserID() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearUserID()
	return apuo
}

// SetExtraSkills sets the "extra_skills" field.
func (apuo *ApplicantProfileUpdateOne) SetExtraSkills(s struct{}) *ApplicantProfileUpdateOne {
	apuo.mutation.SetExtraSkills(s)
	return apuo
}

// SetNillableExtraSkills sets the "extra_skills" field if the given value is not nil.
func (apuo *ApplicantProfileUpdateOne) SetNillableExtraSkills(s *struct{}) *ApplicantProfileUpdateOne {
	if s != nil {
		apuo.SetExtraSkills(*s)
	}
	return apuo
}

// ClearExtraSkills clears the value of the "extra_skills" field.
func (apuo *ApplicantProfileUpdateOne) ClearExtraSkills() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearExtraSkills()
	return apuo
}

// AddApplicantInterestIDs adds the "applicant_interests" edge to the ApplicantInterest entity by IDs.
func (apuo *ApplicantProfileUpdateOne) AddApplicantInterestIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.AddApplicantInterestIDs(ids...)
	return apuo
}

// AddApplicantInterests adds the "applicant_interests" edges to the ApplicantInterest entity.
func (apuo *ApplicantProfileUpdateOne) AddApplicantInterests(a ...*ApplicantInterest) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddApplicantInterestIDs(ids...)
}

// AddApplicantProfileSkillIDs adds the "applicant_profile_skills" edge to the ApplicantProfileSkill entity by IDs.
func (apuo *ApplicantProfileUpdateOne) AddApplicantProfileSkillIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.AddApplicantProfileSkillIDs(ids...)
	return apuo
}

// AddApplicantProfileSkills adds the "applicant_profile_skills" edges to the ApplicantProfileSkill entity.
func (apuo *ApplicantProfileUpdateOne) AddApplicantProfileSkills(a ...*ApplicantProfileSkill) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddApplicantProfileSkillIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (apuo *ApplicantProfileUpdateOne) SetUser(u *User) *ApplicantProfileUpdateOne {
	return apuo.SetUserID(u.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (apuo *ApplicantProfileUpdateOne) AddApplicationIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.AddApplicationIDs(ids...)
	return apuo
}

// AddApplications adds the "applications" edges to the Application entity.
func (apuo *ApplicantProfileUpdateOne) AddApplications(a ...*Application) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddApplicationIDs(ids...)
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (apuo *ApplicantProfileUpdateOne) AddEducationIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.AddEducationIDs(ids...)
	return apuo
}

// AddEducations adds the "educations" edges to the Education entity.
func (apuo *ApplicantProfileUpdateOne) AddEducations(e ...*Education) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return apuo.AddEducationIDs(ids...)
}

// AddLanguageIDs adds the "languages" edge to the Language entity by IDs.
func (apuo *ApplicantProfileUpdateOne) AddLanguageIDs(ids ...uint) *ApplicantProfileUpdateOne {
	apuo.mutation.AddLanguageIDs(ids...)
	return apuo
}

// AddLanguages adds the "languages" edges to the Language entity.
func (apuo *ApplicantProfileUpdateOne) AddLanguages(l ...*Language) *ApplicantProfileUpdateOne {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return apuo.AddLanguageIDs(ids...)
}

// AddWorkExperienceIDs adds the "work_experiences" edge to the WorkExperience entity by IDs.
func (apuo *ApplicantProfileUpdateOne) AddWorkExperienceIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.AddWorkExperienceIDs(ids...)
	return apuo
}

// AddWorkExperiences adds the "work_experiences" edges to the WorkExperience entity.
func (apuo *ApplicantProfileUpdateOne) AddWorkExperiences(w ...*WorkExperience) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return apuo.AddWorkExperienceIDs(ids...)
}

// Mutation returns the ApplicantProfileMutation object of the builder.
func (apuo *ApplicantProfileUpdateOne) Mutation() *ApplicantProfileMutation {
	return apuo.mutation
}

// ClearApplicantInterests clears all "applicant_interests" edges to the ApplicantInterest entity.
func (apuo *ApplicantProfileUpdateOne) ClearApplicantInterests() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearApplicantInterests()
	return apuo
}

// RemoveApplicantInterestIDs removes the "applicant_interests" edge to ApplicantInterest entities by IDs.
func (apuo *ApplicantProfileUpdateOne) RemoveApplicantInterestIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.RemoveApplicantInterestIDs(ids...)
	return apuo
}

// RemoveApplicantInterests removes "applicant_interests" edges to ApplicantInterest entities.
func (apuo *ApplicantProfileUpdateOne) RemoveApplicantInterests(a ...*ApplicantInterest) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveApplicantInterestIDs(ids...)
}

// ClearApplicantProfileSkills clears all "applicant_profile_skills" edges to the ApplicantProfileSkill entity.
func (apuo *ApplicantProfileUpdateOne) ClearApplicantProfileSkills() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearApplicantProfileSkills()
	return apuo
}

// RemoveApplicantProfileSkillIDs removes the "applicant_profile_skills" edge to ApplicantProfileSkill entities by IDs.
func (apuo *ApplicantProfileUpdateOne) RemoveApplicantProfileSkillIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.RemoveApplicantProfileSkillIDs(ids...)
	return apuo
}

// RemoveApplicantProfileSkills removes "applicant_profile_skills" edges to ApplicantProfileSkill entities.
func (apuo *ApplicantProfileUpdateOne) RemoveApplicantProfileSkills(a ...*ApplicantProfileSkill) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveApplicantProfileSkillIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (apuo *ApplicantProfileUpdateOne) ClearUser() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearUser()
	return apuo
}

// ClearApplications clears all "applications" edges to the Application entity.
func (apuo *ApplicantProfileUpdateOne) ClearApplications() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearApplications()
	return apuo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (apuo *ApplicantProfileUpdateOne) RemoveApplicationIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.RemoveApplicationIDs(ids...)
	return apuo
}

// RemoveApplications removes "applications" edges to Application entities.
func (apuo *ApplicantProfileUpdateOne) RemoveApplications(a ...*Application) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveApplicationIDs(ids...)
}

// ClearEducations clears all "educations" edges to the Education entity.
func (apuo *ApplicantProfileUpdateOne) ClearEducations() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearEducations()
	return apuo
}

// RemoveEducationIDs removes the "educations" edge to Education entities by IDs.
func (apuo *ApplicantProfileUpdateOne) RemoveEducationIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.RemoveEducationIDs(ids...)
	return apuo
}

// RemoveEducations removes "educations" edges to Education entities.
func (apuo *ApplicantProfileUpdateOne) RemoveEducations(e ...*Education) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return apuo.RemoveEducationIDs(ids...)
}

// ClearLanguages clears all "languages" edges to the Language entity.
func (apuo *ApplicantProfileUpdateOne) ClearLanguages() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearLanguages()
	return apuo
}

// RemoveLanguageIDs removes the "languages" edge to Language entities by IDs.
func (apuo *ApplicantProfileUpdateOne) RemoveLanguageIDs(ids ...uint) *ApplicantProfileUpdateOne {
	apuo.mutation.RemoveLanguageIDs(ids...)
	return apuo
}

// RemoveLanguages removes "languages" edges to Language entities.
func (apuo *ApplicantProfileUpdateOne) RemoveLanguages(l ...*Language) *ApplicantProfileUpdateOne {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return apuo.RemoveLanguageIDs(ids...)
}

// ClearWorkExperiences clears all "work_experiences" edges to the WorkExperience entity.
func (apuo *ApplicantProfileUpdateOne) ClearWorkExperiences() *ApplicantProfileUpdateOne {
	apuo.mutation.ClearWorkExperiences()
	return apuo
}

// RemoveWorkExperienceIDs removes the "work_experiences" edge to WorkExperience entities by IDs.
func (apuo *ApplicantProfileUpdateOne) RemoveWorkExperienceIDs(ids ...uuid.UUID) *ApplicantProfileUpdateOne {
	apuo.mutation.RemoveWorkExperienceIDs(ids...)
	return apuo
}

// RemoveWorkExperiences removes "work_experiences" edges to WorkExperience entities.
func (apuo *ApplicantProfileUpdateOne) RemoveWorkExperiences(w ...*WorkExperience) *ApplicantProfileUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return apuo.RemoveWorkExperienceIDs(ids...)
}

// Where appends a list predicates to the ApplicantProfileUpdate builder.
func (apuo *ApplicantProfileUpdateOne) Where(ps ...predicate.ApplicantProfile) *ApplicantProfileUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *ApplicantProfileUpdateOne) Select(field string, fields ...string) *ApplicantProfileUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated ApplicantProfile entity.
func (apuo *ApplicantProfileUpdateOne) Save(ctx context.Context) (*ApplicantProfile, error) {
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *ApplicantProfileUpdateOne) SaveX(ctx context.Context) *ApplicantProfile {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *ApplicantProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *ApplicantProfileUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apuo *ApplicantProfileUpdateOne) sqlSave(ctx context.Context) (_node *ApplicantProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(applicantprofile.Table, applicantprofile.Columns, sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplicantProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicantprofile.FieldID)
		for _, f := range fields {
			if !applicantprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicantprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.Birthday(); ok {
		_spec.SetField(applicantprofile.FieldBirthday, field.TypeTime, value)
	}
	if value, ok := apuo.mutation.Gender(); ok {
		_spec.SetField(applicantprofile.FieldGender, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Phone(); ok {
		_spec.SetField(applicantprofile.FieldPhone, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Address1(); ok {
		_spec.SetField(applicantprofile.FieldAddress1, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Address2(); ok {
		_spec.SetField(applicantprofile.FieldAddress2, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Cv(); ok {
		_spec.SetField(applicantprofile.FieldCv, field.TypeString, value)
	}
	if apuo.mutation.CvCleared() {
		_spec.ClearField(applicantprofile.FieldCv, field.TypeString)
	}
	if value, ok := apuo.mutation.InternalComments(); ok {
		_spec.SetField(applicantprofile.FieldInternalComments, field.TypeString, value)
	}
	if value, ok := apuo.mutation.ReceiveEmails(); ok {
		_spec.SetField(applicantprofile.FieldReceiveEmails, field.TypeBool, value)
	}
	if value, ok := apuo.mutation.CreatedAt(); ok {
		_spec.SetField(applicantprofile.FieldCreatedAt, field.TypeTime, value)
	}
	if apuo.mutation.CreatedAtCleared() {
		_spec.ClearField(applicantprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(applicantprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if apuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(applicantprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.DeletedAt(); ok {
		_spec.SetField(applicantprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if apuo.mutation.DeletedAtCleared() {
		_spec.ClearField(applicantprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.ExtraSkills(); ok {
		_spec.SetField(applicantprofile.FieldExtraSkills, field.TypeJSON, value)
	}
	if apuo.mutation.ExtraSkillsCleared() {
		_spec.ClearField(applicantprofile.FieldExtraSkills, field.TypeJSON)
	}
	if apuo.mutation.ApplicantInterestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantInterestsTable,
			Columns: []string{applicantprofile.ApplicantInterestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedApplicantInterestsIDs(); len(nodes) > 0 && !apuo.mutation.ApplicantInterestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantInterestsTable,
			Columns: []string{applicantprofile.ApplicantInterestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ApplicantInterestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantInterestsTable,
			Columns: []string{applicantprofile.ApplicantInterestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.ApplicantProfileSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantProfileSkillsTable,
			Columns: []string{applicantprofile.ApplicantProfileSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedApplicantProfileSkillsIDs(); len(nodes) > 0 && !apuo.mutation.ApplicantProfileSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantProfileSkillsTable,
			Columns: []string{applicantprofile.ApplicantProfileSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ApplicantProfileSkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicantProfileSkillsTable,
			Columns: []string{applicantprofile.ApplicantProfileSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantprofile.UserTable,
			Columns: []string{applicantprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicantprofile.UserTable,
			Columns: []string{applicantprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicationsTable,
			Columns: []string{applicantprofile.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !apuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicationsTable,
			Columns: []string{applicantprofile.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.ApplicationsTable,
			Columns: []string{applicantprofile.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.EducationsTable,
			Columns: []string{applicantprofile.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !apuo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.EducationsTable,
			Columns: []string{applicantprofile.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.EducationsTable,
			Columns: []string{applicantprofile.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.LanguagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.LanguagesTable,
			Columns: []string{applicantprofile.LanguagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedLanguagesIDs(); len(nodes) > 0 && !apuo.mutation.LanguagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.LanguagesTable,
			Columns: []string{applicantprofile.LanguagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.LanguagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.LanguagesTable,
			Columns: []string{applicantprofile.LanguagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.WorkExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.WorkExperiencesTable,
			Columns: []string{applicantprofile.WorkExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedWorkExperiencesIDs(); len(nodes) > 0 && !apuo.mutation.WorkExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.WorkExperiencesTable,
			Columns: []string{applicantprofile.WorkExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.WorkExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicantprofile.WorkExperiencesTable,
			Columns: []string{applicantprofile.WorkExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicantProfile{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicantprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
