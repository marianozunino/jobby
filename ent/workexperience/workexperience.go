// Code generated by ent, DO NOT EDIT.

package workexperience

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workexperience type in the database.
	Label = "work_experience"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "company"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldApplicantProfileID holds the string denoting the applicant_profile_id field in the database.
	FieldApplicantProfileID = "applicant_profile_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldInternalComments holds the string denoting the internal_comments field in the database.
	FieldInternalComments = "internal_comments"
	// EdgeApplicantProfile holds the string denoting the applicant_profile edge name in mutations.
	EdgeApplicantProfile = "applicant_profile"
	// Table holds the table name of the workexperience in the database.
	Table = "work_experience"
	// ApplicantProfileTable is the table that holds the applicant_profile relation/edge.
	ApplicantProfileTable = "work_experience"
	// ApplicantProfileInverseTable is the table name for the ApplicantProfile entity.
	// It exists in this package in order to avoid circular dependency with the "applicantprofile" package.
	ApplicantProfileInverseTable = "applicant_profiles"
	// ApplicantProfileColumn is the table column denoting the applicant_profile relation/edge.
	ApplicantProfileColumn = "applicant_profile_id"
)

// Columns holds all SQL columns for workexperience fields.
var Columns = []string{
	FieldID,
	FieldCompany,
	FieldPosition,
	FieldDescription,
	FieldStartDate,
	FieldEndDate,
	FieldApplicantProfileID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldInternalComments,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WorkExperience queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompany orders the results by the company field.
func ByCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompany, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByApplicantProfileID orders the results by the applicant_profile_id field.
func ByApplicantProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicantProfileID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByInternalComments orders the results by the internal_comments field.
func ByInternalComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalComments, opts...).ToFunc()
}

// ByApplicantProfileField orders the results by applicant_profile field.
func ByApplicantProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicantProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newApplicantProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicantProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicantProfileTable, ApplicantProfileColumn),
	)
}
