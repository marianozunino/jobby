// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofile"
	"github.com/marianozunino/cc-backend-go/ent/applicantprofileskill"
	"github.com/marianozunino/cc-backend-go/ent/predicate"
	"github.com/marianozunino/cc-backend-go/ent/skill"
)

// ApplicantProfileSkillQuery is the builder for querying ApplicantProfileSkill entities.
type ApplicantProfileSkillQuery struct {
	config
	ctx                  *QueryContext
	order                []applicantprofileskill.OrderOption
	inters               []Interceptor
	predicates           []predicate.ApplicantProfileSkill
	withApplicantProfile *ApplicantProfileQuery
	withSkill            *SkillQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ApplicantProfileSkillQuery builder.
func (apsq *ApplicantProfileSkillQuery) Where(ps ...predicate.ApplicantProfileSkill) *ApplicantProfileSkillQuery {
	apsq.predicates = append(apsq.predicates, ps...)
	return apsq
}

// Limit the number of records to be returned by this query.
func (apsq *ApplicantProfileSkillQuery) Limit(limit int) *ApplicantProfileSkillQuery {
	apsq.ctx.Limit = &limit
	return apsq
}

// Offset to start from.
func (apsq *ApplicantProfileSkillQuery) Offset(offset int) *ApplicantProfileSkillQuery {
	apsq.ctx.Offset = &offset
	return apsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (apsq *ApplicantProfileSkillQuery) Unique(unique bool) *ApplicantProfileSkillQuery {
	apsq.ctx.Unique = &unique
	return apsq
}

// Order specifies how the records should be ordered.
func (apsq *ApplicantProfileSkillQuery) Order(o ...applicantprofileskill.OrderOption) *ApplicantProfileSkillQuery {
	apsq.order = append(apsq.order, o...)
	return apsq
}

// QueryApplicantProfile chains the current query on the "applicant_profile" edge.
func (apsq *ApplicantProfileSkillQuery) QueryApplicantProfile() *ApplicantProfileQuery {
	query := (&ApplicantProfileClient{config: apsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofileskill.Table, applicantprofileskill.FieldID, selector),
			sqlgraph.To(applicantprofile.Table, applicantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicantprofileskill.ApplicantProfileTable, applicantprofileskill.ApplicantProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(apsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySkill chains the current query on the "skill" edge.
func (apsq *ApplicantProfileSkillQuery) QuerySkill() *SkillQuery {
	query := (&SkillClient{config: apsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(applicantprofileskill.Table, applicantprofileskill.FieldID, selector),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicantprofileskill.SkillTable, applicantprofileskill.SkillColumn),
		)
		fromU = sqlgraph.SetNeighbors(apsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ApplicantProfileSkill entity from the query.
// Returns a *NotFoundError when no ApplicantProfileSkill was found.
func (apsq *ApplicantProfileSkillQuery) First(ctx context.Context) (*ApplicantProfileSkill, error) {
	nodes, err := apsq.Limit(1).All(setContextOp(ctx, apsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{applicantprofileskill.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) FirstX(ctx context.Context) *ApplicantProfileSkill {
	node, err := apsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ApplicantProfileSkill ID from the query.
// Returns a *NotFoundError when no ApplicantProfileSkill ID was found.
func (apsq *ApplicantProfileSkillQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apsq.Limit(1).IDs(setContextOp(ctx, apsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{applicantprofileskill.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := apsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ApplicantProfileSkill entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ApplicantProfileSkill entity is found.
// Returns a *NotFoundError when no ApplicantProfileSkill entities are found.
func (apsq *ApplicantProfileSkillQuery) Only(ctx context.Context) (*ApplicantProfileSkill, error) {
	nodes, err := apsq.Limit(2).All(setContextOp(ctx, apsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{applicantprofileskill.Label}
	default:
		return nil, &NotSingularError{applicantprofileskill.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) OnlyX(ctx context.Context) *ApplicantProfileSkill {
	node, err := apsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ApplicantProfileSkill ID in the query.
// Returns a *NotSingularError when more than one ApplicantProfileSkill ID is found.
// Returns a *NotFoundError when no entities are found.
func (apsq *ApplicantProfileSkillQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apsq.Limit(2).IDs(setContextOp(ctx, apsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{applicantprofileskill.Label}
	default:
		err = &NotSingularError{applicantprofileskill.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := apsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ApplicantProfileSkills.
func (apsq *ApplicantProfileSkillQuery) All(ctx context.Context) ([]*ApplicantProfileSkill, error) {
	ctx = setContextOp(ctx, apsq.ctx, "All")
	if err := apsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ApplicantProfileSkill, *ApplicantProfileSkillQuery]()
	return withInterceptors[[]*ApplicantProfileSkill](ctx, apsq, qr, apsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) AllX(ctx context.Context) []*ApplicantProfileSkill {
	nodes, err := apsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ApplicantProfileSkill IDs.
func (apsq *ApplicantProfileSkillQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if apsq.ctx.Unique == nil && apsq.path != nil {
		apsq.Unique(true)
	}
	ctx = setContextOp(ctx, apsq.ctx, "IDs")
	if err = apsq.Select(applicantprofileskill.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := apsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (apsq *ApplicantProfileSkillQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, apsq.ctx, "Count")
	if err := apsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, apsq, querierCount[*ApplicantProfileSkillQuery](), apsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) CountX(ctx context.Context) int {
	count, err := apsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (apsq *ApplicantProfileSkillQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, apsq.ctx, "Exist")
	switch _, err := apsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (apsq *ApplicantProfileSkillQuery) ExistX(ctx context.Context) bool {
	exist, err := apsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ApplicantProfileSkillQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (apsq *ApplicantProfileSkillQuery) Clone() *ApplicantProfileSkillQuery {
	if apsq == nil {
		return nil
	}
	return &ApplicantProfileSkillQuery{
		config:               apsq.config,
		ctx:                  apsq.ctx.Clone(),
		order:                append([]applicantprofileskill.OrderOption{}, apsq.order...),
		inters:               append([]Interceptor{}, apsq.inters...),
		predicates:           append([]predicate.ApplicantProfileSkill{}, apsq.predicates...),
		withApplicantProfile: apsq.withApplicantProfile.Clone(),
		withSkill:            apsq.withSkill.Clone(),
		// clone intermediate query.
		sql:  apsq.sql.Clone(),
		path: apsq.path,
	}
}

// WithApplicantProfile tells the query-builder to eager-load the nodes that are connected to
// the "applicant_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (apsq *ApplicantProfileSkillQuery) WithApplicantProfile(opts ...func(*ApplicantProfileQuery)) *ApplicantProfileSkillQuery {
	query := (&ApplicantProfileClient{config: apsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apsq.withApplicantProfile = query
	return apsq
}

// WithSkill tells the query-builder to eager-load the nodes that are connected to
// the "skill" edge. The optional arguments are used to configure the query builder of the edge.
func (apsq *ApplicantProfileSkillQuery) WithSkill(opts ...func(*SkillQuery)) *ApplicantProfileSkillQuery {
	query := (&SkillClient{config: apsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apsq.withSkill = query
	return apsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicantProfileID uuid.UUID `json:"applicant_profile_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ApplicantProfileSkill.Query().
//		GroupBy(applicantprofileskill.FieldApplicantProfileID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (apsq *ApplicantProfileSkillQuery) GroupBy(field string, fields ...string) *ApplicantProfileSkillGroupBy {
	apsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ApplicantProfileSkillGroupBy{build: apsq}
	grbuild.flds = &apsq.ctx.Fields
	grbuild.label = applicantprofileskill.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicantProfileID uuid.UUID `json:"applicant_profile_id,omitempty"`
//	}
//
//	client.ApplicantProfileSkill.Query().
//		Select(applicantprofileskill.FieldApplicantProfileID).
//		Scan(ctx, &v)
func (apsq *ApplicantProfileSkillQuery) Select(fields ...string) *ApplicantProfileSkillSelect {
	apsq.ctx.Fields = append(apsq.ctx.Fields, fields...)
	sbuild := &ApplicantProfileSkillSelect{ApplicantProfileSkillQuery: apsq}
	sbuild.label = applicantprofileskill.Label
	sbuild.flds, sbuild.scan = &apsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ApplicantProfileSkillSelect configured with the given aggregations.
func (apsq *ApplicantProfileSkillQuery) Aggregate(fns ...AggregateFunc) *ApplicantProfileSkillSelect {
	return apsq.Select().Aggregate(fns...)
}

func (apsq *ApplicantProfileSkillQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range apsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, apsq); err != nil {
				return err
			}
		}
	}
	for _, f := range apsq.ctx.Fields {
		if !applicantprofileskill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if apsq.path != nil {
		prev, err := apsq.path(ctx)
		if err != nil {
			return err
		}
		apsq.sql = prev
	}
	return nil
}

func (apsq *ApplicantProfileSkillQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ApplicantProfileSkill, error) {
	var (
		nodes       = []*ApplicantProfileSkill{}
		_spec       = apsq.querySpec()
		loadedTypes = [2]bool{
			apsq.withApplicantProfile != nil,
			apsq.withSkill != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ApplicantProfileSkill).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ApplicantProfileSkill{config: apsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, apsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := apsq.withApplicantProfile; query != nil {
		if err := apsq.loadApplicantProfile(ctx, query, nodes, nil,
			func(n *ApplicantProfileSkill, e *ApplicantProfile) { n.Edges.ApplicantProfile = e }); err != nil {
			return nil, err
		}
	}
	if query := apsq.withSkill; query != nil {
		if err := apsq.loadSkill(ctx, query, nodes, nil,
			func(n *ApplicantProfileSkill, e *Skill) { n.Edges.Skill = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (apsq *ApplicantProfileSkillQuery) loadApplicantProfile(ctx context.Context, query *ApplicantProfileQuery, nodes []*ApplicantProfileSkill, init func(*ApplicantProfileSkill), assign func(*ApplicantProfileSkill, *ApplicantProfile)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ApplicantProfileSkill)
	for i := range nodes {
		fk := nodes[i].ApplicantProfileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(applicantprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "applicant_profile_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (apsq *ApplicantProfileSkillQuery) loadSkill(ctx context.Context, query *SkillQuery, nodes []*ApplicantProfileSkill, init func(*ApplicantProfileSkill), assign func(*ApplicantProfileSkill, *Skill)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ApplicantProfileSkill)
	for i := range nodes {
		fk := nodes[i].SkillID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(skill.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "skill_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (apsq *ApplicantProfileSkillQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := apsq.querySpec()
	_spec.Node.Columns = apsq.ctx.Fields
	if len(apsq.ctx.Fields) > 0 {
		_spec.Unique = apsq.ctx.Unique != nil && *apsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, apsq.driver, _spec)
}

func (apsq *ApplicantProfileSkillQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(applicantprofileskill.Table, applicantprofileskill.Columns, sqlgraph.NewFieldSpec(applicantprofileskill.FieldID, field.TypeUUID))
	_spec.From = apsq.sql
	if unique := apsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if apsq.path != nil {
		_spec.Unique = true
	}
	if fields := apsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicantprofileskill.FieldID)
		for i := range fields {
			if fields[i] != applicantprofileskill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if apsq.withApplicantProfile != nil {
			_spec.Node.AddColumnOnce(applicantprofileskill.FieldApplicantProfileID)
		}
		if apsq.withSkill != nil {
			_spec.Node.AddColumnOnce(applicantprofileskill.FieldSkillID)
		}
	}
	if ps := apsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := apsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := apsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := apsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (apsq *ApplicantProfileSkillQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(apsq.driver.Dialect())
	t1 := builder.Table(applicantprofileskill.Table)
	columns := apsq.ctx.Fields
	if len(columns) == 0 {
		columns = applicantprofileskill.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if apsq.sql != nil {
		selector = apsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if apsq.ctx.Unique != nil && *apsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range apsq.predicates {
		p(selector)
	}
	for _, p := range apsq.order {
		p(selector)
	}
	if offset := apsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := apsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ApplicantProfileSkillGroupBy is the group-by builder for ApplicantProfileSkill entities.
type ApplicantProfileSkillGroupBy struct {
	selector
	build *ApplicantProfileSkillQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (apsgb *ApplicantProfileSkillGroupBy) Aggregate(fns ...AggregateFunc) *ApplicantProfileSkillGroupBy {
	apsgb.fns = append(apsgb.fns, fns...)
	return apsgb
}

// Scan applies the selector query and scans the result into the given value.
func (apsgb *ApplicantProfileSkillGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, apsgb.build.ctx, "GroupBy")
	if err := apsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApplicantProfileSkillQuery, *ApplicantProfileSkillGroupBy](ctx, apsgb.build, apsgb, apsgb.build.inters, v)
}

func (apsgb *ApplicantProfileSkillGroupBy) sqlScan(ctx context.Context, root *ApplicantProfileSkillQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(apsgb.fns))
	for _, fn := range apsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*apsgb.flds)+len(apsgb.fns))
		for _, f := range *apsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*apsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ApplicantProfileSkillSelect is the builder for selecting fields of ApplicantProfileSkill entities.
type ApplicantProfileSkillSelect struct {
	*ApplicantProfileSkillQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (apss *ApplicantProfileSkillSelect) Aggregate(fns ...AggregateFunc) *ApplicantProfileSkillSelect {
	apss.fns = append(apss.fns, fns...)
	return apss
}

// Scan applies the selector query and scans the result into the given value.
func (apss *ApplicantProfileSkillSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, apss.ctx, "Select")
	if err := apss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApplicantProfileSkillQuery, *ApplicantProfileSkillSelect](ctx, apss.ApplicantProfileSkillQuery, apss, apss.inters, v)
}

func (apss *ApplicantProfileSkillSelect) sqlScan(ctx context.Context, root *ApplicantProfileSkillQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(apss.fns))
	for _, fn := range apss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*apss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
