// Code generated by ent, DO NOT EDIT.

package joboffer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldTitle, v))
}

// Reference applies equality check predicate on the "reference" field. It's identical to ReferenceEQ.
func Reference(v int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldReference, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldEndDate, v))
}

// Address1 applies equality check predicate on the "address1" field. It's identical to Address1EQ.
func Address1(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldAddress1, v))
}

// Address2 applies equality check predicate on the "address2" field. It's identical to Address2EQ.
func Address2(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldAddress2, v))
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldDepartment, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldDescription, v))
}

// WorkingHours applies equality check predicate on the "working_hours" field. It's identical to WorkingHoursEQ.
func WorkingHours(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldWorkingHours, v))
}

// Salary applies equality check predicate on the "salary" field. It's identical to SalaryEQ.
func Salary(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldSalary, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldSlug, v))
}

// IsFeatured applies equality check predicate on the "is_featured" field. It's identical to IsFeaturedEQ.
func IsFeatured(v bool) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldIsFeatured, v))
}

// HasBeenEmailed applies equality check predicate on the "has_been_emailed" field. It's identical to HasBeenEmailedEQ.
func HasBeenEmailed(v bool) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldHasBeenEmailed, v))
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldStatusID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldDeletedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldTitle, v))
}

// ReferenceEQ applies the EQ predicate on the "reference" field.
func ReferenceEQ(v int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldReference, v))
}

// ReferenceNEQ applies the NEQ predicate on the "reference" field.
func ReferenceNEQ(v int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldReference, v))
}

// ReferenceIn applies the In predicate on the "reference" field.
func ReferenceIn(vs ...int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldReference, vs...))
}

// ReferenceNotIn applies the NotIn predicate on the "reference" field.
func ReferenceNotIn(vs ...int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldReference, vs...))
}

// ReferenceGT applies the GT predicate on the "reference" field.
func ReferenceGT(v int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldReference, v))
}

// ReferenceGTE applies the GTE predicate on the "reference" field.
func ReferenceGTE(v int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldReference, v))
}

// ReferenceLT applies the LT predicate on the "reference" field.
func ReferenceLT(v int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldReference, v))
}

// ReferenceLTE applies the LTE predicate on the "reference" field.
func ReferenceLTE(v int32) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldReference, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldEndDate, v))
}

// Address1EQ applies the EQ predicate on the "address1" field.
func Address1EQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldAddress1, v))
}

// Address1NEQ applies the NEQ predicate on the "address1" field.
func Address1NEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldAddress1, v))
}

// Address1In applies the In predicate on the "address1" field.
func Address1In(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldAddress1, vs...))
}

// Address1NotIn applies the NotIn predicate on the "address1" field.
func Address1NotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldAddress1, vs...))
}

// Address1GT applies the GT predicate on the "address1" field.
func Address1GT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldAddress1, v))
}

// Address1GTE applies the GTE predicate on the "address1" field.
func Address1GTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldAddress1, v))
}

// Address1LT applies the LT predicate on the "address1" field.
func Address1LT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldAddress1, v))
}

// Address1LTE applies the LTE predicate on the "address1" field.
func Address1LTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldAddress1, v))
}

// Address1Contains applies the Contains predicate on the "address1" field.
func Address1Contains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldAddress1, v))
}

// Address1HasPrefix applies the HasPrefix predicate on the "address1" field.
func Address1HasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldAddress1, v))
}

// Address1HasSuffix applies the HasSuffix predicate on the "address1" field.
func Address1HasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldAddress1, v))
}

// Address1IsNil applies the IsNil predicate on the "address1" field.
func Address1IsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldAddress1))
}

// Address1NotNil applies the NotNil predicate on the "address1" field.
func Address1NotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldAddress1))
}

// Address1EqualFold applies the EqualFold predicate on the "address1" field.
func Address1EqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldAddress1, v))
}

// Address1ContainsFold applies the ContainsFold predicate on the "address1" field.
func Address1ContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldAddress1, v))
}

// Address2EQ applies the EQ predicate on the "address2" field.
func Address2EQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldAddress2, v))
}

// Address2NEQ applies the NEQ predicate on the "address2" field.
func Address2NEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldAddress2, v))
}

// Address2In applies the In predicate on the "address2" field.
func Address2In(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldAddress2, vs...))
}

// Address2NotIn applies the NotIn predicate on the "address2" field.
func Address2NotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldAddress2, vs...))
}

// Address2GT applies the GT predicate on the "address2" field.
func Address2GT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldAddress2, v))
}

// Address2GTE applies the GTE predicate on the "address2" field.
func Address2GTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldAddress2, v))
}

// Address2LT applies the LT predicate on the "address2" field.
func Address2LT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldAddress2, v))
}

// Address2LTE applies the LTE predicate on the "address2" field.
func Address2LTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldAddress2, v))
}

// Address2Contains applies the Contains predicate on the "address2" field.
func Address2Contains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldAddress2, v))
}

// Address2HasPrefix applies the HasPrefix predicate on the "address2" field.
func Address2HasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldAddress2, v))
}

// Address2HasSuffix applies the HasSuffix predicate on the "address2" field.
func Address2HasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldAddress2, v))
}

// Address2IsNil applies the IsNil predicate on the "address2" field.
func Address2IsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldAddress2))
}

// Address2NotNil applies the NotNil predicate on the "address2" field.
func Address2NotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldAddress2))
}

// Address2EqualFold applies the EqualFold predicate on the "address2" field.
func Address2EqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldAddress2, v))
}

// Address2ContainsFold applies the ContainsFold predicate on the "address2" field.
func Address2ContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldAddress2, v))
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldDepartment, vs...))
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldDepartment, v))
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldDepartment, v))
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldDepartment, v))
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldDepartment, v))
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldDepartment, v))
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldDepartment, v))
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldDepartment, v))
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldDepartment, v))
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldDepartment, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldDescription, v))
}

// WorkingHoursEQ applies the EQ predicate on the "working_hours" field.
func WorkingHoursEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldWorkingHours, v))
}

// WorkingHoursNEQ applies the NEQ predicate on the "working_hours" field.
func WorkingHoursNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldWorkingHours, v))
}

// WorkingHoursIn applies the In predicate on the "working_hours" field.
func WorkingHoursIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldWorkingHours, vs...))
}

// WorkingHoursNotIn applies the NotIn predicate on the "working_hours" field.
func WorkingHoursNotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldWorkingHours, vs...))
}

// WorkingHoursGT applies the GT predicate on the "working_hours" field.
func WorkingHoursGT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldWorkingHours, v))
}

// WorkingHoursGTE applies the GTE predicate on the "working_hours" field.
func WorkingHoursGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldWorkingHours, v))
}

// WorkingHoursLT applies the LT predicate on the "working_hours" field.
func WorkingHoursLT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldWorkingHours, v))
}

// WorkingHoursLTE applies the LTE predicate on the "working_hours" field.
func WorkingHoursLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldWorkingHours, v))
}

// WorkingHoursContains applies the Contains predicate on the "working_hours" field.
func WorkingHoursContains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldWorkingHours, v))
}

// WorkingHoursHasPrefix applies the HasPrefix predicate on the "working_hours" field.
func WorkingHoursHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldWorkingHours, v))
}

// WorkingHoursHasSuffix applies the HasSuffix predicate on the "working_hours" field.
func WorkingHoursHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldWorkingHours, v))
}

// WorkingHoursEqualFold applies the EqualFold predicate on the "working_hours" field.
func WorkingHoursEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldWorkingHours, v))
}

// WorkingHoursContainsFold applies the ContainsFold predicate on the "working_hours" field.
func WorkingHoursContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldWorkingHours, v))
}

// SalaryEQ applies the EQ predicate on the "salary" field.
func SalaryEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldSalary, v))
}

// SalaryNEQ applies the NEQ predicate on the "salary" field.
func SalaryNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldSalary, v))
}

// SalaryIn applies the In predicate on the "salary" field.
func SalaryIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldSalary, vs...))
}

// SalaryNotIn applies the NotIn predicate on the "salary" field.
func SalaryNotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldSalary, vs...))
}

// SalaryGT applies the GT predicate on the "salary" field.
func SalaryGT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldSalary, v))
}

// SalaryGTE applies the GTE predicate on the "salary" field.
func SalaryGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldSalary, v))
}

// SalaryLT applies the LT predicate on the "salary" field.
func SalaryLT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldSalary, v))
}

// SalaryLTE applies the LTE predicate on the "salary" field.
func SalaryLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldSalary, v))
}

// SalaryContains applies the Contains predicate on the "salary" field.
func SalaryContains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldSalary, v))
}

// SalaryHasPrefix applies the HasPrefix predicate on the "salary" field.
func SalaryHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldSalary, v))
}

// SalaryHasSuffix applies the HasSuffix predicate on the "salary" field.
func SalaryHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldSalary, v))
}

// SalaryEqualFold applies the EqualFold predicate on the "salary" field.
func SalaryEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldSalary, v))
}

// SalaryContainsFold applies the ContainsFold predicate on the "salary" field.
func SalaryContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldSalary, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldContainsFold(FieldSlug, v))
}

// IsFeaturedEQ applies the EQ predicate on the "is_featured" field.
func IsFeaturedEQ(v bool) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldIsFeatured, v))
}

// IsFeaturedNEQ applies the NEQ predicate on the "is_featured" field.
func IsFeaturedNEQ(v bool) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldIsFeatured, v))
}

// IsFeaturedIsNil applies the IsNil predicate on the "is_featured" field.
func IsFeaturedIsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldIsFeatured))
}

// IsFeaturedNotNil applies the NotNil predicate on the "is_featured" field.
func IsFeaturedNotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldIsFeatured))
}

// HasBeenEmailedEQ applies the EQ predicate on the "has_been_emailed" field.
func HasBeenEmailedEQ(v bool) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldHasBeenEmailed, v))
}

// HasBeenEmailedNEQ applies the NEQ predicate on the "has_been_emailed" field.
func HasBeenEmailedNEQ(v bool) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldHasBeenEmailed, v))
}

// HasBeenEmailedIsNil applies the IsNil predicate on the "has_been_emailed" field.
func HasBeenEmailedIsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldHasBeenEmailed))
}

// HasBeenEmailedNotNil applies the NotNil predicate on the "has_been_emailed" field.
func HasBeenEmailedNotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldHasBeenEmailed))
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldStatusID, v))
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldStatusID, v))
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldStatusID, vs...))
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...uuid.UUID) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldStatusID, vs...))
}

// StatusIDIsNil applies the IsNil predicate on the "status_id" field.
func StatusIDIsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldStatusID))
}

// StatusIDNotNil applies the NotNil predicate on the "status_id" field.
func StatusIDNotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldStatusID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.JobOffer {
	return predicate.JobOffer(sql.FieldNotNull(FieldDeletedAt))
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := newApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobOfferCategories applies the HasEdge predicate on the "job_offer_categories" edge.
func HasJobOfferCategories() predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobOfferCategoriesTable, JobOfferCategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobOfferCategoriesWith applies the HasEdge predicate on the "job_offer_categories" edge with a given conditions (other predicates).
func HasJobOfferCategoriesWith(preds ...predicate.JobOfferCategory) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := newJobOfferCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.Status) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := newStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobOffer) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobOffer) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobOffer) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		p(s.Not())
	})
}
