// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/degreelevel"
	"github.com/marianozunino/jobby/ent/education"
)

// DegreeLevelCreate is the builder for creating a DegreeLevel entity.
type DegreeLevelCreate struct {
	config
	mutation *DegreeLevelMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dlc *DegreeLevelCreate) SetName(s string) *DegreeLevelCreate {
	dlc.mutation.SetName(s)
	return dlc
}

// SetCreatedAt sets the "created_at" field.
func (dlc *DegreeLevelCreate) SetCreatedAt(t time.Time) *DegreeLevelCreate {
	dlc.mutation.SetCreatedAt(t)
	return dlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dlc *DegreeLevelCreate) SetNillableCreatedAt(t *time.Time) *DegreeLevelCreate {
	if t != nil {
		dlc.SetCreatedAt(*t)
	}
	return dlc
}

// SetUpdatedAt sets the "updated_at" field.
func (dlc *DegreeLevelCreate) SetUpdatedAt(t time.Time) *DegreeLevelCreate {
	dlc.mutation.SetUpdatedAt(t)
	return dlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dlc *DegreeLevelCreate) SetNillableUpdatedAt(t *time.Time) *DegreeLevelCreate {
	if t != nil {
		dlc.SetUpdatedAt(*t)
	}
	return dlc
}

// SetDeletedAt sets the "deleted_at" field.
func (dlc *DegreeLevelCreate) SetDeletedAt(t time.Time) *DegreeLevelCreate {
	dlc.mutation.SetDeletedAt(t)
	return dlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dlc *DegreeLevelCreate) SetNillableDeletedAt(t *time.Time) *DegreeLevelCreate {
	if t != nil {
		dlc.SetDeletedAt(*t)
	}
	return dlc
}

// SetID sets the "id" field.
func (dlc *DegreeLevelCreate) SetID(u uuid.UUID) *DegreeLevelCreate {
	dlc.mutation.SetID(u)
	return dlc
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (dlc *DegreeLevelCreate) AddEducationIDs(ids ...uuid.UUID) *DegreeLevelCreate {
	dlc.mutation.AddEducationIDs(ids...)
	return dlc
}

// AddEducations adds the "educations" edges to the Education entity.
func (dlc *DegreeLevelCreate) AddEducations(e ...*Education) *DegreeLevelCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dlc.AddEducationIDs(ids...)
}

// Mutation returns the DegreeLevelMutation object of the builder.
func (dlc *DegreeLevelCreate) Mutation() *DegreeLevelMutation {
	return dlc.mutation
}

// Save creates the DegreeLevel in the database.
func (dlc *DegreeLevelCreate) Save(ctx context.Context) (*DegreeLevel, error) {
	return withHooks(ctx, dlc.sqlSave, dlc.mutation, dlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dlc *DegreeLevelCreate) SaveX(ctx context.Context) *DegreeLevel {
	v, err := dlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlc *DegreeLevelCreate) Exec(ctx context.Context) error {
	_, err := dlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlc *DegreeLevelCreate) ExecX(ctx context.Context) {
	if err := dlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dlc *DegreeLevelCreate) check() error {
	if _, ok := dlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DegreeLevel.name"`)}
	}
	return nil
}

func (dlc *DegreeLevelCreate) sqlSave(ctx context.Context) (*DegreeLevel, error) {
	if err := dlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dlc.mutation.id = &_node.ID
	dlc.mutation.done = true
	return _node, nil
}

func (dlc *DegreeLevelCreate) createSpec() (*DegreeLevel, *sqlgraph.CreateSpec) {
	var (
		_node = &DegreeLevel{config: dlc.config}
		_spec = sqlgraph.NewCreateSpec(degreelevel.Table, sqlgraph.NewFieldSpec(degreelevel.FieldID, field.TypeUUID))
	)
	if id, ok := dlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dlc.mutation.Name(); ok {
		_spec.SetField(degreelevel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dlc.mutation.CreatedAt(); ok {
		_spec.SetField(degreelevel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dlc.mutation.UpdatedAt(); ok {
		_spec.SetField(degreelevel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dlc.mutation.DeletedAt(); ok {
		_spec.SetField(degreelevel.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := dlc.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   degreelevel.EducationsTable,
			Columns: []string{degreelevel.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DegreeLevelCreateBulk is the builder for creating many DegreeLevel entities in bulk.
type DegreeLevelCreateBulk struct {
	config
	builders []*DegreeLevelCreate
}

// Save creates the DegreeLevel entities in the database.
func (dlcb *DegreeLevelCreateBulk) Save(ctx context.Context) ([]*DegreeLevel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dlcb.builders))
	nodes := make([]*DegreeLevel, len(dlcb.builders))
	mutators := make([]Mutator, len(dlcb.builders))
	for i := range dlcb.builders {
		func(i int, root context.Context) {
			builder := dlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DegreeLevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dlcb *DegreeLevelCreateBulk) SaveX(ctx context.Context) []*DegreeLevel {
	v, err := dlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlcb *DegreeLevelCreateBulk) Exec(ctx context.Context) error {
	_, err := dlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlcb *DegreeLevelCreateBulk) ExecX(ctx context.Context) {
	if err := dlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
