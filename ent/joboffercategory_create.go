// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/category"
	"github.com/marianozunino/cc-backend-go/ent/joboffer"
	"github.com/marianozunino/cc-backend-go/ent/joboffercategory"
)

// JobOfferCategoryCreate is the builder for creating a JobOfferCategory entity.
type JobOfferCategoryCreate struct {
	config
	mutation *JobOfferCategoryMutation
	hooks    []Hook
}

// SetJobOfferID sets the "job_offer_id" field.
func (jocc *JobOfferCategoryCreate) SetJobOfferID(u uuid.UUID) *JobOfferCategoryCreate {
	jocc.mutation.SetJobOfferID(u)
	return jocc
}

// SetCategoryID sets the "category_id" field.
func (jocc *JobOfferCategoryCreate) SetCategoryID(u uuid.UUID) *JobOfferCategoryCreate {
	jocc.mutation.SetCategoryID(u)
	return jocc
}

// SetCreatedAt sets the "created_at" field.
func (jocc *JobOfferCategoryCreate) SetCreatedAt(t time.Time) *JobOfferCategoryCreate {
	jocc.mutation.SetCreatedAt(t)
	return jocc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jocc *JobOfferCategoryCreate) SetNillableCreatedAt(t *time.Time) *JobOfferCategoryCreate {
	if t != nil {
		jocc.SetCreatedAt(*t)
	}
	return jocc
}

// SetUpdatedAt sets the "updated_at" field.
func (jocc *JobOfferCategoryCreate) SetUpdatedAt(t time.Time) *JobOfferCategoryCreate {
	jocc.mutation.SetUpdatedAt(t)
	return jocc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jocc *JobOfferCategoryCreate) SetNillableUpdatedAt(t *time.Time) *JobOfferCategoryCreate {
	if t != nil {
		jocc.SetUpdatedAt(*t)
	}
	return jocc
}

// SetDeletedAt sets the "deleted_at" field.
func (jocc *JobOfferCategoryCreate) SetDeletedAt(t time.Time) *JobOfferCategoryCreate {
	jocc.mutation.SetDeletedAt(t)
	return jocc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jocc *JobOfferCategoryCreate) SetNillableDeletedAt(t *time.Time) *JobOfferCategoryCreate {
	if t != nil {
		jocc.SetDeletedAt(*t)
	}
	return jocc
}

// SetID sets the "id" field.
func (jocc *JobOfferCategoryCreate) SetID(u uuid.UUID) *JobOfferCategoryCreate {
	jocc.mutation.SetID(u)
	return jocc
}

// SetCategory sets the "category" edge to the Category entity.
func (jocc *JobOfferCategoryCreate) SetCategory(c *Category) *JobOfferCategoryCreate {
	return jocc.SetCategoryID(c.ID)
}

// SetJobOffer sets the "job_offer" edge to the JobOffer entity.
func (jocc *JobOfferCategoryCreate) SetJobOffer(j *JobOffer) *JobOfferCategoryCreate {
	return jocc.SetJobOfferID(j.ID)
}

// Mutation returns the JobOfferCategoryMutation object of the builder.
func (jocc *JobOfferCategoryCreate) Mutation() *JobOfferCategoryMutation {
	return jocc.mutation
}

// Save creates the JobOfferCategory in the database.
func (jocc *JobOfferCategoryCreate) Save(ctx context.Context) (*JobOfferCategory, error) {
	return withHooks(ctx, jocc.sqlSave, jocc.mutation, jocc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jocc *JobOfferCategoryCreate) SaveX(ctx context.Context) *JobOfferCategory {
	v, err := jocc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jocc *JobOfferCategoryCreate) Exec(ctx context.Context) error {
	_, err := jocc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jocc *JobOfferCategoryCreate) ExecX(ctx context.Context) {
	if err := jocc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jocc *JobOfferCategoryCreate) check() error {
	if _, ok := jocc.mutation.JobOfferID(); !ok {
		return &ValidationError{Name: "job_offer_id", err: errors.New(`ent: missing required field "JobOfferCategory.job_offer_id"`)}
	}
	if _, ok := jocc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "JobOfferCategory.category_id"`)}
	}
	if _, ok := jocc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required edge "JobOfferCategory.category"`)}
	}
	if _, ok := jocc.mutation.JobOfferID(); !ok {
		return &ValidationError{Name: "job_offer", err: errors.New(`ent: missing required edge "JobOfferCategory.job_offer"`)}
	}
	return nil
}

func (jocc *JobOfferCategoryCreate) sqlSave(ctx context.Context) (*JobOfferCategory, error) {
	if err := jocc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jocc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jocc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jocc.mutation.id = &_node.ID
	jocc.mutation.done = true
	return _node, nil
}

func (jocc *JobOfferCategoryCreate) createSpec() (*JobOfferCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &JobOfferCategory{config: jocc.config}
		_spec = sqlgraph.NewCreateSpec(joboffercategory.Table, sqlgraph.NewFieldSpec(joboffercategory.FieldID, field.TypeUUID))
	)
	if id, ok := jocc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jocc.mutation.CreatedAt(); ok {
		_spec.SetField(joboffercategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jocc.mutation.UpdatedAt(); ok {
		_spec.SetField(joboffercategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jocc.mutation.DeletedAt(); ok {
		_spec.SetField(joboffercategory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := jocc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.CategoryTable,
			Columns: []string{joboffercategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jocc.mutation.JobOfferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joboffercategory.JobOfferTable,
			Columns: []string{joboffercategory.JobOfferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobOfferID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobOfferCategoryCreateBulk is the builder for creating many JobOfferCategory entities in bulk.
type JobOfferCategoryCreateBulk struct {
	config
	builders []*JobOfferCategoryCreate
}

// Save creates the JobOfferCategory entities in the database.
func (joccb *JobOfferCategoryCreateBulk) Save(ctx context.Context) ([]*JobOfferCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(joccb.builders))
	nodes := make([]*JobOfferCategory, len(joccb.builders))
	mutators := make([]Mutator, len(joccb.builders))
	for i := range joccb.builders {
		func(i int, root context.Context) {
			builder := joccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobOfferCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, joccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, joccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, joccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (joccb *JobOfferCategoryCreateBulk) SaveX(ctx context.Context) []*JobOfferCategory {
	v, err := joccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (joccb *JobOfferCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := joccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (joccb *JobOfferCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := joccb.Exec(ctx); err != nil {
		panic(err)
	}
}
