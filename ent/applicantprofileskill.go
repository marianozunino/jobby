// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/applicantprofile"
	"github.com/marianozunino/jobby/ent/applicantprofileskill"
	"github.com/marianozunino/jobby/ent/skill"
)

// ApplicantProfileSkill is the model entity for the ApplicantProfileSkill schema.
type ApplicantProfileSkill struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ApplicantProfileID holds the value of the "applicant_profile_id" field.
	ApplicantProfileID uuid.UUID `json:"applicant_profile_id,omitempty"`
	// Level holds the value of the "level" field.
	Level applicantprofileskill.Level `json:"level,omitempty"`
	// SkillID holds the value of the "skill_id" field.
	SkillID uuid.UUID `json:"skill_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicantProfileSkillQuery when eager-loading is set.
	Edges        ApplicantProfileSkillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApplicantProfileSkillEdges holds the relations/edges for other nodes in the graph.
type ApplicantProfileSkillEdges struct {
	// ApplicantProfile holds the value of the applicant_profile edge.
	ApplicantProfile *ApplicantProfile `json:"applicant_profile,omitempty"`
	// Skill holds the value of the skill edge.
	Skill *Skill `json:"skill,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicantProfileOrErr returns the ApplicantProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicantProfileSkillEdges) ApplicantProfileOrErr() (*ApplicantProfile, error) {
	if e.loadedTypes[0] {
		if e.ApplicantProfile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: applicantprofile.Label}
		}
		return e.ApplicantProfile, nil
	}
	return nil, &NotLoadedError{edge: "applicant_profile"}
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicantProfileSkillEdges) SkillOrErr() (*Skill, error) {
	if e.loadedTypes[1] {
		if e.Skill == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: skill.Label}
		}
		return e.Skill, nil
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicantProfileSkill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicantprofileskill.FieldLevel:
			values[i] = new(sql.NullString)
		case applicantprofileskill.FieldCreatedAt, applicantprofileskill.FieldUpdatedAt, applicantprofileskill.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case applicantprofileskill.FieldID, applicantprofileskill.FieldApplicantProfileID, applicantprofileskill.FieldSkillID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicantProfileSkill fields.
func (aps *ApplicantProfileSkill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicantprofileskill.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aps.ID = *value
			}
		case applicantprofileskill.FieldApplicantProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field applicant_profile_id", values[i])
			} else if value != nil {
				aps.ApplicantProfileID = *value
			}
		case applicantprofileskill.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				aps.Level = applicantprofileskill.Level(value.String)
			}
		case applicantprofileskill.FieldSkillID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field skill_id", values[i])
			} else if value != nil {
				aps.SkillID = *value
			}
		case applicantprofileskill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aps.CreatedAt = value.Time
			}
		case applicantprofileskill.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aps.UpdatedAt = value.Time
			}
		case applicantprofileskill.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aps.DeletedAt = value.Time
			}
		default:
			aps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplicantProfileSkill.
// This includes values selected through modifiers, order, etc.
func (aps *ApplicantProfileSkill) Value(name string) (ent.Value, error) {
	return aps.selectValues.Get(name)
}

// QueryApplicantProfile queries the "applicant_profile" edge of the ApplicantProfileSkill entity.
func (aps *ApplicantProfileSkill) QueryApplicantProfile() *ApplicantProfileQuery {
	return NewApplicantProfileSkillClient(aps.config).QueryApplicantProfile(aps)
}

// QuerySkill queries the "skill" edge of the ApplicantProfileSkill entity.
func (aps *ApplicantProfileSkill) QuerySkill() *SkillQuery {
	return NewApplicantProfileSkillClient(aps.config).QuerySkill(aps)
}

// Update returns a builder for updating this ApplicantProfileSkill.
// Note that you need to call ApplicantProfileSkill.Unwrap() before calling this method if this ApplicantProfileSkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (aps *ApplicantProfileSkill) Update() *ApplicantProfileSkillUpdateOne {
	return NewApplicantProfileSkillClient(aps.config).UpdateOne(aps)
}

// Unwrap unwraps the ApplicantProfileSkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aps *ApplicantProfileSkill) Unwrap() *ApplicantProfileSkill {
	_tx, ok := aps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicantProfileSkill is not a transactional entity")
	}
	aps.config.driver = _tx.drv
	return aps
}

// String implements the fmt.Stringer.
func (aps *ApplicantProfileSkill) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicantProfileSkill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aps.ID))
	builder.WriteString("applicant_profile_id=")
	builder.WriteString(fmt.Sprintf("%v", aps.ApplicantProfileID))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", aps.Level))
	builder.WriteString(", ")
	builder.WriteString("skill_id=")
	builder.WriteString(fmt.Sprintf("%v", aps.SkillID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aps.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(aps.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicantProfileSkills is a parsable slice of ApplicantProfileSkill.
type ApplicantProfileSkills []*ApplicantProfileSkill
