// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marianozunino/jobby/ent/applicantprofile"
	"github.com/marianozunino/jobby/ent/predicate"
	"github.com/marianozunino/jobby/ent/workexperience"
)

// WorkExperienceUpdate is the builder for updating WorkExperience entities.
type WorkExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *WorkExperienceMutation
}

// Where appends a list predicates to the WorkExperienceUpdate builder.
func (weu *WorkExperienceUpdate) Where(ps ...predicate.WorkExperience) *WorkExperienceUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetCompany sets the "company" field.
func (weu *WorkExperienceUpdate) SetCompany(s string) *WorkExperienceUpdate {
	weu.mutation.SetCompany(s)
	return weu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillableCompany(s *string) *WorkExperienceUpdate {
	if s != nil {
		weu.SetCompany(*s)
	}
	return weu
}

// ClearCompany clears the value of the "company" field.
func (weu *WorkExperienceUpdate) ClearCompany() *WorkExperienceUpdate {
	weu.mutation.ClearCompany()
	return weu
}

// SetPosition sets the "position" field.
func (weu *WorkExperienceUpdate) SetPosition(s string) *WorkExperienceUpdate {
	weu.mutation.SetPosition(s)
	return weu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillablePosition(s *string) *WorkExperienceUpdate {
	if s != nil {
		weu.SetPosition(*s)
	}
	return weu
}

// ClearPosition clears the value of the "position" field.
func (weu *WorkExperienceUpdate) ClearPosition() *WorkExperienceUpdate {
	weu.mutation.ClearPosition()
	return weu
}

// SetDescription sets the "description" field.
func (weu *WorkExperienceUpdate) SetDescription(s string) *WorkExperienceUpdate {
	weu.mutation.SetDescription(s)
	return weu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillableDescription(s *string) *WorkExperienceUpdate {
	if s != nil {
		weu.SetDescription(*s)
	}
	return weu
}

// ClearDescription clears the value of the "description" field.
func (weu *WorkExperienceUpdate) ClearDescription() *WorkExperienceUpdate {
	weu.mutation.ClearDescription()
	return weu
}

// SetStartDate sets the "start_date" field.
func (weu *WorkExperienceUpdate) SetStartDate(t time.Time) *WorkExperienceUpdate {
	weu.mutation.SetStartDate(t)
	return weu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillableStartDate(t *time.Time) *WorkExperienceUpdate {
	if t != nil {
		weu.SetStartDate(*t)
	}
	return weu
}

// ClearStartDate clears the value of the "start_date" field.
func (weu *WorkExperienceUpdate) ClearStartDate() *WorkExperienceUpdate {
	weu.mutation.ClearStartDate()
	return weu
}

// SetEndDate sets the "end_date" field.
func (weu *WorkExperienceUpdate) SetEndDate(t time.Time) *WorkExperienceUpdate {
	weu.mutation.SetEndDate(t)
	return weu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillableEndDate(t *time.Time) *WorkExperienceUpdate {
	if t != nil {
		weu.SetEndDate(*t)
	}
	return weu
}

// ClearEndDate clears the value of the "end_date" field.
func (weu *WorkExperienceUpdate) ClearEndDate() *WorkExperienceUpdate {
	weu.mutation.ClearEndDate()
	return weu
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (weu *WorkExperienceUpdate) SetApplicantProfileID(u uuid.UUID) *WorkExperienceUpdate {
	weu.mutation.SetApplicantProfileID(u)
	return weu
}

// SetNillableApplicantProfileID sets the "applicant_profile_id" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillableApplicantProfileID(u *uuid.UUID) *WorkExperienceUpdate {
	if u != nil {
		weu.SetApplicantProfileID(*u)
	}
	return weu
}

// ClearApplicantProfileID clears the value of the "applicant_profile_id" field.
func (weu *WorkExperienceUpdate) ClearApplicantProfileID() *WorkExperienceUpdate {
	weu.mutation.ClearApplicantProfileID()
	return weu
}

// SetCreatedAt sets the "created_at" field.
func (weu *WorkExperienceUpdate) SetCreatedAt(t time.Time) *WorkExperienceUpdate {
	weu.mutation.SetCreatedAt(t)
	return weu
}

// SetUpdatedAt sets the "updated_at" field.
func (weu *WorkExperienceUpdate) SetUpdatedAt(t time.Time) *WorkExperienceUpdate {
	weu.mutation.SetUpdatedAt(t)
	return weu
}

// SetDeletedAt sets the "deleted_at" field.
func (weu *WorkExperienceUpdate) SetDeletedAt(t time.Time) *WorkExperienceUpdate {
	weu.mutation.SetDeletedAt(t)
	return weu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillableDeletedAt(t *time.Time) *WorkExperienceUpdate {
	if t != nil {
		weu.SetDeletedAt(*t)
	}
	return weu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (weu *WorkExperienceUpdate) ClearDeletedAt() *WorkExperienceUpdate {
	weu.mutation.ClearDeletedAt()
	return weu
}

// SetInternalComments sets the "internal_comments" field.
func (weu *WorkExperienceUpdate) SetInternalComments(s string) *WorkExperienceUpdate {
	weu.mutation.SetInternalComments(s)
	return weu
}

// SetNillableInternalComments sets the "internal_comments" field if the given value is not nil.
func (weu *WorkExperienceUpdate) SetNillableInternalComments(s *string) *WorkExperienceUpdate {
	if s != nil {
		weu.SetInternalComments(*s)
	}
	return weu
}

// ClearInternalComments clears the value of the "internal_comments" field.
func (weu *WorkExperienceUpdate) ClearInternalComments() *WorkExperienceUpdate {
	weu.mutation.ClearInternalComments()
	return weu
}

// SetApplicantProfile sets the "applicant_profile" edge to the ApplicantProfile entity.
func (weu *WorkExperienceUpdate) SetApplicantProfile(a *ApplicantProfile) *WorkExperienceUpdate {
	return weu.SetApplicantProfileID(a.ID)
}

// Mutation returns the WorkExperienceMutation object of the builder.
func (weu *WorkExperienceUpdate) Mutation() *WorkExperienceMutation {
	return weu.mutation
}

// ClearApplicantProfile clears the "applicant_profile" edge to the ApplicantProfile entity.
func (weu *WorkExperienceUpdate) ClearApplicantProfile() *WorkExperienceUpdate {
	weu.mutation.ClearApplicantProfile()
	return weu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkExperienceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkExperienceUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkExperienceUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (weu *WorkExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workexperience.Table, workexperience.Columns, sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.Company(); ok {
		_spec.SetField(workexperience.FieldCompany, field.TypeString, value)
	}
	if weu.mutation.CompanyCleared() {
		_spec.ClearField(workexperience.FieldCompany, field.TypeString)
	}
	if value, ok := weu.mutation.Position(); ok {
		_spec.SetField(workexperience.FieldPosition, field.TypeString, value)
	}
	if weu.mutation.PositionCleared() {
		_spec.ClearField(workexperience.FieldPosition, field.TypeString)
	}
	if value, ok := weu.mutation.Description(); ok {
		_spec.SetField(workexperience.FieldDescription, field.TypeString, value)
	}
	if weu.mutation.DescriptionCleared() {
		_spec.ClearField(workexperience.FieldDescription, field.TypeString)
	}
	if value, ok := weu.mutation.StartDate(); ok {
		_spec.SetField(workexperience.FieldStartDate, field.TypeTime, value)
	}
	if weu.mutation.StartDateCleared() {
		_spec.ClearField(workexperience.FieldStartDate, field.TypeTime)
	}
	if value, ok := weu.mutation.EndDate(); ok {
		_spec.SetField(workexperience.FieldEndDate, field.TypeTime, value)
	}
	if weu.mutation.EndDateCleared() {
		_spec.ClearField(workexperience.FieldEndDate, field.TypeTime)
	}
	if value, ok := weu.mutation.CreatedAt(); ok {
		_spec.SetField(workexperience.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := weu.mutation.UpdatedAt(); ok {
		_spec.SetField(workexperience.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := weu.mutation.DeletedAt(); ok {
		_spec.SetField(workexperience.FieldDeletedAt, field.TypeTime, value)
	}
	if weu.mutation.DeletedAtCleared() {
		_spec.ClearField(workexperience.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := weu.mutation.InternalComments(); ok {
		_spec.SetField(workexperience.FieldInternalComments, field.TypeString, value)
	}
	if weu.mutation.InternalCommentsCleared() {
		_spec.ClearField(workexperience.FieldInternalComments, field.TypeString)
	}
	if weu.mutation.ApplicantProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperience.ApplicantProfileTable,
			Columns: []string{workexperience.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ApplicantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperience.ApplicantProfileTable,
			Columns: []string{workexperience.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WorkExperienceUpdateOne is the builder for updating a single WorkExperience entity.
type WorkExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkExperienceMutation
}

// SetCompany sets the "company" field.
func (weuo *WorkExperienceUpdateOne) SetCompany(s string) *WorkExperienceUpdateOne {
	weuo.mutation.SetCompany(s)
	return weuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillableCompany(s *string) *WorkExperienceUpdateOne {
	if s != nil {
		weuo.SetCompany(*s)
	}
	return weuo
}

// ClearCompany clears the value of the "company" field.
func (weuo *WorkExperienceUpdateOne) ClearCompany() *WorkExperienceUpdateOne {
	weuo.mutation.ClearCompany()
	return weuo
}

// SetPosition sets the "position" field.
func (weuo *WorkExperienceUpdateOne) SetPosition(s string) *WorkExperienceUpdateOne {
	weuo.mutation.SetPosition(s)
	return weuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillablePosition(s *string) *WorkExperienceUpdateOne {
	if s != nil {
		weuo.SetPosition(*s)
	}
	return weuo
}

// ClearPosition clears the value of the "position" field.
func (weuo *WorkExperienceUpdateOne) ClearPosition() *WorkExperienceUpdateOne {
	weuo.mutation.ClearPosition()
	return weuo
}

// SetDescription sets the "description" field.
func (weuo *WorkExperienceUpdateOne) SetDescription(s string) *WorkExperienceUpdateOne {
	weuo.mutation.SetDescription(s)
	return weuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillableDescription(s *string) *WorkExperienceUpdateOne {
	if s != nil {
		weuo.SetDescription(*s)
	}
	return weuo
}

// ClearDescription clears the value of the "description" field.
func (weuo *WorkExperienceUpdateOne) ClearDescription() *WorkExperienceUpdateOne {
	weuo.mutation.ClearDescription()
	return weuo
}

// SetStartDate sets the "start_date" field.
func (weuo *WorkExperienceUpdateOne) SetStartDate(t time.Time) *WorkExperienceUpdateOne {
	weuo.mutation.SetStartDate(t)
	return weuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillableStartDate(t *time.Time) *WorkExperienceUpdateOne {
	if t != nil {
		weuo.SetStartDate(*t)
	}
	return weuo
}

// ClearStartDate clears the value of the "start_date" field.
func (weuo *WorkExperienceUpdateOne) ClearStartDate() *WorkExperienceUpdateOne {
	weuo.mutation.ClearStartDate()
	return weuo
}

// SetEndDate sets the "end_date" field.
func (weuo *WorkExperienceUpdateOne) SetEndDate(t time.Time) *WorkExperienceUpdateOne {
	weuo.mutation.SetEndDate(t)
	return weuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillableEndDate(t *time.Time) *WorkExperienceUpdateOne {
	if t != nil {
		weuo.SetEndDate(*t)
	}
	return weuo
}

// ClearEndDate clears the value of the "end_date" field.
func (weuo *WorkExperienceUpdateOne) ClearEndDate() *WorkExperienceUpdateOne {
	weuo.mutation.ClearEndDate()
	return weuo
}

// SetApplicantProfileID sets the "applicant_profile_id" field.
func (weuo *WorkExperienceUpdateOne) SetApplicantProfileID(u uuid.UUID) *WorkExperienceUpdateOne {
	weuo.mutation.SetApplicantProfileID(u)
	return weuo
}

// SetNillableApplicantProfileID sets the "applicant_profile_id" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillableApplicantProfileID(u *uuid.UUID) *WorkExperienceUpdateOne {
	if u != nil {
		weuo.SetApplicantProfileID(*u)
	}
	return weuo
}

// ClearApplicantProfileID clears the value of the "applicant_profile_id" field.
func (weuo *WorkExperienceUpdateOne) ClearApplicantProfileID() *WorkExperienceUpdateOne {
	weuo.mutation.ClearApplicantProfileID()
	return weuo
}

// SetCreatedAt sets the "created_at" field.
func (weuo *WorkExperienceUpdateOne) SetCreatedAt(t time.Time) *WorkExperienceUpdateOne {
	weuo.mutation.SetCreatedAt(t)
	return weuo
}

// SetUpdatedAt sets the "updated_at" field.
func (weuo *WorkExperienceUpdateOne) SetUpdatedAt(t time.Time) *WorkExperienceUpdateOne {
	weuo.mutation.SetUpdatedAt(t)
	return weuo
}

// SetDeletedAt sets the "deleted_at" field.
func (weuo *WorkExperienceUpdateOne) SetDeletedAt(t time.Time) *WorkExperienceUpdateOne {
	weuo.mutation.SetDeletedAt(t)
	return weuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillableDeletedAt(t *time.Time) *WorkExperienceUpdateOne {
	if t != nil {
		weuo.SetDeletedAt(*t)
	}
	return weuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (weuo *WorkExperienceUpdateOne) ClearDeletedAt() *WorkExperienceUpdateOne {
	weuo.mutation.ClearDeletedAt()
	return weuo
}

// SetInternalComments sets the "internal_comments" field.
func (weuo *WorkExperienceUpdateOne) SetInternalComments(s string) *WorkExperienceUpdateOne {
	weuo.mutation.SetInternalComments(s)
	return weuo
}

// SetNillableInternalComments sets the "internal_comments" field if the given value is not nil.
func (weuo *WorkExperienceUpdateOne) SetNillableInternalComments(s *string) *WorkExperienceUpdateOne {
	if s != nil {
		weuo.SetInternalComments(*s)
	}
	return weuo
}

// ClearInternalComments clears the value of the "internal_comments" field.
func (weuo *WorkExperienceUpdateOne) ClearInternalComments() *WorkExperienceUpdateOne {
	weuo.mutation.ClearInternalComments()
	return weuo
}

// SetApplicantProfile sets the "applicant_profile" edge to the ApplicantProfile entity.
func (weuo *WorkExperienceUpdateOne) SetApplicantProfile(a *ApplicantProfile) *WorkExperienceUpdateOne {
	return weuo.SetApplicantProfileID(a.ID)
}

// Mutation returns the WorkExperienceMutation object of the builder.
func (weuo *WorkExperienceUpdateOne) Mutation() *WorkExperienceMutation {
	return weuo.mutation
}

// ClearApplicantProfile clears the "applicant_profile" edge to the ApplicantProfile entity.
func (weuo *WorkExperienceUpdateOne) ClearApplicantProfile() *WorkExperienceUpdateOne {
	weuo.mutation.ClearApplicantProfile()
	return weuo
}

// Where appends a list predicates to the WorkExperienceUpdate builder.
func (weuo *WorkExperienceUpdateOne) Where(ps ...predicate.WorkExperience) *WorkExperienceUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkExperienceUpdateOne) Select(field string, fields ...string) *WorkExperienceUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkExperience entity.
func (weuo *WorkExperienceUpdateOne) Save(ctx context.Context) (*WorkExperience, error) {
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkExperienceUpdateOne) SaveX(ctx context.Context) *WorkExperience {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (weuo *WorkExperienceUpdateOne) sqlSave(ctx context.Context) (_node *WorkExperience, err error) {
	_spec := sqlgraph.NewUpdateSpec(workexperience.Table, workexperience.Columns, sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkExperience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperience.FieldID)
		for _, f := range fields {
			if !workexperience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workexperience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.Company(); ok {
		_spec.SetField(workexperience.FieldCompany, field.TypeString, value)
	}
	if weuo.mutation.CompanyCleared() {
		_spec.ClearField(workexperience.FieldCompany, field.TypeString)
	}
	if value, ok := weuo.mutation.Position(); ok {
		_spec.SetField(workexperience.FieldPosition, field.TypeString, value)
	}
	if weuo.mutation.PositionCleared() {
		_spec.ClearField(workexperience.FieldPosition, field.TypeString)
	}
	if value, ok := weuo.mutation.Description(); ok {
		_spec.SetField(workexperience.FieldDescription, field.TypeString, value)
	}
	if weuo.mutation.DescriptionCleared() {
		_spec.ClearField(workexperience.FieldDescription, field.TypeString)
	}
	if value, ok := weuo.mutation.StartDate(); ok {
		_spec.SetField(workexperience.FieldStartDate, field.TypeTime, value)
	}
	if weuo.mutation.StartDateCleared() {
		_spec.ClearField(workexperience.FieldStartDate, field.TypeTime)
	}
	if value, ok := weuo.mutation.EndDate(); ok {
		_spec.SetField(workexperience.FieldEndDate, field.TypeTime, value)
	}
	if weuo.mutation.EndDateCleared() {
		_spec.ClearField(workexperience.FieldEndDate, field.TypeTime)
	}
	if value, ok := weuo.mutation.CreatedAt(); ok {
		_spec.SetField(workexperience.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workexperience.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.DeletedAt(); ok {
		_spec.SetField(workexperience.FieldDeletedAt, field.TypeTime, value)
	}
	if weuo.mutation.DeletedAtCleared() {
		_spec.ClearField(workexperience.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := weuo.mutation.InternalComments(); ok {
		_spec.SetField(workexperience.FieldInternalComments, field.TypeString, value)
	}
	if weuo.mutation.InternalCommentsCleared() {
		_spec.ClearField(workexperience.FieldInternalComments, field.TypeString)
	}
	if weuo.mutation.ApplicantProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperience.ApplicantProfileTable,
			Columns: []string{workexperience.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ApplicantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperience.ApplicantProfileTable,
			Columns: []string{workexperience.ApplicantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicantprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkExperience{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
