// Code generated by ent, DO NOT EDIT.

package application

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJobOfferID holds the string denoting the job_offer_id field in the database.
	FieldJobOfferID = "job_offer_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldApplicantProfileID holds the string denoting the applicant_profile_id field in the database.
	FieldApplicantProfileID = "applicant_profile_id"
	// EdgeApplicantProfile holds the string denoting the applicant_profile edge name in mutations.
	EdgeApplicantProfile = "applicant_profile"
	// EdgeJobOffer holds the string denoting the job_offer edge name in mutations.
	EdgeJobOffer = "job_offer"
	// EdgeInterviews holds the string denoting the interviews edge name in mutations.
	EdgeInterviews = "interviews"
	// Table holds the table name of the application in the database.
	Table = "applications"
	// ApplicantProfileTable is the table that holds the applicant_profile relation/edge.
	ApplicantProfileTable = "applications"
	// ApplicantProfileInverseTable is the table name for the ApplicantProfile entity.
	// It exists in this package in order to avoid circular dependency with the "applicantprofile" package.
	ApplicantProfileInverseTable = "applicant_profiles"
	// ApplicantProfileColumn is the table column denoting the applicant_profile relation/edge.
	ApplicantProfileColumn = "applicant_profile_id"
	// JobOfferTable is the table that holds the job_offer relation/edge.
	JobOfferTable = "applications"
	// JobOfferInverseTable is the table name for the JobOffer entity.
	// It exists in this package in order to avoid circular dependency with the "joboffer" package.
	JobOfferInverseTable = "job_offers"
	// JobOfferColumn is the table column denoting the job_offer relation/edge.
	JobOfferColumn = "job_offer_id"
	// InterviewsTable is the table that holds the interviews relation/edge.
	InterviewsTable = "interviews"
	// InterviewsInverseTable is the table name for the Interview entity.
	// It exists in this package in order to avoid circular dependency with the "interview" package.
	InterviewsInverseTable = "interviews"
	// InterviewsColumn is the table column denoting the interviews relation/edge.
	InterviewsColumn = "application_id"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldJobOfferID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldApplicantProfileID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Application queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJobOfferID orders the results by the job_offer_id field.
func ByJobOfferID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobOfferID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByApplicantProfileID orders the results by the applicant_profile_id field.
func ByApplicantProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicantProfileID, opts...).ToFunc()
}

// ByApplicantProfileField orders the results by applicant_profile field.
func ByApplicantProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicantProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobOfferField orders the results by job_offer field.
func ByJobOfferField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobOfferStep(), sql.OrderByField(field, opts...))
	}
}

// ByInterviewsCount orders the results by interviews count.
func ByInterviewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInterviewsStep(), opts...)
	}
}

// ByInterviews orders the results by interviews terms.
func ByInterviews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInterviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicantProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicantProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicantProfileTable, ApplicantProfileColumn),
	)
}
func newJobOfferStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobOfferInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobOfferTable, JobOfferColumn),
	)
}
func newInterviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InterviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InterviewsTable, InterviewsColumn),
	)
}
