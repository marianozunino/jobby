// Code generated by ent, DO NOT EDIT.

package joboffercategory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the joboffercategory type in the database.
	Label = "job_offer_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJobOfferID holds the string denoting the job_offer_id field in the database.
	FieldJobOfferID = "job_offer_id"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeJobOffer holds the string denoting the job_offer edge name in mutations.
	EdgeJobOffer = "job_offer"
	// Table holds the table name of the joboffercategory in the database.
	Table = "job_offer_categories"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "job_offer_categories"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_id"
	// JobOfferTable is the table that holds the job_offer relation/edge.
	JobOfferTable = "job_offer_categories"
	// JobOfferInverseTable is the table name for the JobOffer entity.
	// It exists in this package in order to avoid circular dependency with the "joboffer" package.
	JobOfferInverseTable = "job_offers"
	// JobOfferColumn is the table column denoting the job_offer relation/edge.
	JobOfferColumn = "job_offer_id"
)

// Columns holds all SQL columns for joboffercategory fields.
var Columns = []string{
	FieldID,
	FieldJobOfferID,
	FieldCategoryID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the JobOfferCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJobOfferID orders the results by the job_offer_id field.
func ByJobOfferID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobOfferID, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobOfferField orders the results by job_offer field.
func ByJobOfferField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobOfferStep(), sql.OrderByField(field, opts...))
	}
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
func newJobOfferStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobOfferInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobOfferTable, JobOfferColumn),
	)
}
