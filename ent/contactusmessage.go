// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/marianozunino/cc-backend-go/ent/contactusmessage"
)

// ContactUsMessage is the model entity for the ContactUsMessage schema.
type ContactUsMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone *string `json:"phone,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    *time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactUsMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactusmessage.FieldName, contactusmessage.FieldEmail, contactusmessage.FieldMessage, contactusmessage.FieldPhone:
			values[i] = new(sql.NullString)
		case contactusmessage.FieldCreatedAt, contactusmessage.FieldUpdatedAt, contactusmessage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case contactusmessage.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactUsMessage fields.
func (cum *ContactUsMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactusmessage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cum.ID = *value
			}
		case contactusmessage.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cum.Name = value.String
			}
		case contactusmessage.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				cum.Email = value.String
			}
		case contactusmessage.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				cum.Message = value.String
			}
		case contactusmessage.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				cum.Phone = new(string)
				*cum.Phone = value.String
			}
		case contactusmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cum.CreatedAt = value.Time
			}
		case contactusmessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cum.UpdatedAt = value.Time
			}
		case contactusmessage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cum.DeletedAt = new(time.Time)
				*cum.DeletedAt = value.Time
			}
		default:
			cum.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContactUsMessage.
// This includes values selected through modifiers, order, etc.
func (cum *ContactUsMessage) Value(name string) (ent.Value, error) {
	return cum.selectValues.Get(name)
}

// Update returns a builder for updating this ContactUsMessage.
// Note that you need to call ContactUsMessage.Unwrap() before calling this method if this ContactUsMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cum *ContactUsMessage) Update() *ContactUsMessageUpdateOne {
	return NewContactUsMessageClient(cum.config).UpdateOne(cum)
}

// Unwrap unwraps the ContactUsMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cum *ContactUsMessage) Unwrap() *ContactUsMessage {
	_tx, ok := cum.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContactUsMessage is not a transactional entity")
	}
	cum.config.driver = _tx.drv
	return cum
}

// String implements the fmt.Stringer.
func (cum *ContactUsMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ContactUsMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cum.ID))
	builder.WriteString("name=")
	builder.WriteString(cum.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(cum.Email)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(cum.Message)
	builder.WriteString(", ")
	if v := cum.Phone; v != nil {
		builder.WriteString("phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cum.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cum.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cum.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ContactUsMessages is a parsable slice of ContactUsMessage.
type ContactUsMessages []*ContactUsMessage
