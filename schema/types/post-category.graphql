type PostCategory {
  id: ID!
  name: String!
  slug: String!

  createdAt: Timestamp!
  updatedAt: Timestamp!
  deletedAt: Timestamp
}

input PostCategoryAggregationInput {
  id: SortOrder
  name: SortOrder
  slug: SortOrder

  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
}

input PostCategoryWhereInput {
  id: ID
  name: String
  slug: String
}

input PostCategoryCreateInput {
  name: String!

  # if slug is not provided, it will be generated from name
  slug: String
}

input PostCategoryUpdateInput {
  name: String!
}

type PaginatedPostCategoryResponse {
  edges: [PostCategory!]!
  total: Int!
  take: Int
  skip: Int
}
extend type Query {
  postCategory(id: ID!): PostCategory!
  postCategories(
    orderBy: PostCategoryAggregationInput
    take: Int = 10
    skip: Int = 0
    where: PostCategoryWhereInput
  ): PaginatedPostCategoryResponse!
}

extend type Mutation {
  createPostCategory(input: PostCategoryCreateInput!): PostCategory!
  deletePostCategory(id: ID!): PostCategory!
  updatePostCategory(id: ID!, input: PostCategoryUpdateInput!): PostCategory!
}
